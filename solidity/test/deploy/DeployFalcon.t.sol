// SPDX-License-Identifier: MIT
pragma solidity ^0.8.25;

import {Script} from "../../lib/forge-std/src/Script.sol";
import "../../src/ZKNOX_falcon.sol";

import {console, Test} from "forge-std/Test.sol";

//deploy the precomputed tables for psirev and psiInvrev
contract Script_Deploy_psirev is Test {
    // SPDX-License-Identifier: MIT

    function test_run() external {
        bytes32 salty = keccak256(abi.encodePacked("ZKNOX_v0.14"));

        ZKNOX_falcon FALCON = new ZKNOX_falcon{salt: salty}();

        // public key in ntt form
        // forgefmt: disable-next-line
         uint256[32] memory tmp_pkc = [5662797900309780854973796610500849947334657117880689816302353465126500706865, 19773102689601973621062070293263100534733440101750387150077711329493973274058, 14606681890476865709816748627007131256488820167404174518724605890405097603719, 15845234755931409677594030697035096324340457247480758851130851814703350289524, 5524941775098342886171484209767745714294893760953145782448900256027476885810, 15301033023652038200658165594502048003364566882283859976805808429697192567788, 18875246040654000517074755552890901133645669291006567534900678519700207707731, 11843395683334522200668269515783436692309636627649985746204914551011013629864, 8419305811746464065544475584323153271481428319969733938911379662274846467111, 18343417927809591481517183183479503623951147924071925629514120039495430967592, 10007451325105194000131443764495043320645967197761209321537835667210153693191, 779487061150515667795843171268512499191273448454307717194241961063365614179, 14889466660684110621550004892629051623956217990147793956971155241422811501259, 2995124819739638247263964985959552967489690950312509006670204449438399867779, 16698797261630410217796026169071784061995015858612862963622742163763641855864, 13129716852402613948762495927854872029721399215764359316540986925328111906305, 8620514528683669238836845045565231437047299941974001946945409334379184590766, 5184181041252042291984928267300200431567362250531180743278111084485128161037, 15555356690664302555826193017277818624355238475260445618945780405430020481200, 19264077329172342356817033544893125657281034846341493111114385757819435942150, 8708853592016768361541207473719404660232059936330605270802350059910738161396, 21018648773068189736719755689803981281912117625241701774409626083005150670687, 267026197077955750670312407002345619518873569178283514941902712705828521229, 14359242962640593260752841229079220345384234239741953227891227234975247894859, 8320354099602406351863744856415421903486499003224102136141447162113864442068, 17564344674783852357247325589247473882830766139750808683064015010041459773180, 12601232530472338126510941067000966999586933909071534455578397454667291628041, 17820703520112071877812607241017358905719406745793395857586668204300579510382, 20977963461796112341763752649093803701879441191599296283127418471622134932903, 5627732773047409045458881938100601008133088383905060686572856121439798106767, 2602661464000108367786729796742170641292899005030508211661215565063118195399, 20110282897068872581106488251090599973196923955248066799683528955504800771309];

        // signature s2
        // forgefmt: disable-next-line
         uint256[32] memory s2 = [21649177790571192151286347015496942774998047093443469911824293759971769921428, 268561837228003295750097962055377173144230591962156166013405983500166901722, 373131625068829243878329325423678131041649088938736656507320119997555081235, 21486956906798985719744375447418457093904022330284178432016463274856548335792, 21046685012579207363779083391328077072214150550607548013536002123977240477986, 21624441549379106406854913087313490894795813631028932379313967382686196510643, 21269307451108998178385520109334456835115990194191195737525785771781959909565, 21502531263687643325340175878774636041406187334634592429142727315400727670519, 21645644447053892427347704348572035349652711108703358737702992269605067960232, 21642434488002171509128269223391903377510003992725863045650229316731768864833, 143119470082566254482735508500984469699860060818744295831990820277956915152, 21329707513272854740751761229950211571450422559001525308753079369050633482098, 21274936790822894191602613586986915689519661452929637034834680332795904471016, 323334360936185288001981502514033468909440677622868552612107777952939454224, 123679299536821298309830082798375208376610949331800767508152351976155721432, 21491932279213207751766589616948004610084312966776105784769653908907333255233, 21555542660741624619295241800731825770453854520453475890665283178064948298017, 21221927933047296480928267470961179332618989116613413084747202280410795475009, 21640345869013883370330016229125346816596850570010888955143002957579576672404, 447342652619835196009820811808904031226531727490450346028265756926131110099, 48035216006736122407389636281329469805748676305369281203171327493607718987, 21518434450972238337302563984051994092825336572101022453461300155810011086937, 333938521709614508411251346141738162769014840087489168548614530158677590118, 21322638943617910190789463252175561671279485636811843560369873363276365299985, 67147494647851671533097211665243328708469268023218856658099323225006878424, 116612876865130439291083919507652316067243925780313881626436539371081498829, 21676008001193555476662926248472147257885449589381323941811680418544747741313, 127542681867544440369323810542605531185295482507825078859650437370710524036, 21474589727324966696397422730377349856660942504908738086594141842221836664953, 204955823209712158529229531556743920712069026834325166406926177293848227824, 55101682679218165125147635923326063419450638759116465378302788679604895838, 198216003314064520968126849996156841255555215727010889276036638293899030319];

        ZKNOX_falcon.CompactSignature memory sig;

        sig.s2 = new uint256[](32);
        uint256[] memory pkc = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            sig.s2[i] = s2[i];
            pkc[i] = tmp_pkc[i];
        }

        // message
        bytes memory message = "My name is Renaud";
        sig.salt =
            "\xab\x0b\xae\x31\x63\x39\x89\x43\x04\xe3\x58\x77\xb0\xc2\x8a\x9b\x1f\xd1\x66\xc7\x96\xb9\xcc\x25\x8a\x06\x4a\x8f\x57\xe2\x7f\x2a\x5b\x8d\x54\x8a\x72\x8c\x94\x44";
        bool result = FALCON.verify(message, sig.salt, sig.s2, pkc);
        assertEq(true, result);
    }
}
