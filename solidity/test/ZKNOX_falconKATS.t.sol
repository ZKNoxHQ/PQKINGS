// code generated using pythonref/generate_falcon_epervier_shorter_zknox_test_vectors.py.
pragma solidity ^0.8.25;

import {Test, console} from "forge-std/Test.sol";
import "../src/ZKNOX_falcon_encodings.sol";
import "../src/ZKNOX_falcon.sol";
import "../src/ZKNOX_falcon_deploy.sol";
import "../src/ZKNOX_display.sol";

contract FalconKATS_Test is Test {
    ZKNOX_falcon falcon;
    //exemple of stateless initialisation, no external contract provided
    ZKNOX_NTT ntt = new ZKNOX_NTT(address(0), address(0), 12289, 12265);
    // forgefmt: disable-next-line
    uint256[1024] psi_rev = [uint256(1), 10810, 7143, 4043, 10984, 722, 5736, 8155, 3542, 8785, 9744, 3621, 10643, 1212, 3195, 5860, 7468, 2639, 9664, 11340, 11726, 9314, 9283, 9545, 5728, 7698, 5023, 5828, 8961, 6512, 7311, 1351, 2319, 11119, 11334, 11499, 9088, 3014, 5086, 10963, 4846, 9542, 9154, 3712, 4805, 8736, 11227, 9995, 3091, 12208, 7969, 11289, 9326, 7393, 9238, 2366, 11112, 8034, 10654, 9521, 12149, 10436, 7678, 11563, 1260, 4388, 4632, 6534, 2426, 334, 1428, 1696, 2013, 9000, 729, 3241, 2881, 3284, 7197, 10200, 8595, 7110, 10530, 8582, 3382, 11934, 9741, 8058, 3637, 3459, 145, 6747, 9558, 8357, 7399, 6378, 9447, 480, 1022, 9, 9821, 339, 5791, 544, 10616, 4278, 6958, 7300, 8112, 8705, 1381, 9764, 11336, 8541, 827, 5767, 2476, 118, 2197, 7222, 3949, 8993, 4452, 2396, 7935, 130, 2837, 6915, 2401, 442, 7188, 11222, 390, 773, 8456, 3778, 354, 4861, 9377, 5698, 5012, 9808, 2859, 11244, 1017, 7404, 1632, 7205, 27, 9223, 8526, 10849, 1537, 242, 4714, 8146, 9611, 3704, 5019, 11744, 1002, 5011, 5088, 8005, 7313, 10682, 8509, 11414, 9852, 3646, 6022, 2987, 9723, 10102, 6250, 9867, 11224, 2143, 11885, 7644, 1168, 5277, 11082, 3248, 493, 8193, 6845, 2381, 7952, 11854, 1378, 1912, 2166, 3915, 12176, 7370, 12129, 3149, 12286, 4437, 3636, 4938, 5291, 2704, 10863, 7635, 1663, 10512, 3364, 1689, 4057, 9018, 9442, 7875, 2174, 4372, 7247, 9984, 4053, 2645, 5195, 9509, 7394, 1484, 9042, 9603, 8311, 9320, 9919, 2865, 5332, 3510, 1630, 10163, 5407, 3186, 11136, 9405, 10040, 8241, 9890, 8889, 7098, 9153, 9289, 671, 3016, 243, 6730, 420, 10111, 1544, 3985, 4905, 3531, 476, 49, 1263, 5915, 1483, 9789, 10800, 10706, 6347, 1512, 350, 10474, 5383, 5369, 10232, 9087, 4493, 9551, 6421, 6554, 2655, 9280, 1693, 174, 723, 10314, 8532, 347, 2925, 8974, 11863, 1858, 4754, 3030, 4115, 2361, 10446, 2908, 218, 3434, 8760, 3963, 576, 6142, 9842, 1954, 10238, 9407, 10484, 3991, 8320, 9522, 156, 2281, 5876, 10258, 5333, 3772, 418, 5908, 11836, 5429, 7515, 7552, 1293, 295, 6099, 5766, 652, 8273, 4077, 8527, 9370, 325, 10885, 11143, 11341, 5990, 1159, 8561, 8240, 3329, 4298, 12121, 2692, 5961, 7183, 10327, 1594, 6167, 9734, 7105, 11089, 1360, 3956, 6170, 5297, 8210, 11231, 922, 441, 1958, 4322, 1112, 2078, 4046, 709, 9139, 1319, 4240, 8719, 6224, 11454, 2459, 683, 3656, 12225, 10723, 5782, 9341, 9786, 9166, 10542, 9235, 6803, 7856, 6370, 3834, 7032, 7048, 9369, 8120, 9162, 6821, 1010, 8807, 787, 5057, 4698, 4780, 8844, 12097, 1321, 4912, 10240, 677, 6415, 6234, 8953, 1323, 9523, 12237, 3174, 1579, 11858, 9784, 5906, 3957, 9450, 151, 10162, 12231, 12048, 3532, 11286, 1956, 7280, 11404, 6281, 3477, 6608, 142, 11184, 9445, 3438, 11314, 4212, 9260, 6695, 4782, 5886, 8076, 504, 2302, 11684, 11868, 8209, 3602, 6068, 8689, 3263, 6077, 7665, 7822, 7500, 6752, 4749, 4449, 6833, 12142, 8500, 6118, 8471, 1190, 9606, 3860, 5445, 7753, 11239, 5079, 9027, 2169, 11767, 7965, 4916, 8214, 5315, 11011, 9945, 1973, 6715, 8775, 11248, 5925, 11271, 654, 3565, 1702, 1987, 6760, 5206, 3199, 12233, 6136, 6427, 6874, 8646, 4948, 6152, 400, 10561, 5339, 5446, 3710, 6093, 468, 8301, 316, 11907, 10256, 8291, 3879, 1922, 10930, 6854, 973, 11035, 7, 1936, 845, 3723, 3154, 5054, 3285, 7929, 216, 50, 6763, 769, 767, 8484, 10076, 4153, 3120, 6184, 6203, 5646, 8348, 3753, 3536, 5370, 3229, 4730, 10583, 3929, 1282, 8717, 2021, 9457, 3944, 4099, 5604, 6759, 2171, 8809, 11024, 3007, 9344, 5349, 2633, 1406, 9057, 11996, 4855, 8520, 9348, 11722, 6627, 5289, 3837, 2595, 3221, 4273, 4050, 7082, 844, 5202, 11309, 11607, 4590, 7207, 8820, 6138, 7846, 8871, 4693, 2338, 9996, 11872, 1802, 1555, 5103, 10398, 7878, 10699, 1223, 9955, 11009, 614, 12265, 10918, 11385, 9804, 6742, 7250, 881, 11924, 1015, 10362, 5461, 9343, 2637, 7779, 4684, 3360, 7154, 63, 7302, 2373, 3670, 3808, 578, 5368, 11839, 1944, 7628, 11779, 9667, 6903, 5618, 10631, 5789, 3502, 5043, 826, 3090, 1398, 3065, 1506, 6586, 4483, 6389, 910, 7570, 11538, 4518, 3094, 1160, 4820, 2730, 5411, 10036, 1868, 2478, 9449, 4194, 3019, 10506, 7211, 7724, 4974, 7119, 2672, 11424, 1279, 189, 3116, 10526, 2209, 10759, 1694, 8420, 7866, 5832, 1350, 10555, 8474, 7014, 10499, 11038, 6879, 2035, 1040, 10407, 6164, 7519, 944, 5287, 8620, 6616, 9269, 6883, 7624, 4834, 2712, 9461, 4352, 8176, 72, 3840, 10447, 3451, 8195, 11048, 4378, 6508, 9244, 9646, 1095, 2873, 2827, 11498, 2434, 11169, 9754, 12268, 6481, 874, 9988, 170, 6639, 2307, 4289, 11641, 12139, 11259, 11823, 3821, 1681, 4649, 5969, 2929, 6026, 1573, 8443, 3793, 6226, 11787, 5118, 2602, 10388, 1849, 5776, 9021, 3795, 7988, 7766, 457, 12281, 11410, 9696, 982, 10013, 4218, 4390, 8835, 8531, 7785, 778, 530, 2626, 3578, 4697, 8823, 1701, 10243, 2940, 9332, 10808, 3317, 9757, 139, 3332, 343, 8841, 4538, 10381, 7078, 1866, 1208, 7562, 10584, 2450, 11873, 814, 716, 10179, 2164, 6873, 5412, 8080, 9011, 6296, 3515, 11851, 1218, 5061, 10753, 10568, 2429, 8186, 1373, 9307, 717, 8700, 8921, 4227, 4238, 11677, 8067, 1526, 11749, 12164, 3163, 4032, 6127, 7449, 1389, 10221, 4404, 11943, 3359, 9084, 5209, 1092, 3678, 4265, 10361, 464, 1826, 2926, 4489, 9118, 1136, 3449, 3708, 9051, 2065, 5826, 3495, 4564, 8755, 3961, 10533, 4145, 2275, 2461, 4267, 5653, 5063, 8113, 10771, 8524, 11014, 5508, 11113, 6555, 4860, 1125, 10844, 11158, 6302, 6693, 579, 3889, 9520, 3114, 6323, 212, 8314, 4883, 6454, 3087, 1417, 5676, 7784, 2257, 3744, 4963, 2528, 9233, 5102, 11877, 6701, 6444, 4924, 4781, 1014, 11841, 1327, 3607, 3942, 7057, 2717, 60, 3200, 10754, 5836, 7723, 2260, 68, 180, 4138, 7684, 2689, 10880, 7070, 204, 5509, 10821, 8308, 8882, 463, 10945, 9247, 9806, 10235, 4739, 8038, 6771, 1226, 9261, 5216, 11925, 9929, 11053, 9272, 7043, 4475, 3121, 4705, 1057, 9689, 11883, 10602, 146, 5268, 1403, 1804, 6094, 7100, 12050, 9389, 994, 4554, 4670, 11777, 5464, 4906, 3375, 9998, 8896, 4335, 7376, 3528, 3825, 8054, 9342, 8307, 636, 5609, 11667, 10552, 5672, 4499, 5598, 3344, 10397, 8665, 6565, 10964, 11260, 10344, 5959, 10141, 8330, 5797, 2442, 1248, 5115, 4939, 10975, 1744, 2894, 8635, 6599, 9834, 8342, 338, 3343, 8170, 1522, 10138, 12269, 5002, 4608, 5163, 4578, 377, 11914, 1620, 10453, 11864, 10104, 11897, 6085, 8122, 11251, 11366, 10058, 6197, 2800, 193, 506, 1255, 1392, 5784, 3276, 8951, 2212, 9615, 10347, 8881, 2575, 1165, 2776, 11111, 6811, 3511];
    // forgefmt: disable-next-line
    uint256[1024] psi_inv_rev = [uint256(1), 1479, 8246, 5146, 4134, 6553, 11567, 1305, 6429, 9094, 11077, 1646, 8668, 2545, 3504, 8747, 10938, 4978, 5777, 3328, 6461, 7266, 4591, 6561, 2744, 3006, 2975, 563, 949, 2625, 9650, 4821, 726, 4611, 1853, 140, 2768, 1635, 4255, 1177, 9923, 3051, 4896, 2963, 1000, 4320, 81, 9198, 2294, 1062, 3553, 7484, 8577, 3135, 2747, 7443, 1326, 7203, 9275, 3201, 790, 955, 1170, 9970, 5374, 9452, 12159, 4354, 9893, 7837, 3296, 8340, 5067, 10092, 12171, 9813, 6522, 11462, 3748, 953, 2525, 10908, 3584, 4177, 4989, 5331, 8011, 1673, 11745, 6498, 11950, 2468, 12280, 11267, 11809, 2842, 5911, 4890, 3932, 2731, 5542, 12144, 8830, 8652, 4231, 2548, 355, 8907, 3707, 1759, 5179, 3694, 2089, 5092, 9005, 9408, 9048, 11560, 3289, 10276, 10593, 10861, 11955, 9863, 5755, 7657, 7901, 11029, 11813, 8758, 7384, 8304, 10745, 2178, 11869, 5559, 12046, 9273, 11618, 3000, 3136, 5191, 3400, 2399, 4048, 2249, 2884, 1153, 9103, 6882, 2126, 10659, 8779, 6957, 9424, 2370, 2969, 3978, 2686, 3247, 10805, 4895, 2780, 7094, 9644, 8236, 2305, 5042, 7917, 10115, 4414, 2847, 3271, 8232, 10600, 8925, 1777, 10626, 4654, 1426, 9585, 6998, 7351, 8653, 7852, 3, 9140, 160, 4919, 113, 8374, 10123, 10377, 10911, 435, 4337, 9908, 5444, 4096, 11796, 9041, 1207, 7012, 11121, 4645, 404, 10146, 1065, 2422, 6039, 2187, 2566, 9302, 6267, 8643, 2437, 875, 3780, 1607, 4976, 4284, 7201, 7278, 11287, 545, 7270, 8585, 2678, 4143, 7575, 12047, 10752, 1440, 3763, 3066, 12262, 5084, 10657, 4885, 11272, 1045, 9430, 2481, 7277, 6591, 2912, 7428, 11935, 8511, 3833, 11516, 11899, 1067, 5101, 11847, 9888, 1254, 11316, 5435, 1359, 10367, 8410, 3998, 2033, 382, 11973, 3988, 11821, 6196, 8579, 6843, 6950, 1728, 11889, 6137, 7341, 3643, 5415, 5862, 6153, 56, 9090, 7083, 5529, 10302, 10587, 8724, 11635, 1018, 6364, 1041, 3514, 5574, 10316, 2344, 1278, 6974, 4075, 7373, 4324, 522, 10120, 3262, 7210, 1050, 4536, 6844, 8429, 2683, 11099, 3818, 6171, 3789, 147, 5456, 7840, 7540, 5537, 4789, 4467, 4624, 6212, 9026, 3600, 6221, 8687, 4080, 421, 605, 9987, 11785, 4213, 6403, 7507, 5594, 3029, 8077, 975, 8851, 2844, 1105, 12147, 5681, 8812, 6008, 885, 5009, 10333, 1003, 8757, 241, 58, 2127, 12138, 2839, 8332, 6383, 2505, 431, 10710, 9115, 52, 2766, 10966, 3336, 6055, 5874, 11612, 2049, 7377, 10968, 192, 3445, 7509, 7591, 7232, 11502, 3482, 11279, 5468, 3127, 4169, 2920, 5241, 5257, 8455, 5919, 4433, 5486, 3054, 1747, 3123, 2503, 2948, 6507, 1566, 64, 8633, 11606, 9830, 835, 6065, 3570, 8049, 10970, 3150, 11580, 8243, 10211, 11177, 7967, 10331, 11848, 11367, 1058, 4079, 6992, 6119, 8333, 10929, 1200, 5184, 2555, 6122, 10695, 1962, 5106, 6328, 9597, 168, 7991, 8960, 4049, 3728, 11130, 6299, 948, 1146, 1404, 11964, 2919, 3762, 8212, 4016, 11637, 6523, 6190, 11994, 10996, 4737, 4774, 6860, 453, 6381, 11871, 8517, 6956, 2031, 6413, 10008, 12133, 2767, 3969, 8298, 1805, 2882, 2051, 10335, 2447, 6147, 11713, 8326, 3529, 8855, 12071, 9381, 1843, 9928, 8174, 9259, 7535, 10431, 426, 3315, 9364, 11942, 3757, 1975, 11566, 12115, 10596, 3009, 9634, 5735, 5868, 2738, 7796, 3202, 2057, 6920, 6906, 1815, 11939, 10777, 5942, 1583, 1489, 2500, 10806, 6374, 11026, 12240, 8778, 5478, 1178, 9513, 11124, 9714, 3408, 1942, 2674, 10077, 3338, 9013, 6505, 10897, 11034, 11783, 12096, 9489, 6092, 2231, 923, 1038, 4167, 6204, 392, 2185, 425, 1836, 10669, 375, 11912, 7711, 7126, 7681, 7287, 20, 2151, 10767, 4119, 8946, 11951, 3947, 2455, 5690, 3654, 9395, 10545, 1314, 7350, 7174, 11041, 9847, 6492, 3959, 2148, 6330, 1945, 1029, 1325, 5724, 3624, 1892, 8945, 6691, 7790, 6617, 1737, 622, 6680, 11653, 3982, 2947, 4235, 8464, 8761, 4913, 7954, 3393, 2291, 8914, 7383, 6825, 512, 7619, 7735, 11295, 2900, 239, 5189, 6195, 10485, 10886, 7021, 12143, 1687, 406, 2600, 11232, 7584, 9168, 7814, 5246, 3017, 1236, 2360, 364, 7073, 3028, 11063, 5518, 4251, 7550, 2054, 2483, 3042, 1344, 11826, 3407, 3981, 1468, 6780, 12085, 5219, 1409, 9600, 4605, 8151, 12109, 12221, 10029, 4566, 6453, 1535, 9089, 12229, 9572, 5232, 8347, 8682, 10962, 448, 11275, 7508, 7365, 5845, 5588, 412, 7187, 3056, 9761, 7326, 8545, 10032, 4505, 6613, 10872, 9202, 5835, 7406, 3975, 12077, 5966, 9175, 2769, 8400, 11710, 5596, 5987, 1131, 1445, 11164, 7429, 5734, 1176, 6781, 1275, 3765, 1518, 4176, 7226, 6636, 8022, 9828, 10014, 8144, 1756, 8328, 3534, 7725, 8794, 6463, 10224, 3238, 8581, 8840, 11153, 3171, 7800, 9363, 10463, 11825, 1928, 8024, 8611, 11197, 7080, 3205, 8930, 346, 7885, 2068, 10900, 4840, 6162, 8257, 9126, 125, 540, 10763, 4222, 612, 8051, 8062, 3368, 3589, 11572, 2982, 10916, 4103, 9860, 1721, 1536, 7228, 11071, 438, 8774, 5993, 3278, 4209, 6877, 5416, 10125, 2110, 11573, 11475, 416, 9839, 1705, 4727, 11081, 10423, 5211, 1908, 7751, 3448, 11946, 8957, 12150, 2532, 8972, 1481, 2957, 9349, 2046, 10588, 3466, 7592, 8711, 9663, 11759, 11511, 4504, 3758, 3454, 7899, 8071, 2276, 11307, 2593, 879, 8, 11832, 4523, 4301, 8494, 3268, 6513, 10440, 1901, 9687, 7171, 502, 6063, 8496, 3846, 10716, 6263, 9360, 6320, 7640, 10608, 8468, 466, 1030, 150, 648, 8000, 9982, 5650, 12119, 2301, 11415, 5808, 21, 2535, 1120, 9855, 791, 9462, 9416, 11194, 2643, 3045, 5781, 7911, 1241, 4094, 8838, 1842, 8449, 12217, 4113, 7937, 2828, 9577, 7455, 4665, 5406, 3020, 5673, 3669, 7002, 11345, 4770, 6125, 1882, 11249, 10254, 5410, 1251, 1790, 5275, 3815, 1734, 10939, 6457, 4423, 3869, 10595, 1530, 10080, 1763, 9173, 12100, 11010, 865, 9617, 5170, 7315, 4565, 5078, 1783, 9270, 8095, 2840, 9811, 10421, 2253, 6878, 9559, 7469, 11129, 9195, 7771, 751, 4719, 11379, 5900, 7806, 5703, 10783, 9224, 10891, 9199, 11463, 7246, 8787, 6500, 1658, 6671, 5386, 2622, 510, 4661, 10345, 450, 6921, 11711, 8481, 8619, 9916, 4987, 12226, 5135, 8929, 7605, 4510, 9652, 2946, 6828, 1927, 11274, 365, 11408, 5039, 5547, 2485, 904, 1371, 24, 11675, 1280, 2334, 11066, 1590, 4411, 1891, 7186, 10734, 10487, 417, 2293, 9951, 7596, 3418, 4443, 6151, 3469, 5082, 7699, 682, 980, 7087, 11445, 5207, 8239, 8016, 9068, 9694, 8452, 7000, 5662, 567, 2941, 3769, 7434, 293, 3232, 10883, 9656, 6940, 2945, 9282, 1265, 3480, 10118, 5530, 6685, 8190, 8345, 2832, 10268, 3572, 11007, 8360, 1706, 7559, 9060, 6919, 8753, 8536, 3941, 6643, 6086, 6105, 9169, 8136, 2213, 3805, 11522, 11520, 5526, 12239, 12073, 4360, 9004, 7235, 9135, 8566, 11444, 10353, 12282];

    //stateful initialisation
    function setUp() public {
        bytes32 salt = keccak256(abi.encodePacked("ZKnox"));

        falcon = new ZKNOX_falcon();
    }

    //kat vector 0 from NIST round3 submission
    function test_kats_vector0() public {
        // forgefmt: disable-next-line
        bytes memory pk=hex"096BA86CB658A8F445C9A5E4C28374BEC879C8655F68526923240918074D0147C03162E4A49200648C652803C6FD7509AE9AA799D6310D0BD42724E0635920186207000767CA5A8546B1755308C304B84FC93B069E265985B398D6B834698287FF829AA820F17A7F4226AB21F601EBD7175226BAB256D8888F009032566D6383D68457EA155A94301870D589C678ED304259E9D37B193BC2A7CCBCBEC51D69158C44073AEC9792630253318BC954DBF50D15028290DC2D309C7B7B02A6823744D463DA17749595CB77E6D16D20D1B4C3AAD89D320EBE5A672BB96D6CD5C1EFEC8B811200CBB062E473352540EDDEF8AF9499F8CDD1DC7C6873F0C7A6BCB7097560271F946849B7F373640BB69CA9B518AA380A6EB0A7275EE84E9C221AED88F5BFBAF43A3EDE8E6AA42558104FAF800E018441930376C6F6E751569971F47ADBCA5CA00C801988F317A18722A29298925EA154DBC9024E120524A2D41DC0F18FD8D909F6C50977404E201767078BA9A1F9E40A8B2BA9C01B7DA3A0B73A4C2A6B4F518BBEE3455D0AF2204DDC031C805C72CCB647940B1E6794D859AAEBCEA0DEB581D61B9248BD9697B5CB974A8176E8F910469CAE0AB4ED92D2AEE9F7EB50296DAF8057476305C1189D1D9840A0944F0447FB81E511420E67891B98FA6C257034D5A063437D379177CE8D3FA6EAF12E2DBB7EB8E498481612B1929617DA5FB45E4CDF893927D8BA842AA861D9C50471C6D0C6DF7E2BB26465A0EB6A3A709DE792AAFAAF922AA95DD5920B72B4B8856C6E632860B10F5CC08450003671AF388961872B466400ADB815BA81EA794945D19A100622A6CA0D41C4EA620C21DC125119E372418F04402D9FA7180F7BC89AFA54F8082244A42F46E5B5ABCE87B50A7D6FEBE8D7BBBAC92657CBDA1DB7C25572A4C1D0BAEA30447A865A2B1036B880037E2F4D26D453E9E913259779E9169B28A62EB809A5C744E04E260E1F2BBDA874F1AC674839DDB47B3148C5946DE0180148B7973D63C58193B17CD05D16E80CD7928C2A338363A23A81C0608C87505589B9DA1C617E7B70786B6754FBB30A5816810B9E126CFCC5AA49326E9D842973874B6359B5DB75610BA68A98C7B5E83F125A82522E13B83FB8F864E2A97B73B5D544A7415B6504A13939EAB1595D64FAF41FAB25A864A574DE524405E878339877886D2FC07FA0311508252413EDFA1158466667AFF78386DAF7CB4C9B850992F96E20525330599AB601D454688E294C8C3E";
        // forgefmt: disable-next-line
        bytes memory sm=hex
        // forgefmt: disable-next-line
        uint256[512] memory sigDecompress=[uint256(0x87), 0x2e6b, 0x8f, 0x9e, 0x118, 0x2fdf, 0x2f18, 0x27, 0x2f5c, 0x2e9c, 0x81, 0x2f44, 0x56, 0x2ea3, 0x2f8b, 0x4, 0x2fd9, 0x2f75, 0x5, 0x2fa1, 0x5e, 0x29, 0x2fce, 0x2fa8, 0x2eca, 0x6b, 0x1, 0x2f2c, 0x2f1d, 0x2fe8, 0x13b, 0x2f2d, 0x2f97, 0xd7, 0x3d, 0x2fee, 0x70, 0x2fcc, 0x2ff9, 0x32, 0x2f4c, 0x87, 0x66, 0x2fa8, 0x2f40, 0x73, 0x2fc6, 0x1b, 0x51, 0x39, 0x2efd, 0x2f86, 0x4c, 0x2f02, 0xbe, 0x49, 0x12, 0x2efb, 0x2f29, 0x2fb4, 0x110, 0x2f4d, 0x65, 0x2fe3, 0xb1, 0x28, 0xd4, 0x2f93, 0x2e41, 0xf8, 0x17, 0xf, 0xd, 0x2f56, 0x2efc, 0x13, 0x2f85, 0x61, 0x2f79, 0x16c, 0x2faf, 0x4a, 0x153, 0x2f8f, 0x2ecd, 0x2fbd, 0x2fff, 0x2f17, 0xa6, 0x52, 0xd3, 0x2f7a, 0x4c, 0x2fa2, 0x2f43, 0x18b, 0x2ff2, 0x2f08, 0x57, 0x1d, 0x2fb0, 0xcc, 0x2f1a, 0x2f4c, 0xea, 0x2f70, 0x2fbb, 0x2f23, 0xee, 0x164, 0xa, 0x32, 0x30, 0xde, 0x7b, 0x53, 0x2fa0, 0x10d, 0x58, 0x2ff5, 0x7c, 0x2f90, 0x2eb2, 0x49, 0x2f20, 0x2f06, 0x2ff5, 0x2fa8, 0x2d, 0xa7, 0x2fb9, 0xd4, 0xa, 0x2f8c, 0x93, 0x6d, 0x2f05, 0x2ee0, 0x2fcb, 0x2eef, 0x2fb0, 0x2f62, 0x1, 0x4d, 0xf4, 0x2fa2, 0x2f85, 0x46, 0x2f37, 0x23, 0x2f5b, 0x2ff8, 0x2fc5, 0x9d, 0x26, 0x2fd5, 0x2f94, 0x2fee, 0x2f78, 0x25, 0x50, 0x2ffe, 0xb7, 0xb0, 0x46, 0x18, 0x2f95, 0xaa, 0x2f10, 0x2fb9, 0x97, 0x2, 0x2fe7, 0x101, 0x14, 0x2fbf, 0x2fe6, 0xfb, 0x5, 0x3000, 0xd, 0x163, 0xb2, 0x45, 0x2f4c, 0x2fba, 0x20, 0xc6, 0x80, 0x2f2a, 0x10c, 0x2f3d, 0x2c, 0x84, 0x2fe5, 0x2fab, 0x21, 0x2f68, 0x62, 0x1cc, 0x46, 0x2ffd, 0x22, 0xe, 0x2fab, 0xb5, 0x2f4f, 0x23, 0x2d5d, 0x2fab, 0x2ed3, 0x2f50, 0xc8, 0x55, 0x17d, 0x7d, 0x2fc1, 0x5f, 0x2fe5, 0x16, 0x47, 0x2fbb, 0x2ee0, 0x2fb5, 0x2f7d, 0x2efc, 0x2fcf, 0x2f98, 0x65, 0x4b, 0x96, 0x2f13, 0x6, 0x83, 0x2ff7, 0x2ffe, 0x2ea6, 0x30, 0x14e, 0x2f98, 0x20, 0x19, 0x2f12, 0x46, 0x2f61, 0x34, 0x7d, 0x3b, 0x5e, 0xd9, 0x2f03, 0x2fc3, 0x2f6f, 0x97, 0x2, 0x2f45, 0x2f51, 0x15c, 0x2f53, 0x47, 0x4a, 0x2fc1, 0x119, 0x2ffe, 0x2f23, 0xf6, 0x5f, 0x2fbe, 0x2fdd, 0x2f37, 0xee, 0x2f48, 0x75, 0x2f6f, 0x2fb8, 0xb1, 0x2fad, 0x2f66, 0xfc, 0x2f4e, 0x2ffa, 0x83, 0x2fe9, 0x2f52, 0xd5, 0x2fd4, 0x27, 0x2faa, 0x2fcf, 0x2f1a, 0xe0, 0x6c, 0x71, 0x70, 0x2f7e, 0x76, 0x2fe2, 0x2c, 0xab, 0x49, 0xd, 0x2fd5, 0x4f, 0x114, 0xac, 0xcf, 0xc5, 0xfc, 0xd7, 0x2f41, 0x2f6a, 0x44, 0x2f13, 0xcd, 0x2f4a, 0x2fca, 0x2f95, 0x2fb5, 0x77, 0x2ff3, 0x2f07, 0x9e, 0xde, 0x95, 0x9a, 0x64, 0x2f49, 0x110, 0x2fed, 0x90, 0x4f, 0x2f53, 0x71, 0x78, 0x2eaf, 0x6b, 0x2faf, 0x2f5a, 0x2fca, 0x2fbc, 0x121, 0x97, 0x2fdc, 0x20, 0x7d, 0x2eb2, 0x12, 0x2fef, 0x21, 0xd0, 0x2f60, 0x1be, 0x2f55, 0x12f, 0x2fd2, 0xdd, 0x25, 0x2f50, 0x66, 0x33, 0x2f89, 0x3e, 0x2fb2, 0x2ff1, 0x76, 0x2f15, 0x2fc1, 0x0, 0x2faa, 0x2f9b, 0x2f91, 0x2fe8, 0x116, 0xc4, 0x2f0d, 0x2ffe, 0x2ef3, 0x2eca, 0xe0, 0x8, 0xc, 0x70, 0x2f9a, 0x2f1f, 0x2f72, 0x156, 0x2fcd, 0xa0, 0x8f, 0x2f95, 0x2f75, 0x79, 0xc2, 0x2e43, 0x3000, 0x89, 0x8b, 0x2fc4, 0x11b, 0x2f66, 0x2f97, 0x2fc2, 0x2fe1, 0x2f46, 0x2fea, 0xce, 0x2fd4, 0x66, 0x2f38, 0x2e86, 0xf, 0xc, 0x2a, 0x8e, 0xa4, 0x2f9c, 0x2f75, 0x2f2c, 0x2f8c, 0x2fe6, 0x2ffc, 0x2f49, 0x2fd1, 0x2f78, 0x2f6c, 0x9, 0x2f77, 0x3a, 0x2fa5, 0x8d, 0xd5, 0x2fd3, 0x99, 0x2b, 0x54, 0x2fd5, 0x2fc4, 0xa8, 0x5b, 0x2f39, 0x2f9c, 0x2fdb, 0xcc, 0x5a, 0x2ede, 0x2f39, 0x13d, 0x2f05, 0x36, 0x10e, 0xe0, 0x4f, 0x7a, 0x2f0e, 0x16a, 0x17d, 0x5c, 0x71, 0x18, 0xe8, 0xe3, 0x2efb, 0x2f70, 0x2, 0x2f3e, 0x2fb5, 0x2f73, 0x25, 0x81, 0x8, 0x2fdf, 0xe8, 0x2ff2, 0x44, 0x2ffe, 0x2f9d, 0xb8, 0x2fb8, 0x2fa3, 0x2f6f, 0x21, 0x2fb3, 0x2ee8, 0xea, 0x2f6a, 0x2f98, 0x2ef4, 0xdd, 0x2f70, 0x58, 0x2e4e, 0x2fd4, 0x2f68, 0x2f5a, 0x2f44, 0x2fcd, 0x90, 0x64, 0x30, 0x2f95, 0x2fe5, 0x2f2a, 0x2fa3, 0x2f7e, 0x12e, 0x84, 0x15, 0x2fb1, 0x98, 0x2fac, 0x2ea0, 0xa7];
        // forgefmt: disable-next-line
        uint256[512] memory KpubDecompress=[uint256(0x1aea), 0x6cb, 0x1962, 0x28f4, 0x1172, 0x1a5e, 0x130a, 0x374, 0x2fb2, 0x79c, 0x2195, 0x1f68, 0x149a, 0x1232, 0x1024, 0x1807, 0x1340, 0x147c, 0xc5, 0x22e4, 0x2924, 0x2006, 0x1231, 0x2528, 0xf1, 0x2fd7, 0x1426, 0x2e9a, 0x29e6, 0x1d63, 0x434, 0xbd4, 0x9c9, 0xe06, 0xd64, 0x2018, 0x1881, 0x3000, 0x1d9f, 0xa5a, 0x2151, 0x2b17, 0x154c, 0x8c3, 0x12e, 0x4fc, 0x24ec, 0x69e, 0x996, 0x185b, 0xe63, 0x16b8, 0xd1a, 0x1828, 0x1ffe, 0x29a, 0x2a08, 0xf17, 0x29fd, 0x226, 0x2ac8, 0x1f60, 0x7af, 0x1717, 0x1489, 0x2bab, 0x95b, 0x1888, 0x23c0, 0x903, 0x959, 0x2d63, 0x20f5, 0x2845, 0x1fa8, 0x155a, 0x250c, 0x187, 0x356, 0x9c6, 0x1e3b, 0x1304, 0x967, 0x29d3, 0x1ec6, 0x13bc, 0xa9f, 0xcbc, 0x2fb1, 0x11d6, 0x2456, 0xc44, 0x1ce, 0x2ec9, 0x1e49, 0x2302, 0x14cc, 0x18bc, 0x2553, 0x1bf5, 0x345, 0x1028, 0xa43, 0x1c2d, 0xc27, 0x7b7, 0x2c0a, 0x2682, 0xdd1, 0xd46, 0xf68, 0x1774, 0x2565, 0x1cb7, 0x1f9b, 0x116d, 0x834, 0x1b4c, 0xeab, 0x189d, 0xc83, 0x2be5, 0x299c, 0x2bb9, 0x1b5b, 0xd5c, 0x7bf, 0x2c8b, 0x2044, 0x200c, 0x2ec1, 0x22e4, 0x1ccd, 0x1254, 0x3b7, 0x1ef8, 0x2be5, 0x99f, 0x2337, 0x11dc, 0x1f1a, 0x73f, 0x31e, 0x26bc, 0x2dc2, 0x1756, 0x9c, 0x1f94, 0x1a12, 0x1b7f, 0xdcd, 0x240b, 0x2da7, 0xa9b, 0x1462, 0x2a38, 0x29b, 0x2b0a, 0x1c9d, 0x1ee8, 0x13a7, 0x221, 0x2bb6, 0x8f5, 0x2fee, 0x2f43, 0x28fb, 0x1e8e, 0x1aa9, 0x255, 0x2041, 0xfaf, 0x2003, 0x2018, 0x1106, 0x1303, 0x1db1, 0x2f6e, 0x1d45, 0x1699, 0x1c7d, 0x7ad, 0x2f29, 0x1ca0, 0x320, 0x198, 0x23cc, 0x17a1, 0x21c8, 0x2a29, 0xa62, 0x125e, 0x2855, 0xdbc, 0x2409, 0xe12, 0x149, 0xa2d, 0x1077, 0xf1, 0x23f6, 0xd90, 0x27db, 0x509, 0x1dd0, 0x4e2, 0x5d, 0x2707, 0x22ea, 0x1a1f, 0x2790, 0xa8b, 0xaea, 0x1c01, 0x2df6, 0x23a0, 0x2dce, 0x24c2, 0x29ad, 0xf51, 0x22ef, 0x2e34, 0x1574, 0xaf2, 0x813, 0x1dc0, 0xc72, 0x5c, 0x1cb3, 0xb64, 0x1e50, 0xb1e, 0x19e5, 0xd85, 0x26ab, 0x2bce, 0x2837, 0x2b58, 0x758, 0x1b92, 0x122f, 0x1969, 0x1ed7, 0xb97, 0x12a0, 0x176e, 0x23e4, 0x1046, 0x272b, 0x20ab, 0x13b6, 0x12d2, 0x2bba, 0x1f7e, 0x2d40, 0x296d, 0x2be0, 0x574, 0x1d8c, 0x5c1, 0x627, 0x11d9, 0x2102, 0x2094, 0x13c1, 0x47f, 0x2e07, 0x2511, 0x1083, 0x2678, 0x246e, 0x18fa, 0x1b09, 0x1703, 0x1356, 0x2063, 0x10df, 0x1379, 0x5df, 0xe8d, 0xfe9, 0x2eaf, 0x4b8, 0x2dbb, 0x1fae, 0xe49, 0x2120, 0x1612, 0x2c64, 0x2961, 0x1f69, 0x1fb4, 0x1793, 0xdf8, 0x24e4, 0x27d8, 0x2ea1, 0x2aa, 0x2187, 0x19c5, 0x11c, 0x1c6d, 0x31b, 0x1f7e, 0xaec, 0x2646, 0x1683, 0x2b6a, 0xe9c, 0x9de, 0x1e4a, 0x2afa, 0x2be4, 0x22aa, 0x2577, 0x1592, 0x2dc, 0x2b4b, 0x2215, 0x2c6e, 0x18ca, 0x60b, 0x43d, 0x1cc0, 0x2114, 0x3, 0x19c6, 0x2f38, 0x2258, 0x1872, 0x2d19, 0x2400, 0x2b6e, 0x15b, 0x2a07, 0x2a79, 0x1251, 0x1d19, 0x2840, 0x622, 0x29b2, 0x20d4, 0x713, 0x2a62, 0x308, 0x1dc1, 0x944, 0x19e3, 0x1c90, 0x18f0, 0x1100, 0x2d9f, 0x29c6, 0xf7, 0x2f22, 0x1afa, 0x153e, 0x82, 0x912, 0x242f, 0x11b9, 0x1b5a, 0x2f3a, 0x7b5, 0x29f, 0x16fe, 0x2fa3, 0x17bb, 0x2eb2, 0x1265, 0x1f2f, 0x1a1d, 0x2df0, 0x2557, 0xa93, 0x1d0, 0x2eba, 0x2304, 0x11ea, 0x65a, 0xac4, 0x36b, 0x2200, 0x37e, 0xbd3, 0x126d, 0x114f, 0x29e9, 0x4c9, 0x1977, 0x27a4, 0x169b, 0xa29, 0x22eb, 0x2026, 0x25c7, 0x1138, 0x4e2, 0x1838, 0x1f2b, 0x2f6a, 0x74f, 0x6b1, 0x2748, 0xe77, 0x1b47, 0x2cc5, 0x8c5, 0x251b, 0x1e01, 0x2005, 0x8b7, 0x25cf, 0x163c, 0x1606, 0x13b1, 0x1f34, 0x5d1, 0x1ba0, 0xcd7, 0x24a3, 0x2a3, 0xe0d, 0x23a2, 0xea0, 0x1c06, 0x232, 0x750, 0x1562, 0x1b9d, 0x2871, 0x217e, 0x1edc, 0x786, 0x2d9d, 0x14fb, 0x2cc2, 0x2581, 0x1a04, 0xb9e, 0x49b, 0xfcc, 0x16a9, 0x932, 0x1ba7, 0x1842, 0x25ce, 0x74b, 0x18d6, 0x1b5d, 0x2dd5, 0x210b, 0x29a2, 0x298c, 0x1ed7, 0x283f, 0x496, 0x2825, 0x8b8, 0x13b8, 0xfee, 0xf86, 0x138a, 0x297b, 0x1ced, 0x1d54, 0x129d, 0x15b, 0x1941, 0xa13, 0x24e7, 0x2ab1, 0x1657, 0x164f, 0x2bd0, 0x1fab, 0x96a, 0x64a, 0x15d3, 0x1e52, 0x1101, 0x1e87, 0x20ce, 0x1877, 0x221b, 0x12fc, 0x1fe, 0x2031, 0x542, 0x252, 0x104f, 0x2dfa, 0x456, 0x466, 0x199e, 0x2ff7, 0x20e1, 0x2daf, 0x1f2d, 0xc9b, 0x2142, 0x192f, 0x25b8, 0x2052, 0x14cc, 0x599, 0x2ad8, 0x1d4, 0x151a, 0x8e2, 0x2532, 0xc3e];
        // forgefmt: disable-next-line
        uint256[512] memory expectedHashNIST=[uint256(0x16e0),0x25c8,0x162,0x25f7,0x1d15,0x188b,0x28de,0x218c,0x55,0xf00,0x9a,0x12f5,0x2652,0x9c2,0x1891,0x2bc1,0x2a24,0x544,0x1317,0x26c9,0x18ce,0x2c55,0x233e,0x2093,0x65c,0x1a28,0x1b6d,0x1d19,0x2e71,0x1a0f,0x194c,0x22d0,0x1560,0x238f,0x2d65,0x1379,0x2e17,0x1e63,0x185c,0x1310,0xd8d,0x9bd,0x1c7,0x2308,0x1ebd,0x268f,0xed3,0x2906,0x18,0x240f,0x684,0x2af7,0x1731,0x2953,0x1a7c,0x57f,0x95,0x39a,0x374,0x13e4,0x1d3d,0x2a9e,0xc9f,0x264e,0x23dd,0x12d5,0x1e95,0x27d5,0x2681,0x692,0x15b7,0x2667,0x27c0,0xeb5,0x2747,0x2f30,0x1411,0x2df7,0x1e8e,0x952,0x1d94,0x1c04,0x9ef,0xe97,0x16d2,0x25a3,0x1902,0x2c98,0x20c3,0x232e,0x26b1,0x1940,0x1e67,0x1f97,0x1d5,0x165b,0x229f,0x528,0x104b,0x134e,0x1f64,0x1c01,0x427,0x586,0x10c2,0xfaf,0xb46,0x1590,0x1cee,0x188b,0x6bf,0x2f5,0xa1d,0x1394,0x289e,0x15b,0xb81,0x1381,0xdcf,0x2f46,0x1015,0x2735,0x24fd,0xe09,0x25f,0x1a0b,0x2c24,0xb5f,0x1576,0x28ed,0x1359,0x1567,0x1f4c,0x1a59,0x10e7,0x1e3b,0x1352,0x726,0x2224,0x2bf1,0x28b2,0x539,0x86f,0x17d7,0x28b3,0x1ac4,0x2aa6,0x27a,0x863,0x2b13,0x73,0x2e9e,0x7d8,0x14a3,0x25e0,0x14db,0x1faf,0x2960,0x1168,0xf50,0x2b83,0x1ba8,0x1aae,0x113,0x2cfc,0x1ef8,0x2152,0x1e0f,0x693,0x2ced,0x16ef,0x2b9d,0x1bbc,0x32a,0x1eb1,0x1655,0x27b6,0x23aa,0x2bba,0x29af,0x218,0x2e1,0x2fd8,0x18d1,0x2160,0xf61,0x13aa,0xf4d,0x2207,0x210e,0x288a,0xc5d,0x118d,0x2340,0x85c,0x234b,0x1d24,0x126f,0xde0,0x1b67,0x1175,0x23d6,0x176a,0x23be,0x1916,0x2b7a,0xbb8,0x7b8,0x2262,0x7f1,0x2cb1,0x748,0x215f,0x263,0xb77,0x2cae,0x903,0x16e4,0x15b2,0x2e5,0x1977,0x22b5,0xb8a,0x1654,0x1b52,0xdd0,0x1bfc,0x14a0,0xd85,0x17cf,0x157a,0x2c85,0x2d48,0x246b,0x2f57,0x1411,0xb6b,0x15ab,0x243e,0x1a4a,0x9d1,0x20ec,0x287c,0x912,0x2eea,0x2dc7,0x117c,0x2175,0x7a6,0x927,0x84e,0x1a67,0x183f,0x21b9,0x2518,0x16c3,0x14db,0xa69,0x1169,0x2fcf,0x18e1,0x496,0x18a1,0x29e6,0x17ae,0x5be,0x28,0xdf4,0x16c1,0x2428,0xbd6,0x1ffd,0x118f,0x2acd,0x1d84,0x28cc,0xf59,0xd08,0x1e27,0x1e15,0xf50,0xca8,0x1508,0x180e,0x2889,0x2583,0x2d37,0x2c7b,0x1973,0x17f,0x2ac2,0x2862,0x2aad,0x252c,0xa01,0x2420,0x2ce1,0x1765,0x172b,0x2a6c,0x16fc,0x24e8,0x2efd,0x1099,0x1271,0x2c93,0x1974,0x397,0x24c6,0xfb5,0xafd,0x1921,0xfdc,0x1855,0x246c,0x20cc,0xe47,0xfc6,0x2c89,0x2c7f,0x19e0,0x1b35,0x4a3,0x1e62,0x2535,0x14aa,0x11ed,0x6ea,0x266c,0x737,0x1477,0x2e94,0x1319,0x2014,0x6ab,0x1667,0x136e,0x9e3,0x1c1,0xad0,0x2f20,0x2683,0x2853,0xd83,0x127f,0x25bd,0x180,0x4a5,0x1d7c,0x161d,0x2e44,0x257b,0x1a5d,0x790,0x1b56,0x2dfe,0xb3d,0xd39,0x89f,0x2690,0x10fe,0x2b45,0x26e1,0x1c7,0x9f8,0x219d,0x26da,0x192a,0x1c4e,0xc55,0x2a61,0x1230,0x683,0x24ef,0x613,0x2194,0x1577,0x378,0x1f71,0x2b14,0xbc7,0x2854,0xb91,0xb00,0x24a3,0x22d2,0x15ac,0x1b36,0x2098,0x230c,0x2306,0xe0,0x197c,0x1f1a,0x1b66,0x10ad,0x2ec1,0x25b7,0x18a5,0x2b1a,0xb9b,0x1a1,0x892,0x23e0,0x226a,0xa75,0x2fb,0x1cd9,0x1fa3,0x7c1,0x2d62,0x10f7,0x1226,0x10ea,0x8cf,0xd05,0x1172,0x1937,0x1da3,0x1d3b,0x183d,0x11c9,0x15dd,0xc6b,0x1b41,0x193e,0x1b16,0x1d28,0x2dd4,0x23c6,0x1c18,0x1131,0x17d1,0x2e8c,0x280,0x2357,0x469,0x185b,0x1e70,0x27aa,0x1dbf,0x2dc0,0x1276,0x1b26,0x10bf,0x153e,0xeff,0xdc2,0x21ce,0x11f,0x2db0,0x1a96,0x8a1,0x2256,0x2010,0x24ab,0x1de6,0x273b,0x2b81,0xf27,0x2cf9,0x2c82,0x14f,0xe61,0x16e6,0x16ef,0xca0,0x5b,0x17c0,0xca5,0x10d6,0x1800,0x2f88,0x27e7,0x21d5,0x29b7,0x2a9d,0x945,0x1bf9,0x1d48,0x2b2a,0x19aa,0x22b,0x2e03,0x68c,0xe1d,0x200d,0x1ec5,0xa31,0xf47,0x2c4e,0x23a,0x2256,0x2dad,0x1784,0xb75,0x1681,0x1c74,0x3ea,0x20c5,0x2250,0x994,0x1682,0xf42,0x1eee,0x12aa,0x1cd,0x1ba0,0x15f6,0x1c19,0x2c41,0xc01];
        // forgefmt: disable-next-line
        bytes memory expected_message = hex"d81c4d8d734fcbfbeade3d3f8a039faa2a2c9957e835ad55b22e75bf57bb556ac8";
        // forgefmt: disable-next-line
        bytes memory expected_salt =hex"33b3c07507e4201748494d832b6ee2a6c93bff9b0ee343b550d1f85a3d0de0d704c6d17842951309";

        uint256[] memory kpub;
        uint256[] memory s2;

        uint256[] memory cs2;
        bytes memory salt;
        bytes memory message;

        (kpub, s2, salt, message) = decompress_KAT(pk, sm);

        uint256[] memory hashed = hashToPointNIST(salt, message);

        for (uint256 i = 0; i < 512; i++) {
            assertEq(s2[i], sigDecompress[i]);
            assertEq(kpub[i], KpubDecompress[i]);
            assertEq(hashed[i], expectedHashNIST[i]);
        }
        //Display_HexArray(" hashToPoint", hashed);

        //Display_HexArray(" public key canonical form", kpub);
        //Display_HexArray("sig canonical form", s2);

        //s2=Swap(s2);
        //kpub=Swap(kpub);

        uint256[] memory ntth = _ZKNOX_NTT_Compact(_ZKNOX_NTTFW_vectorized(kpub));

        cs2 = _ZKNOX_NTT_Compact(s2);

        console.log("ntth length:", ntth.length);
        console.log("salt:");
        console.logBytes(salt);

        console.log("message:");
        console.logBytes(message);

        Display_HexArray("ntt public key form", ntth);
        Display_HexArray("s2", cs2);

        bool result = falcon.verify(message, salt, cs2, ntth);

        console.log("result", result);
    }

    //kat vector 0 from NIST round3 submission
    function test_kats_vector0_from_c() public {
        // forgefmt: disable-next-line
        bytes memory pk=hex
        // forgefmt: disable-next-line
        bytes memory sm=hex"040133B3C07507E4201748494D832B6EE2A6C93BFF9B0EE343B550D1F85A3D0DE0D704C6D17842951309D81C4D8D734FCBFBEADE3D3F8A039FAA2A2C9957E835AD55B22E75BF57BB556AC82900872E6B008F009E01182FDF2F1800272F5C2E9C00812F4400562EA32F8B00042FD92F7500052FA1005E00292FCE2FA82ECA006B00012F2C2F1D2FE8013B2F2D2F9700D7003D2FEE00702FCC2FF900322F4C008700662FA82F4000732FC6001B005100392EFD2F86004C2F0200BE004900122EFB2F292FB401102F4D00652FE300B1002800D42F932E4100F80017000F000D2F562EFC00132F8500612F79016C2FAF004A01532F8F2ECD2FBD2FFF2F1700A6005200D32F7A004C2FA22F43018B2FF22F080057001D2FB000CC2F1A2F4C00EA2F702FBB2F2300EE0164000A0032003000DE007B00532FA0010D00582FF5007C2F902EB200492F202F062FF52FA8002D00A72FB900D4000A2F8C0093006D2F052EE02FCB2EEF2FB02F620001004D00F42FA22F8500462F3700232F5B2FF82FC5009D00262FD52F942FEE2F78002500502FFE00B700B0004600182F9500AA2F102FB9009700022FE7010100142FBF2FE600FB00053000000D016300B200452F4C2FBA002000C600802F2A010C2F3D002C00842FE52FAB00212F68006201CC00462FFD0022000E2FAB00B52F4F00232D5D2FAB2ED32F5000C80055017D007D2FC1005F2FE5001600472FBB2EE02FB52F7D2EFC2FCF2F980065004B00962F13000600832FF72FFE2EA60030014E2F98002000192F1200462F610034007D003B005E00D92F032FC32F6F009700022F452F51015C2F530047004A2FC101192FFE2F2300F6005F2FBE2FDD2F3700EE2F4800752F6F2FB800B12FAD2F6600FC2F4E2FFA00832FE92F5200D52FD400272FAA2FCF2F1A00E0006C007100702F7E00762FE2002C00AB0049000D2FD5004F011400AC00CF00C500FC00D72F412F6A00442F1300CD2F4A2FCA2F952FB500772FF32F07009E00DE0095009A00642F4901102FED0090004F2F53007100782EAF006B2FAF2F5A2FCA2FBC012100972FDC0020007D2EB200122FEF002100D02F6001BE2F55012F2FD200DD00252F50006600332F89003E2FB22FF100762F152FC100002FAA2F9B2F912FE8011600C42F0D2FFE2EF32ECA00E00008000C00702F9A2F1F2F7201562FCD00A0008F2F952F75007900C22E4330000089008B2FC4011B2F662F972FC22FE12F462FEA00CE2FD400662F382E86000F000C002A008E00A42F9C2F752F2C2F8C2FE62FFC2F492FD12F782F6C00092F77003A2FA5008D00D52FD30099002B00542FD52FC400A8005B2F392F9C2FDB00CC005A2EDE2F39013D2F050036010E00E0004F007A2F0E016A017D005C0071001800E800E32EFB2F7000022F3E2FB52F730025008100082FDF00E82FF200442FFE2F9D00B82FB82FA32F6F00212FB32EE800EA2F6A2F982EF400DD2F7000582E4E2FD42F682F5A2F442FCD0090006400302F952FE52F2A2FA32F7E012E008400152FB100982FAC2EA000A7";

        bytes memory salt = new bytes(40);
        for (uint256 k = 0; k < 40; k++) {
            salt[k] = sm[2 + k];
        }
        bytes memory message = new bytes(33);
        for (uint256 k = 0; k < 33; k++) {
            message[k] = sm[2 + 40 + k];
        }
        uint256[] memory s2 = new uint256[](512);
        for (uint256 k = 0; k < 512; k++) {
            s2[k] = uint256(uint8(sm[2 + 40 + 33 + 1 + 2 * k])) << 8 | uint256(uint8(sm[2 + 40 + 33 + 1 + 2 * k + 1]));
        }
        uint256[] memory kpub = new uint256[](512);
        for (uint256 k = 0; k < 512; k++) {
            kpub[k] = uint256(uint8(pk[1 + 2 * k])) << 8 | uint256(uint8(pk[1 + 2 * k + 1]));
        }

        uint256[] memory cs2;

        uint256[] memory hashed = hashToPointNIST(salt, message);

        uint256[] memory ntth = _ZKNOX_NTT_Compact(_ZKNOX_NTTFW_vectorized(kpub));

        cs2 = _ZKNOX_NTT_Compact(s2);

        console.log("ntth length:", ntth.length);
        console.log("salt:");
        console.logBytes(salt);

        console.log("message:");
        console.logBytes(message);

        Display_HexArray("ntt public key form", ntth);
        Display_HexArray("s2", cs2);

        bool result = falcon.verify(message, salt, cs2, ntth);

        console.log("result", result);
    }


//emscripten version js from prague hack
function test_vector_prague() public{
        // forgefmt: disable-next-line
        bytes memory pk=hex"09bc10a933624770811dc5e315526a3496c0e89b8e8436401a0848868c8b297ad7960a4f4df60bb2eba58b6d6828c99dce1d8b41ea6188af8e90081f3b2deee68a3888fb5ae87d99e2a110211cac1eadfa3a724c276a9108db19e8ff0add0da14aedd2073294ea7b682276edd449108e2b765ea2c03689b05fa6ba9146e16468325fdb39606472c61022f6679f247c16166c13af73994dc3dfa0b462b22747ee43a60f018eb5a26992805841c52b2b9ab829fbd4ed8b134625dbb95a10e62bbeeb806a95f985943472bc82ac510ae051ae2aff02a6cda68edfe971aef468356f075cb9b8c974566a3a46742123e78a79d96a941a94857e2acc3449955589ce80a6cc0ceb773224453b6309a280e659e585a68a98ea860869eba50a1d9776901babde4311638efc656cc564cc50987e1a8564e6e7bd47960d988f0a5a04746454528fab9cd89da9f1e534394229c91059f428b522cbf15eb359b9a08adfd3fe1d3548265a2e3b75c1f239df4e90734d704be8817b5639caa9d289fb4ee0f5e4d7603faff43d74734f8f6bdd9ff7b6578dac9e15949a54fa5465a925a61ebbb2f8eb858c1f487a9144840a1f9864f5ca49a7a63f6ec2a7f672c2c7ac18e973a1c0ca864e63db9f8731a996d1098809a89024f88bb8d757346993e52b138501315cf2086056060486870a5c437e886b8bcb422c0cde1ee081eddf18762a15926e8a8b5235b12d6d8ca5c60d72cfad3e755100d75096b5b8317ce7d5d36c5e01f7945a883cafa0a512e8edf28554c075145dec6798a3e2fac6cfa4851011b4906255521d5968102d10a92ff93d85b82d804469e90df8aee1b54212a66f461eb3514f29af958c326606e576254ef1a9ec83c62c568444d19e573b9c1c10d7a0b96fe4027a7a21c09b71cd7b271a828aa048203ae1691f5826e03a411e283dfa5a1a1b05bcf67ce6801590ab84a5d281edd573eadf50f6289d79b05b136ec16178d812d7f7e0f38cd9e83692064253f1dfda28ab97578dc0768fca404ef57ff24b463e3d50288970289e264a0eb9138a773fb114e0fd0c5fb5812186cea1f2a53ec133dfa3ad8809fd47cd56cb2e0185c266a17d263291753a47a2b531a5e9e4d29037646f934518c33e2c1fe2df5b2c0dea9fa2c751d689b24a819ce0f0bf82cab7b3adfc341a516b16c146a7c6a0e890a2d7451cf22459e3f3ab74b3076a62fbb11899a1a809357cb28a328761e0a4d56b501eca76a87169f560159c46a6a635b344c5";
        // forgefmt: disable-next-line
        bytes memory sm=hex"0269530f8afbc74536b9a963b4f1c4cb738bcea7403d4d606b6e074ec5d3baf39d18726003ca37a62a7468656c6c6f2066726f6d205a4b4e4f5821298f59961b7b1280ba88f0ca3d7dc8161a395dcd43d3435934fea76400c82796cdb2890265fc9af425c4d83bc6fc61312a6ed75ca2217383597a93d7bd48394560baf2cacc528aa03b325df120c47e2bba37614740359cc92b4d28409ac612f7336d1434535abf762d4c93b93ec2346965120ad5ceed94b4316394c00f64fda2ee618e8b645fb62451e694e57b19d0d4cda82db2f548c63a51e372d649a56405c18a5a1a6c738e8454df2d227aa22d7a1f95c4c9664dda56f1d0d04b9134e5dc5243f5406bba8b534adff634c427a798a43752e1cc92a2110b1c322764bd4230ef7d4d2a5cff9f64e58190c039f43402bcecd35256f73344cbeff11bbe878f751a7f6b2b6a12ff4dd3ab2d1320bb97e4525ac0e3db84a71308d9650b5a3f736aa83cc76a0f1c5ba6fd038bb28fbd3d468b27edc52052974e617793c12e5fdc7e0674741969ca62faaa0c95a6aa342abdf36d40efbf062d95d9242af379874f7fb9b25faf7f206e13db40dc333fd9360621e1d537b4a9c67b2e5856fb1a28c9361ac7bb447e9235adab10ec09a68dc4e57a66a1347848b0ca3dfd49a9e4f55e66a5aab58e54a12cee5dca48f0a6104f6ca8e7fb00c0aa7484f9ba9ca1e52dd2d6276683bd4ae5b91deebf4e6da06d441195f211c2d570ac64ba7c4e5df541c558fef1de74c61eceaf986cecec6e14678f7d987aa0104a8a5bf950dadd077e0ee4b20c39365ef3e969b4a4409c5b8e4b1b802a128522818422e66d482fa83cbd0376d1590b6cdeb60cb9b82987412b3c1ca71746ff6d53468d46bb362333a384ebb48e5cbf83ce3fcc1448cd1b5c94f1f4262ceb7debccac58354d93cd66b4a39302303949eab48e9142";

        uint256[] memory kpub;
        uint256[] memory s2;

        uint256[] memory cs2;
        bytes memory salt;
        bytes memory message;

        (kpub, s2, salt, message) = decompress_KAT(pk, sm);

       

        uint256[] memory ntth = _ZKNOX_NTT_Compact(_ZKNOX_NTTFW_vectorized(kpub));

        cs2 = _ZKNOX_NTT_Compact(s2);

        console.log("ntth length:", ntth.length);
        console.log("salt:");
        console.logBytes(salt);

        console.log("message:");
        console.logBytes(message);

        Display_HexArray("ntt public key form", ntth);
        Display_HexArray("s2", cs2);

        bool result = falcon.verify(message, salt, cs2, ntth);

        console.log("result", result);
    }
}