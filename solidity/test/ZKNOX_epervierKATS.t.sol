// code generated using pythonref/generate_falcon_epervier_shorter_zknox_test_vectors.py.
pragma solidity ^0.8.25;

import {Test, console} from "forge-std/Test.sol";
import "../src/ZKNOX_falcon_encodings.sol";
import "../src/ZKNOX_epervier.sol";
import "../src/ZKNOX_falcon_deploy.sol";
import "../src/ZKNOX_display.sol";

contract EpervierKATS_Test is Test {
    ZKNOX_epervier epervier;
    //exemple of stateless initialisation, no external contract provided
    ZKNOX_NTT ntt = new ZKNOX_NTT(address(0), address(0), 12289, 12265);
    // forgefmt: disable-next-line
    uint256[1024] psi_rev = [uint256(1), 10810, 7143, 4043, 10984, 722, 5736, 8155, 3542, 8785, 9744, 3621, 10643, 1212, 3195, 5860, 7468, 2639, 9664, 11340, 11726, 9314, 9283, 9545, 5728, 7698, 5023, 5828, 8961, 6512, 7311, 1351, 2319, 11119, 11334, 11499, 9088, 3014, 5086, 10963, 4846, 9542, 9154, 3712, 4805, 8736, 11227, 9995, 3091, 12208, 7969, 11289, 9326, 7393, 9238, 2366, 11112, 8034, 10654, 9521, 12149, 10436, 7678, 11563, 1260, 4388, 4632, 6534, 2426, 334, 1428, 1696, 2013, 9000, 729, 3241, 2881, 3284, 7197, 10200, 8595, 7110, 10530, 8582, 3382, 11934, 9741, 8058, 3637, 3459, 145, 6747, 9558, 8357, 7399, 6378, 9447, 480, 1022, 9, 9821, 339, 5791, 544, 10616, 4278, 6958, 7300, 8112, 8705, 1381, 9764, 11336, 8541, 827, 5767, 2476, 118, 2197, 7222, 3949, 8993, 4452, 2396, 7935, 130, 2837, 6915, 2401, 442, 7188, 11222, 390, 773, 8456, 3778, 354, 4861, 9377, 5698, 5012, 9808, 2859, 11244, 1017, 7404, 1632, 7205, 27, 9223, 8526, 10849, 1537, 242, 4714, 8146, 9611, 3704, 5019, 11744, 1002, 5011, 5088, 8005, 7313, 10682, 8509, 11414, 9852, 3646, 6022, 2987, 9723, 10102, 6250, 9867, 11224, 2143, 11885, 7644, 1168, 5277, 11082, 3248, 493, 8193, 6845, 2381, 7952, 11854, 1378, 1912, 2166, 3915, 12176, 7370, 12129, 3149, 12286, 4437, 3636, 4938, 5291, 2704, 10863, 7635, 1663, 10512, 3364, 1689, 4057, 9018, 9442, 7875, 2174, 4372, 7247, 9984, 4053, 2645, 5195, 9509, 7394, 1484, 9042, 9603, 8311, 9320, 9919, 2865, 5332, 3510, 1630, 10163, 5407, 3186, 11136, 9405, 10040, 8241, 9890, 8889, 7098, 9153, 9289, 671, 3016, 243, 6730, 420, 10111, 1544, 3985, 4905, 3531, 476, 49, 1263, 5915, 1483, 9789, 10800, 10706, 6347, 1512, 350, 10474, 5383, 5369, 10232, 9087, 4493, 9551, 6421, 6554, 2655, 9280, 1693, 174, 723, 10314, 8532, 347, 2925, 8974, 11863, 1858, 4754, 3030, 4115, 2361, 10446, 2908, 218, 3434, 8760, 3963, 576, 6142, 9842, 1954, 10238, 9407, 10484, 3991, 8320, 9522, 156, 2281, 5876, 10258, 5333, 3772, 418, 5908, 11836, 5429, 7515, 7552, 1293, 295, 6099, 5766, 652, 8273, 4077, 8527, 9370, 325, 10885, 11143, 11341, 5990, 1159, 8561, 8240, 3329, 4298, 12121, 2692, 5961, 7183, 10327, 1594, 6167, 9734, 7105, 11089, 1360, 3956, 6170, 5297, 8210, 11231, 922, 441, 1958, 4322, 1112, 2078, 4046, 709, 9139, 1319, 4240, 8719, 6224, 11454, 2459, 683, 3656, 12225, 10723, 5782, 9341, 9786, 9166, 10542, 9235, 6803, 7856, 6370, 3834, 7032, 7048, 9369, 8120, 9162, 6821, 1010, 8807, 787, 5057, 4698, 4780, 8844, 12097, 1321, 4912, 10240, 677, 6415, 6234, 8953, 1323, 9523, 12237, 3174, 1579, 11858, 9784, 5906, 3957, 9450, 151, 10162, 12231, 12048, 3532, 11286, 1956, 7280, 11404, 6281, 3477, 6608, 142, 11184, 9445, 3438, 11314, 4212, 9260, 6695, 4782, 5886, 8076, 504, 2302, 11684, 11868, 8209, 3602, 6068, 8689, 3263, 6077, 7665, 7822, 7500, 6752, 4749, 4449, 6833, 12142, 8500, 6118, 8471, 1190, 9606, 3860, 5445, 7753, 11239, 5079, 9027, 2169, 11767, 7965, 4916, 8214, 5315, 11011, 9945, 1973, 6715, 8775, 11248, 5925, 11271, 654, 3565, 1702, 1987, 6760, 5206, 3199, 12233, 6136, 6427, 6874, 8646, 4948, 6152, 400, 10561, 5339, 5446, 3710, 6093, 468, 8301, 316, 11907, 10256, 8291, 3879, 1922, 10930, 6854, 973, 11035, 7, 1936, 845, 3723, 3154, 5054, 3285, 7929, 216, 50, 6763, 769, 767, 8484, 10076, 4153, 3120, 6184, 6203, 5646, 8348, 3753, 3536, 5370, 3229, 4730, 10583, 3929, 1282, 8717, 2021, 9457, 3944, 4099, 5604, 6759, 2171, 8809, 11024, 3007, 9344, 5349, 2633, 1406, 9057, 11996, 4855, 8520, 9348, 11722, 6627, 5289, 3837, 2595, 3221, 4273, 4050, 7082, 844, 5202, 11309, 11607, 4590, 7207, 8820, 6138, 7846, 8871, 4693, 2338, 9996, 11872, 1802, 1555, 5103, 10398, 7878, 10699, 1223, 9955, 11009, 614, 12265, 10918, 11385, 9804, 6742, 7250, 881, 11924, 1015, 10362, 5461, 9343, 2637, 7779, 4684, 3360, 7154, 63, 7302, 2373, 3670, 3808, 578, 5368, 11839, 1944, 7628, 11779, 9667, 6903, 5618, 10631, 5789, 3502, 5043, 826, 3090, 1398, 3065, 1506, 6586, 4483, 6389, 910, 7570, 11538, 4518, 3094, 1160, 4820, 2730, 5411, 10036, 1868, 2478, 9449, 4194, 3019, 10506, 7211, 7724, 4974, 7119, 2672, 11424, 1279, 189, 3116, 10526, 2209, 10759, 1694, 8420, 7866, 5832, 1350, 10555, 8474, 7014, 10499, 11038, 6879, 2035, 1040, 10407, 6164, 7519, 944, 5287, 8620, 6616, 9269, 6883, 7624, 4834, 2712, 9461, 4352, 8176, 72, 3840, 10447, 3451, 8195, 11048, 4378, 6508, 9244, 9646, 1095, 2873, 2827, 11498, 2434, 11169, 9754, 12268, 6481, 874, 9988, 170, 6639, 2307, 4289, 11641, 12139, 11259, 11823, 3821, 1681, 4649, 5969, 2929, 6026, 1573, 8443, 3793, 6226, 11787, 5118, 2602, 10388, 1849, 5776, 9021, 3795, 7988, 7766, 457, 12281, 11410, 9696, 982, 10013, 4218, 4390, 8835, 8531, 7785, 778, 530, 2626, 3578, 4697, 8823, 1701, 10243, 2940, 9332, 10808, 3317, 9757, 139, 3332, 343, 8841, 4538, 10381, 7078, 1866, 1208, 7562, 10584, 2450, 11873, 814, 716, 10179, 2164, 6873, 5412, 8080, 9011, 6296, 3515, 11851, 1218, 5061, 10753, 10568, 2429, 8186, 1373, 9307, 717, 8700, 8921, 4227, 4238, 11677, 8067, 1526, 11749, 12164, 3163, 4032, 6127, 7449, 1389, 10221, 4404, 11943, 3359, 9084, 5209, 1092, 3678, 4265, 10361, 464, 1826, 2926, 4489, 9118, 1136, 3449, 3708, 9051, 2065, 5826, 3495, 4564, 8755, 3961, 10533, 4145, 2275, 2461, 4267, 5653, 5063, 8113, 10771, 8524, 11014, 5508, 11113, 6555, 4860, 1125, 10844, 11158, 6302, 6693, 579, 3889, 9520, 3114, 6323, 212, 8314, 4883, 6454, 3087, 1417, 5676, 7784, 2257, 3744, 4963, 2528, 9233, 5102, 11877, 6701, 6444, 4924, 4781, 1014, 11841, 1327, 3607, 3942, 7057, 2717, 60, 3200, 10754, 5836, 7723, 2260, 68, 180, 4138, 7684, 2689, 10880, 7070, 204, 5509, 10821, 8308, 8882, 463, 10945, 9247, 9806, 10235, 4739, 8038, 6771, 1226, 9261, 5216, 11925, 9929, 11053, 9272, 7043, 4475, 3121, 4705, 1057, 9689, 11883, 10602, 146, 5268, 1403, 1804, 6094, 7100, 12050, 9389, 994, 4554, 4670, 11777, 5464, 4906, 3375, 9998, 8896, 4335, 7376, 3528, 3825, 8054, 9342, 8307, 636, 5609, 11667, 10552, 5672, 4499, 5598, 3344, 10397, 8665, 6565, 10964, 11260, 10344, 5959, 10141, 8330, 5797, 2442, 1248, 5115, 4939, 10975, 1744, 2894, 8635, 6599, 9834, 8342, 338, 3343, 8170, 1522, 10138, 12269, 5002, 4608, 5163, 4578, 377, 11914, 1620, 10453, 11864, 10104, 11897, 6085, 8122, 11251, 11366, 10058, 6197, 2800, 193, 506, 1255, 1392, 5784, 3276, 8951, 2212, 9615, 10347, 8881, 2575, 1165, 2776, 11111, 6811, 3511];
    // forgefmt: disable-next-line
    uint256[1024] psi_inv_rev = [uint256(1), 1479, 8246, 5146, 4134, 6553, 11567, 1305, 6429, 9094, 11077, 1646, 8668, 2545, 3504, 8747, 10938, 4978, 5777, 3328, 6461, 7266, 4591, 6561, 2744, 3006, 2975, 563, 949, 2625, 9650, 4821, 726, 4611, 1853, 140, 2768, 1635, 4255, 1177, 9923, 3051, 4896, 2963, 1000, 4320, 81, 9198, 2294, 1062, 3553, 7484, 8577, 3135, 2747, 7443, 1326, 7203, 9275, 3201, 790, 955, 1170, 9970, 5374, 9452, 12159, 4354, 9893, 7837, 3296, 8340, 5067, 10092, 12171, 9813, 6522, 11462, 3748, 953, 2525, 10908, 3584, 4177, 4989, 5331, 8011, 1673, 11745, 6498, 11950, 2468, 12280, 11267, 11809, 2842, 5911, 4890, 3932, 2731, 5542, 12144, 8830, 8652, 4231, 2548, 355, 8907, 3707, 1759, 5179, 3694, 2089, 5092, 9005, 9408, 9048, 11560, 3289, 10276, 10593, 10861, 11955, 9863, 5755, 7657, 7901, 11029, 11813, 8758, 7384, 8304, 10745, 2178, 11869, 5559, 12046, 9273, 11618, 3000, 3136, 5191, 3400, 2399, 4048, 2249, 2884, 1153, 9103, 6882, 2126, 10659, 8779, 6957, 9424, 2370, 2969, 3978, 2686, 3247, 10805, 4895, 2780, 7094, 9644, 8236, 2305, 5042, 7917, 10115, 4414, 2847, 3271, 8232, 10600, 8925, 1777, 10626, 4654, 1426, 9585, 6998, 7351, 8653, 7852, 3, 9140, 160, 4919, 113, 8374, 10123, 10377, 10911, 435, 4337, 9908, 5444, 4096, 11796, 9041, 1207, 7012, 11121, 4645, 404, 10146, 1065, 2422, 6039, 2187, 2566, 9302, 6267, 8643, 2437, 875, 3780, 1607, 4976, 4284, 7201, 7278, 11287, 545, 7270, 8585, 2678, 4143, 7575, 12047, 10752, 1440, 3763, 3066, 12262, 5084, 10657, 4885, 11272, 1045, 9430, 2481, 7277, 6591, 2912, 7428, 11935, 8511, 3833, 11516, 11899, 1067, 5101, 11847, 9888, 1254, 11316, 5435, 1359, 10367, 8410, 3998, 2033, 382, 11973, 3988, 11821, 6196, 8579, 6843, 6950, 1728, 11889, 6137, 7341, 3643, 5415, 5862, 6153, 56, 9090, 7083, 5529, 10302, 10587, 8724, 11635, 1018, 6364, 1041, 3514, 5574, 10316, 2344, 1278, 6974, 4075, 7373, 4324, 522, 10120, 3262, 7210, 1050, 4536, 6844, 8429, 2683, 11099, 3818, 6171, 3789, 147, 5456, 7840, 7540, 5537, 4789, 4467, 4624, 6212, 9026, 3600, 6221, 8687, 4080, 421, 605, 9987, 11785, 4213, 6403, 7507, 5594, 3029, 8077, 975, 8851, 2844, 1105, 12147, 5681, 8812, 6008, 885, 5009, 10333, 1003, 8757, 241, 58, 2127, 12138, 2839, 8332, 6383, 2505, 431, 10710, 9115, 52, 2766, 10966, 3336, 6055, 5874, 11612, 2049, 7377, 10968, 192, 3445, 7509, 7591, 7232, 11502, 3482, 11279, 5468, 3127, 4169, 2920, 5241, 5257, 8455, 5919, 4433, 5486, 3054, 1747, 3123, 2503, 2948, 6507, 1566, 64, 8633, 11606, 9830, 835, 6065, 3570, 8049, 10970, 3150, 11580, 8243, 10211, 11177, 7967, 10331, 11848, 11367, 1058, 4079, 6992, 6119, 8333, 10929, 1200, 5184, 2555, 6122, 10695, 1962, 5106, 6328, 9597, 168, 7991, 8960, 4049, 3728, 11130, 6299, 948, 1146, 1404, 11964, 2919, 3762, 8212, 4016, 11637, 6523, 6190, 11994, 10996, 4737, 4774, 6860, 453, 6381, 11871, 8517, 6956, 2031, 6413, 10008, 12133, 2767, 3969, 8298, 1805, 2882, 2051, 10335, 2447, 6147, 11713, 8326, 3529, 8855, 12071, 9381, 1843, 9928, 8174, 9259, 7535, 10431, 426, 3315, 9364, 11942, 3757, 1975, 11566, 12115, 10596, 3009, 9634, 5735, 5868, 2738, 7796, 3202, 2057, 6920, 6906, 1815, 11939, 10777, 5942, 1583, 1489, 2500, 10806, 6374, 11026, 12240, 8778, 5478, 1178, 9513, 11124, 9714, 3408, 1942, 2674, 10077, 3338, 9013, 6505, 10897, 11034, 11783, 12096, 9489, 6092, 2231, 923, 1038, 4167, 6204, 392, 2185, 425, 1836, 10669, 375, 11912, 7711, 7126, 7681, 7287, 20, 2151, 10767, 4119, 8946, 11951, 3947, 2455, 5690, 3654, 9395, 10545, 1314, 7350, 7174, 11041, 9847, 6492, 3959, 2148, 6330, 1945, 1029, 1325, 5724, 3624, 1892, 8945, 6691, 7790, 6617, 1737, 622, 6680, 11653, 3982, 2947, 4235, 8464, 8761, 4913, 7954, 3393, 2291, 8914, 7383, 6825, 512, 7619, 7735, 11295, 2900, 239, 5189, 6195, 10485, 10886, 7021, 12143, 1687, 406, 2600, 11232, 7584, 9168, 7814, 5246, 3017, 1236, 2360, 364, 7073, 3028, 11063, 5518, 4251, 7550, 2054, 2483, 3042, 1344, 11826, 3407, 3981, 1468, 6780, 12085, 5219, 1409, 9600, 4605, 8151, 12109, 12221, 10029, 4566, 6453, 1535, 9089, 12229, 9572, 5232, 8347, 8682, 10962, 448, 11275, 7508, 7365, 5845, 5588, 412, 7187, 3056, 9761, 7326, 8545, 10032, 4505, 6613, 10872, 9202, 5835, 7406, 3975, 12077, 5966, 9175, 2769, 8400, 11710, 5596, 5987, 1131, 1445, 11164, 7429, 5734, 1176, 6781, 1275, 3765, 1518, 4176, 7226, 6636, 8022, 9828, 10014, 8144, 1756, 8328, 3534, 7725, 8794, 6463, 10224, 3238, 8581, 8840, 11153, 3171, 7800, 9363, 10463, 11825, 1928, 8024, 8611, 11197, 7080, 3205, 8930, 346, 7885, 2068, 10900, 4840, 6162, 8257, 9126, 125, 540, 10763, 4222, 612, 8051, 8062, 3368, 3589, 11572, 2982, 10916, 4103, 9860, 1721, 1536, 7228, 11071, 438, 8774, 5993, 3278, 4209, 6877, 5416, 10125, 2110, 11573, 11475, 416, 9839, 1705, 4727, 11081, 10423, 5211, 1908, 7751, 3448, 11946, 8957, 12150, 2532, 8972, 1481, 2957, 9349, 2046, 10588, 3466, 7592, 8711, 9663, 11759, 11511, 4504, 3758, 3454, 7899, 8071, 2276, 11307, 2593, 879, 8, 11832, 4523, 4301, 8494, 3268, 6513, 10440, 1901, 9687, 7171, 502, 6063, 8496, 3846, 10716, 6263, 9360, 6320, 7640, 10608, 8468, 466, 1030, 150, 648, 8000, 9982, 5650, 12119, 2301, 11415, 5808, 21, 2535, 1120, 9855, 791, 9462, 9416, 11194, 2643, 3045, 5781, 7911, 1241, 4094, 8838, 1842, 8449, 12217, 4113, 7937, 2828, 9577, 7455, 4665, 5406, 3020, 5673, 3669, 7002, 11345, 4770, 6125, 1882, 11249, 10254, 5410, 1251, 1790, 5275, 3815, 1734, 10939, 6457, 4423, 3869, 10595, 1530, 10080, 1763, 9173, 12100, 11010, 865, 9617, 5170, 7315, 4565, 5078, 1783, 9270, 8095, 2840, 9811, 10421, 2253, 6878, 9559, 7469, 11129, 9195, 7771, 751, 4719, 11379, 5900, 7806, 5703, 10783, 9224, 10891, 9199, 11463, 7246, 8787, 6500, 1658, 6671, 5386, 2622, 510, 4661, 10345, 450, 6921, 11711, 8481, 8619, 9916, 4987, 12226, 5135, 8929, 7605, 4510, 9652, 2946, 6828, 1927, 11274, 365, 11408, 5039, 5547, 2485, 904, 1371, 24, 11675, 1280, 2334, 11066, 1590, 4411, 1891, 7186, 10734, 10487, 417, 2293, 9951, 7596, 3418, 4443, 6151, 3469, 5082, 7699, 682, 980, 7087, 11445, 5207, 8239, 8016, 9068, 9694, 8452, 7000, 5662, 567, 2941, 3769, 7434, 293, 3232, 10883, 9656, 6940, 2945, 9282, 1265, 3480, 10118, 5530, 6685, 8190, 8345, 2832, 10268, 3572, 11007, 8360, 1706, 7559, 9060, 6919, 8753, 8536, 3941, 6643, 6086, 6105, 9169, 8136, 2213, 3805, 11522, 11520, 5526, 12239, 12073, 4360, 9004, 7235, 9135, 8566, 11444, 10353, 12282];

    //stateful initialisation
    function setUp() public {
        bytes32 salt = keccak256(abi.encodePacked("ZKnox"));

        epervier = new ZKNOX_epervier();

        //non compact contract
        address a_psirev; //address of the precomputations bytecode contract
        address a_psiInvrev; //address of the precomputations bytecode contract

        (a_psirev, a_psiInvrev) = Deploy(salt);
    }

    //kat vector 0 from NIST round3 submission adaptation by ZKNOX
    function test_kats_vector0_from_c() public view {
        // forgefmt: disable-next-line
        bytes memory pk=hex"090CD40FF4287E2D0D123011F0282622A02E3200AC222329D2102223620BF111A122DD204910991C3C0E2403492A801D052EDC0C282BAC0E01254F2F9E24D81A2B28A90CE220AE22EC00732E40027412D91CA50293293A267E137307B5252D207F175F0C3825E8019F24201DBF0DF32A0427C82AD11259014D1C1204EC0CB617EE07C61C22285E1D391E5B1DC60B100DEF29E103A51255081006A32E5E052B208B0E6E012405A329B115AC2D0F090327860879134B15530138083D1DA012951655042906AA22FC2B210F081C590DEE0A180260148609A908870F1E20CB16BB1290015B2A87265013E7166D041A06BB02340BC91AF223DC24A614051723138205D42D2F2ECF01D0110627A6024C12BC0A9F0A2C15F40D800E932B980CB91C30200D27271F11190116B81AB4188D25E31A7516710685131C270F2A0914F80CB32DF315F92B8726D91D441A0F2DBC0157087A22301A48032301740421299E05F81A5E0EAB2B64232220391E8F200A26621A711BA12C4E118402AF07F82D310FCE278214BA021C1AAC21AC116D2CFC175126EA0EDB297F063E089312981B0D28AA01A9091912B223030ADC07960A5E232F2F87285A2DBD0FCE1C7912542A46048C18AC2A3E0EA519F324B52192012D03E00B5E1F4C01A90F540D220A28237D24D6000B2FC7041F2F4114D9243D26BB1F44024614202DAA12BB0A170651296716DA1B3A032F15E0295F1F142BE61F3F2F5110A6281310F80F8C13001F3229CE02A50C1404801A460CB2248D16EC0EF90F231EFA258F23460A61037F15231623227318A5252208AC02E50CDA06EF27FC05801CED2DCD230F0CF529B523DD2985067C14CF2DC918F71A631ACE2C4D11F529251EDA09540AED0373173F27331B72015714EC191F1521164C2B8B1BD901B00F021D9F03732F5C21DD151C0C450BD12DAA2A471FE20A19095C048A25460252299E0DB125EE035402F9138E11CE04DD256E05B20F1309B11FA605B22A3715B7000328502E7D2323164F0CDA2F751C9E2CA22CAB1B59237E182D08EC0D482DC1067012E127C4088612AD0AE519AF197220DF0DD62E750C6F12740DF0288807C51CF522F3257C15D213641EEA28A501FE259E0F7D22A329D014D42BC31BFE246E288A261123621C49259803E91977052C1A892D5901F52F6500812CF302341DE306FE1223206020C40E21203111900DA52A74250222A91F4F0B7A1AC30D6C00F9043201D8101C2B7528142F402FBF014B094E0123072500D7016C1F231FC42CFD07E804DE10D808ED0FB826152A0D1A64113A294D020F12A81A86142807A32B03119D0ADF28E906E517511F2C00F7183B1ECA2CE51B50116D2D0A1E5427E203A811C727AB0E89089A08770B381AB7251721C41E8701530F161B1A1A02029120101DD615AA076919E6193E123F19A602FC289B2D46";
        // forgefmt: disable-next-line
        bytes memory sm=hex"080433B3C07507E4201748494D832B6EE2A6C93BFF9B0EE343B550D1F85A3D0DE0D704C6D17842951309D81C4D8D734FCBFBEADE3D3F8A039FAA2A2C9957E835AD55B22E75BF57BB556AC829003D003B2FB52FBE2FA30003005D2FD6001C2F732FCA2FFB00A22EC200EC005200342FD32FBB01782FCB2FC52F5F2F752F762FB00056001D2FAC00862F75011D2FC32FAC017530002FA2005B00FA2F3F00A8001B008E004B2F4A2FDF001C2F6D00102FDC2FFD0012001D2FBA015D00A72FF42FC300842F472F882F6400182F7A01BD2F842FA52F4000D02F952FBB2FC400BB2F6D2FA500A62F412F1D2FCB00FD002B2E842FC4009B2FC12FCC00E52F4F2F780058010E2FA8007A2F4C0102007E2FBD003C2F3D2F712F8F2FAA2FC601192F722F552F9800B02F7B002C016F2E56008D005E2F77001B2F5A00A42F7A2F600021006C2FEB0023004600032EFB2DE600972F71002600412FB200132F1400062FFF2F85004F0040009F2EB500AD002500282F912FE00036001200342F162FA60047003300832FC12FD42FFB2F622F9A2FB02FB700D12F3000442F1300472F3B018F2FC7010000FC2FFF002C2F2E01392F162F39008B2FE02FD72EEA00122F8900172FD82F872FAB005E019B002C2FEA2F862FFE2F382F43001801032F6D00652F102F592FEA00582FC72FF4008E00292E6E00432FCA2FE52F6A009D2FD40087002D2F7A2FD500582F200024011700F100842F39300000B2002A2EC42FE42F082F4B2F9000832FBF2F7B000301732FD62EAB2F7600022F232FB0002800DF2E292F692FA42FD1002D2F322F852FEF00B02FFC0030004C00482FEC2FB8004500AC2FBD2E78009501E52F97008C003F008600050057002D00752E992F3400DB2F99007500E20043005C2FF900C9004300BA2EE000192F6E00322EF82E9800E82F732F8A2FF52FD22FE401312F66004A2FE600C901542FF82EDD00A02FFC2FAE00D900AC2FC7005C2F832F772F7F2F4B2F2E2FD3004F00BE00180027007A00132FCA0033007000572FD52FD50037002300CF2EF70003005200F600B100302F3F00E700492EEA2F40005E003600F200BC00270115006A00CF000C2F3F2FE82F9D2F5D2E54002800892E8B006D2F852FA200B301122FA600480060002C2F632E4D0033004400172FE401552F98007D2F8E2F4A2F982FC62F45009D2FCA00152FE30018000300B02FF501772F7800482F872FC02F5200302F4200052FAC2F37004F002E0070001000CD2FCF2F5A00830091003800C50063000E2FCE2F9D2FAB000E2F66001900852FE1005200D9005B0123003D2FDC00922EFD2F3F2F852FAF2FE52FB400AE000A00C52FAE2FDD2F3900D900302F890142003E01C2006D00460092004F2F3E2F22004F0038011B001300C500252FCC2F3A2F3600A42FB00062003F004F00C52F0D010900D2008400E52F1B00772FED2FE2001900012F942E1A2F6F2F4E2E272F51007F003D2EE52F34008501712ED62FAE001D000C2FD42FBC00E800A02FE700502F8D2FF02F5300AF2F7200672900872E6B008F009E01182FDF2F1800272F5C2E9C00812F4400562EA32F8B00042FD92F7500052FA1005E00292FCE2FA82ECA006B00012F2C2F1D2FE8013B2F2D2F9700D7003D2FEE00702FCC2FF900322F4C008700662FA82F4000732FC6001B005100392EFD2F86004C2F0200BE004900122EFB2F292FB401102F4D00652FE300B1002800D42F932E4100F80017000F000D2F562EFC00132F8500612F79016C2FAF004A01532F8F2ECD2FBD2FFF2F1700A6005200D32F7A004C2FA22F43018B2FF22F080057001D2FB000CC2F1A2F4C00EA2F702FBB2F2300EE0164000A0032003000DE007B00532FA0010D00582FF5007C2F902EB200492F202F062FF52FA8002D00A72FB900D4000A2F8C0093006D2F052EE02FCB2EEF2FB02F620001004D00F42FA22F8500462F3700232F5B2FF82FC5009D00262FD52F942FEE2F78002500502FFE00B700B0004600182F9500AA2F102FB9009700022FE7010100142FBF2FE600FB00053000000D016300B200452F4C2FBA002000C600802F2A010C2F3D002C00842FE52FAB00212F68006201CC00462FFD0022000E2FAB00B52F4F00232D5D2FAB2ED32F5000C80055017D007D2FC1005F2FE5001600472FBB2EE02FB52F7D2EFC2FCF2F980065004B00962F13000600832FF72FFE2EA60030014E2F98002000192F1200462F610034007D003B005E00D92F032FC32F6F009700022F452F51015C2F530047004A2FC101192FFE2F2300F6005F2FBE2FDD2F3700EE2F4800752F6F2FB800B12FAD2F6600FC2F4E2FFA00832FE92F5200D52FD400272FAA2FCF2F1A00E0006C007100702F7E00762FE2002C00AB0049000D2FD5004F011400AC00CF00C500FC00D72F412F6A00442F1300CD2F4A2FCA2F952FB500772FF32F07009E00DE0095009A00642F4901102FED0090004F2F53007100782EAF006B2FAF2F5A2FCA2FBC012100972FDC0020007D2EB200122FEF002100D02F6001BE2F55012F2FD200DD00252F50006600332F89003E2FB22FF100762F152FC100002FAA2F9B2F912FE8011600C42F0D2FFE2EF32ECA00E00008000C00702F9A2F1F2F7201562FCD00A0008F2F952F75007900C22E4330000089008B2FC4011B2F662F972FC22FE12F462FEA00CE2FD400662F382E86000F000C002A008E00A42F9C2F752F2C2F8C2FE62FFC2F492FD12F782F6C00092F77003A2FA5008D00D52FD30099002B00542FD52FC400A8005B2F392F9C2FDB00CC005A2EDE2F39013D2F050036010E00E0004F007A2F0E016A017D005C0071001800E800E32EFB2F7000022F3E2FB52F730025008100082FDF00E82FF200442FFE2F9D00B82FB82FA32F6F00212FB32EE800EA2F6A2F982EF400DD2F7000582E4E2FD42F682F5A2F442FCD0090006400302F952FE52F2A2FA32F7E012E008400152FB100982FAC2EA000A726BE";

        bytes memory salt = new bytes(40);
        for (uint256 k = 0; k < 40; k++) {
            salt[k] = sm[2 + k];
        }
        bytes memory message = new bytes(33); // we know that message is 33 bytes here
        for (uint256 k = 0; k < 33; k++) {
            message[k] = sm[2 + 40 + k];
        }

        // Signature is made of s1, s2 and hint = 1/prod(s2.ntt())
        uint256[] memory s1 = new uint256[](512);
        for (uint256 k = 0; k < 512; k++) {
            s1[k] = uint256(uint8(sm[2 + 40 + 33 + 1 + 2 * k])) << 8 | uint256(uint8(sm[2 + 40 + 33 + 1 + 2 * k + 1]));
        }
        uint256[] memory s2 = new uint256[](512);
        for (uint256 k = 0; k < 512; k++) {
            s2[k] = uint256(uint8(sm[2 + 40 + 33 + 1 + 1024 + 1 + 2 * k])) << 8
                | uint256(uint8(sm[2 + 40 + 33 + 1 + 1024 + 1 + 2 * k + 1]));
        }
        uint256 hint = uint256(uint8(sm[2 + 40 + 33 + 1 + 1024 + 1 + 1024])) << 8
            | uint256(uint8(sm[2 + 40 + 33 + 1 + 1024 + 1 + 1024 + 1]));

        uint256[] memory kpub = new uint256[](512);
        for (uint256 k = 0; k < 512; k++) {
            kpub[k] = uint256(uint8(pk[1 + 2 * k])) << 8 | uint256(uint8(pk[1 + 2 * k + 1]));
        }

        uint256[] memory cs1;
        uint256[] memory cs2;

        uint256[] memory hashed = hashToPointNIST(salt, message);

        cs1 = _ZKNOX_NTT_Compact(s1);
        cs2 = _ZKNOX_NTT_Compact(s2);

        address recovered_kpub = epervier.recover(message, salt, cs1, cs2, hint);
        assertEq(address(uint160(uint256(keccak256(abi.encodePacked(kpub))))), recovered_kpub);
    }
}
