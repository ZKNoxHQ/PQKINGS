// code generated using pythonref/generate_epervier_test_vectors.py.
pragma solidity ^0.8.25;

import {Test, console} from "forge-std/Test.sol";
import "../../src/ZKNOX_NTT.sol";
import "../../src/ZKNOX_epervier.sol";
import "../../src/ZKNOX_falcon_utils.sol";

contract ZKNOX_epervierTest is Test {
    ZKNOX_epervier epervier;

    //exemple of stateless initialisation, no external contract provided
    ZKNOX_NTT ntt = new ZKNOX_NTT(address(0), address(0), 12289, 12265);
    // forgefmt: disable-next-line
    uint256[1024] psi_rev = [uint256(1), 10810, 7143, 4043, 10984, 722, 5736, 8155, 3542, 8785, 9744, 3621, 10643, 1212, 3195, 5860, 7468, 2639, 9664, 11340, 11726, 9314, 9283, 9545, 5728, 7698, 5023, 5828, 8961, 6512, 7311, 1351, 2319, 11119, 11334, 11499, 9088, 3014, 5086, 10963, 4846, 9542, 9154, 3712, 4805, 8736, 11227, 9995, 3091, 12208, 7969, 11289, 9326, 7393, 9238, 2366, 11112, 8034, 10654, 9521, 12149, 10436, 7678, 11563, 1260, 4388, 4632, 6534, 2426, 334, 1428, 1696, 2013, 9000, 729, 3241, 2881, 3284, 7197, 10200, 8595, 7110, 10530, 8582, 3382, 11934, 9741, 8058, 3637, 3459, 145, 6747, 9558, 8357, 7399, 6378, 9447, 480, 1022, 9, 9821, 339, 5791, 544, 10616, 4278, 6958, 7300, 8112, 8705, 1381, 9764, 11336, 8541, 827, 5767, 2476, 118, 2197, 7222, 3949, 8993, 4452, 2396, 7935, 130, 2837, 6915, 2401, 442, 7188, 11222, 390, 773, 8456, 3778, 354, 4861, 9377, 5698, 5012, 9808, 2859, 11244, 1017, 7404, 1632, 7205, 27, 9223, 8526, 10849, 1537, 242, 4714, 8146, 9611, 3704, 5019, 11744, 1002, 5011, 5088, 8005, 7313, 10682, 8509, 11414, 9852, 3646, 6022, 2987, 9723, 10102, 6250, 9867, 11224, 2143, 11885, 7644, 1168, 5277, 11082, 3248, 493, 8193, 6845, 2381, 7952, 11854, 1378, 1912, 2166, 3915, 12176, 7370, 12129, 3149, 12286, 4437, 3636, 4938, 5291, 2704, 10863, 7635, 1663, 10512, 3364, 1689, 4057, 9018, 9442, 7875, 2174, 4372, 7247, 9984, 4053, 2645, 5195, 9509, 7394, 1484, 9042, 9603, 8311, 9320, 9919, 2865, 5332, 3510, 1630, 10163, 5407, 3186, 11136, 9405, 10040, 8241, 9890, 8889, 7098, 9153, 9289, 671, 3016, 243, 6730, 420, 10111, 1544, 3985, 4905, 3531, 476, 49, 1263, 5915, 1483, 9789, 10800, 10706, 6347, 1512, 350, 10474, 5383, 5369, 10232, 9087, 4493, 9551, 6421, 6554, 2655, 9280, 1693, 174, 723, 10314, 8532, 347, 2925, 8974, 11863, 1858, 4754, 3030, 4115, 2361, 10446, 2908, 218, 3434, 8760, 3963, 576, 6142, 9842, 1954, 10238, 9407, 10484, 3991, 8320, 9522, 156, 2281, 5876, 10258, 5333, 3772, 418, 5908, 11836, 5429, 7515, 7552, 1293, 295, 6099, 5766, 652, 8273, 4077, 8527, 9370, 325, 10885, 11143, 11341, 5990, 1159, 8561, 8240, 3329, 4298, 12121, 2692, 5961, 7183, 10327, 1594, 6167, 9734, 7105, 11089, 1360, 3956, 6170, 5297, 8210, 11231, 922, 441, 1958, 4322, 1112, 2078, 4046, 709, 9139, 1319, 4240, 8719, 6224, 11454, 2459, 683, 3656, 12225, 10723, 5782, 9341, 9786, 9166, 10542, 9235, 6803, 7856, 6370, 3834, 7032, 7048, 9369, 8120, 9162, 6821, 1010, 8807, 787, 5057, 4698, 4780, 8844, 12097, 1321, 4912, 10240, 677, 6415, 6234, 8953, 1323, 9523, 12237, 3174, 1579, 11858, 9784, 5906, 3957, 9450, 151, 10162, 12231, 12048, 3532, 11286, 1956, 7280, 11404, 6281, 3477, 6608, 142, 11184, 9445, 3438, 11314, 4212, 9260, 6695, 4782, 5886, 8076, 504, 2302, 11684, 11868, 8209, 3602, 6068, 8689, 3263, 6077, 7665, 7822, 7500, 6752, 4749, 4449, 6833, 12142, 8500, 6118, 8471, 1190, 9606, 3860, 5445, 7753, 11239, 5079, 9027, 2169, 11767, 7965, 4916, 8214, 5315, 11011, 9945, 1973, 6715, 8775, 11248, 5925, 11271, 654, 3565, 1702, 1987, 6760, 5206, 3199, 12233, 6136, 6427, 6874, 8646, 4948, 6152, 400, 10561, 5339, 5446, 3710, 6093, 468, 8301, 316, 11907, 10256, 8291, 3879, 1922, 10930, 6854, 973, 11035, 7, 1936, 845, 3723, 3154, 5054, 3285, 7929, 216, 50, 6763, 769, 767, 8484, 10076, 4153, 3120, 6184, 6203, 5646, 8348, 3753, 3536, 5370, 3229, 4730, 10583, 3929, 1282, 8717, 2021, 9457, 3944, 4099, 5604, 6759, 2171, 8809, 11024, 3007, 9344, 5349, 2633, 1406, 9057, 11996, 4855, 8520, 9348, 11722, 6627, 5289, 3837, 2595, 3221, 4273, 4050, 7082, 844, 5202, 11309, 11607, 4590, 7207, 8820, 6138, 7846, 8871, 4693, 2338, 9996, 11872, 1802, 1555, 5103, 10398, 7878, 10699, 1223, 9955, 11009, 614, 12265, 10918, 11385, 9804, 6742, 7250, 881, 11924, 1015, 10362, 5461, 9343, 2637, 7779, 4684, 3360, 7154, 63, 7302, 2373, 3670, 3808, 578, 5368, 11839, 1944, 7628, 11779, 9667, 6903, 5618, 10631, 5789, 3502, 5043, 826, 3090, 1398, 3065, 1506, 6586, 4483, 6389, 910, 7570, 11538, 4518, 3094, 1160, 4820, 2730, 5411, 10036, 1868, 2478, 9449, 4194, 3019, 10506, 7211, 7724, 4974, 7119, 2672, 11424, 1279, 189, 3116, 10526, 2209, 10759, 1694, 8420, 7866, 5832, 1350, 10555, 8474, 7014, 10499, 11038, 6879, 2035, 1040, 10407, 6164, 7519, 944, 5287, 8620, 6616, 9269, 6883, 7624, 4834, 2712, 9461, 4352, 8176, 72, 3840, 10447, 3451, 8195, 11048, 4378, 6508, 9244, 9646, 1095, 2873, 2827, 11498, 2434, 11169, 9754, 12268, 6481, 874, 9988, 170, 6639, 2307, 4289, 11641, 12139, 11259, 11823, 3821, 1681, 4649, 5969, 2929, 6026, 1573, 8443, 3793, 6226, 11787, 5118, 2602, 10388, 1849, 5776, 9021, 3795, 7988, 7766, 457, 12281, 11410, 9696, 982, 10013, 4218, 4390, 8835, 8531, 7785, 778, 530, 2626, 3578, 4697, 8823, 1701, 10243, 2940, 9332, 10808, 3317, 9757, 139, 3332, 343, 8841, 4538, 10381, 7078, 1866, 1208, 7562, 10584, 2450, 11873, 814, 716, 10179, 2164, 6873, 5412, 8080, 9011, 6296, 3515, 11851, 1218, 5061, 10753, 10568, 2429, 8186, 1373, 9307, 717, 8700, 8921, 4227, 4238, 11677, 8067, 1526, 11749, 12164, 3163, 4032, 6127, 7449, 1389, 10221, 4404, 11943, 3359, 9084, 5209, 1092, 3678, 4265, 10361, 464, 1826, 2926, 4489, 9118, 1136, 3449, 3708, 9051, 2065, 5826, 3495, 4564, 8755, 3961, 10533, 4145, 2275, 2461, 4267, 5653, 5063, 8113, 10771, 8524, 11014, 5508, 11113, 6555, 4860, 1125, 10844, 11158, 6302, 6693, 579, 3889, 9520, 3114, 6323, 212, 8314, 4883, 6454, 3087, 1417, 5676, 7784, 2257, 3744, 4963, 2528, 9233, 5102, 11877, 6701, 6444, 4924, 4781, 1014, 11841, 1327, 3607, 3942, 7057, 2717, 60, 3200, 10754, 5836, 7723, 2260, 68, 180, 4138, 7684, 2689, 10880, 7070, 204, 5509, 10821, 8308, 8882, 463, 10945, 9247, 9806, 10235, 4739, 8038, 6771, 1226, 9261, 5216, 11925, 9929, 11053, 9272, 7043, 4475, 3121, 4705, 1057, 9689, 11883, 10602, 146, 5268, 1403, 1804, 6094, 7100, 12050, 9389, 994, 4554, 4670, 11777, 5464, 4906, 3375, 9998, 8896, 4335, 7376, 3528, 3825, 8054, 9342, 8307, 636, 5609, 11667, 10552, 5672, 4499, 5598, 3344, 10397, 8665, 6565, 10964, 11260, 10344, 5959, 10141, 8330, 5797, 2442, 1248, 5115, 4939, 10975, 1744, 2894, 8635, 6599, 9834, 8342, 338, 3343, 8170, 1522, 10138, 12269, 5002, 4608, 5163, 4578, 377, 11914, 1620, 10453, 11864, 10104, 11897, 6085, 8122, 11251, 11366, 10058, 6197, 2800, 193, 506, 1255, 1392, 5784, 3276, 8951, 2212, 9615, 10347, 8881, 2575, 1165, 2776, 11111, 6811, 3511];

    // forgefmt: disable-next-line
    uint256[1024] psi_inv_rev = [uint256(1), 1479, 8246, 5146, 4134, 6553, 11567, 1305, 6429, 9094, 11077, 1646, 8668, 2545, 3504, 8747, 10938, 4978, 5777, 3328, 6461, 7266, 4591, 6561, 2744, 3006, 2975, 563, 949, 2625, 9650, 4821, 726, 4611, 1853, 140, 2768, 1635, 4255, 1177, 9923, 3051, 4896, 2963, 1000, 4320, 81, 9198, 2294, 1062, 3553, 7484, 8577, 3135, 2747, 7443, 1326, 7203, 9275, 3201, 790, 955, 1170, 9970, 5374, 9452, 12159, 4354, 9893, 7837, 3296, 8340, 5067, 10092, 12171, 9813, 6522, 11462, 3748, 953, 2525, 10908, 3584, 4177, 4989, 5331, 8011, 1673, 11745, 6498, 11950, 2468, 12280, 11267, 11809, 2842, 5911, 4890, 3932, 2731, 5542, 12144, 8830, 8652, 4231, 2548, 355, 8907, 3707, 1759, 5179, 3694, 2089, 5092, 9005, 9408, 9048, 11560, 3289, 10276, 10593, 10861, 11955, 9863, 5755, 7657, 7901, 11029, 11813, 8758, 7384, 8304, 10745, 2178, 11869, 5559, 12046, 9273, 11618, 3000, 3136, 5191, 3400, 2399, 4048, 2249, 2884, 1153, 9103, 6882, 2126, 10659, 8779, 6957, 9424, 2370, 2969, 3978, 2686, 3247, 10805, 4895, 2780, 7094, 9644, 8236, 2305, 5042, 7917, 10115, 4414, 2847, 3271, 8232, 10600, 8925, 1777, 10626, 4654, 1426, 9585, 6998, 7351, 8653, 7852, 3, 9140, 160, 4919, 113, 8374, 10123, 10377, 10911, 435, 4337, 9908, 5444, 4096, 11796, 9041, 1207, 7012, 11121, 4645, 404, 10146, 1065, 2422, 6039, 2187, 2566, 9302, 6267, 8643, 2437, 875, 3780, 1607, 4976, 4284, 7201, 7278, 11287, 545, 7270, 8585, 2678, 4143, 7575, 12047, 10752, 1440, 3763, 3066, 12262, 5084, 10657, 4885, 11272, 1045, 9430, 2481, 7277, 6591, 2912, 7428, 11935, 8511, 3833, 11516, 11899, 1067, 5101, 11847, 9888, 1254, 11316, 5435, 1359, 10367, 8410, 3998, 2033, 382, 11973, 3988, 11821, 6196, 8579, 6843, 6950, 1728, 11889, 6137, 7341, 3643, 5415, 5862, 6153, 56, 9090, 7083, 5529, 10302, 10587, 8724, 11635, 1018, 6364, 1041, 3514, 5574, 10316, 2344, 1278, 6974, 4075, 7373, 4324, 522, 10120, 3262, 7210, 1050, 4536, 6844, 8429, 2683, 11099, 3818, 6171, 3789, 147, 5456, 7840, 7540, 5537, 4789, 4467, 4624, 6212, 9026, 3600, 6221, 8687, 4080, 421, 605, 9987, 11785, 4213, 6403, 7507, 5594, 3029, 8077, 975, 8851, 2844, 1105, 12147, 5681, 8812, 6008, 885, 5009, 10333, 1003, 8757, 241, 58, 2127, 12138, 2839, 8332, 6383, 2505, 431, 10710, 9115, 52, 2766, 10966, 3336, 6055, 5874, 11612, 2049, 7377, 10968, 192, 3445, 7509, 7591, 7232, 11502, 3482, 11279, 5468, 3127, 4169, 2920, 5241, 5257, 8455, 5919, 4433, 5486, 3054, 1747, 3123, 2503, 2948, 6507, 1566, 64, 8633, 11606, 9830, 835, 6065, 3570, 8049, 10970, 3150, 11580, 8243, 10211, 11177, 7967, 10331, 11848, 11367, 1058, 4079, 6992, 6119, 8333, 10929, 1200, 5184, 2555, 6122, 10695, 1962, 5106, 6328, 9597, 168, 7991, 8960, 4049, 3728, 11130, 6299, 948, 1146, 1404, 11964, 2919, 3762, 8212, 4016, 11637, 6523, 6190, 11994, 10996, 4737, 4774, 6860, 453, 6381, 11871, 8517, 6956, 2031, 6413, 10008, 12133, 2767, 3969, 8298, 1805, 2882, 2051, 10335, 2447, 6147, 11713, 8326, 3529, 8855, 12071, 9381, 1843, 9928, 8174, 9259, 7535, 10431, 426, 3315, 9364, 11942, 3757, 1975, 11566, 12115, 10596, 3009, 9634, 5735, 5868, 2738, 7796, 3202, 2057, 6920, 6906, 1815, 11939, 10777, 5942, 1583, 1489, 2500, 10806, 6374, 11026, 12240, 8778, 5478, 1178, 9513, 11124, 9714, 3408, 1942, 2674, 10077, 3338, 9013, 6505, 10897, 11034, 11783, 12096, 9489, 6092, 2231, 923, 1038, 4167, 6204, 392, 2185, 425, 1836, 10669, 375, 11912, 7711, 7126, 7681, 7287, 20, 2151, 10767, 4119, 8946, 11951, 3947, 2455, 5690, 3654, 9395, 10545, 1314, 7350, 7174, 11041, 9847, 6492, 3959, 2148, 6330, 1945, 1029, 1325, 5724, 3624, 1892, 8945, 6691, 7790, 6617, 1737, 622, 6680, 11653, 3982, 2947, 4235, 8464, 8761, 4913, 7954, 3393, 2291, 8914, 7383, 6825, 512, 7619, 7735, 11295, 2900, 239, 5189, 6195, 10485, 10886, 7021, 12143, 1687, 406, 2600, 11232, 7584, 9168, 7814, 5246, 3017, 1236, 2360, 364, 7073, 3028, 11063, 5518, 4251, 7550, 2054, 2483, 3042, 1344, 11826, 3407, 3981, 1468, 6780, 12085, 5219, 1409, 9600, 4605, 8151, 12109, 12221, 10029, 4566, 6453, 1535, 9089, 12229, 9572, 5232, 8347, 8682, 10962, 448, 11275, 7508, 7365, 5845, 5588, 412, 7187, 3056, 9761, 7326, 8545, 10032, 4505, 6613, 10872, 9202, 5835, 7406, 3975, 12077, 5966, 9175, 2769, 8400, 11710, 5596, 5987, 1131, 1445, 11164, 7429, 5734, 1176, 6781, 1275, 3765, 1518, 4176, 7226, 6636, 8022, 9828, 10014, 8144, 1756, 8328, 3534, 7725, 8794, 6463, 10224, 3238, 8581, 8840, 11153, 3171, 7800, 9363, 10463, 11825, 1928, 8024, 8611, 11197, 7080, 3205, 8930, 346, 7885, 2068, 10900, 4840, 6162, 8257, 9126, 125, 540, 10763, 4222, 612, 8051, 8062, 3368, 3589, 11572, 2982, 10916, 4103, 9860, 1721, 1536, 7228, 11071, 438, 8774, 5993, 3278, 4209, 6877, 5416, 10125, 2110, 11573, 11475, 416, 9839, 1705, 4727, 11081, 10423, 5211, 1908, 7751, 3448, 11946, 8957, 12150, 2532, 8972, 1481, 2957, 9349, 2046, 10588, 3466, 7592, 8711, 9663, 11759, 11511, 4504, 3758, 3454, 7899, 8071, 2276, 11307, 2593, 879, 8, 11832, 4523, 4301, 8494, 3268, 6513, 10440, 1901, 9687, 7171, 502, 6063, 8496, 3846, 10716, 6263, 9360, 6320, 7640, 10608, 8468, 466, 1030, 150, 648, 8000, 9982, 5650, 12119, 2301, 11415, 5808, 21, 2535, 1120, 9855, 791, 9462, 9416, 11194, 2643, 3045, 5781, 7911, 1241, 4094, 8838, 1842, 8449, 12217, 4113, 7937, 2828, 9577, 7455, 4665, 5406, 3020, 5673, 3669, 7002, 11345, 4770, 6125, 1882, 11249, 10254, 5410, 1251, 1790, 5275, 3815, 1734, 10939, 6457, 4423, 3869, 10595, 1530, 10080, 1763, 9173, 12100, 11010, 865, 9617, 5170, 7315, 4565, 5078, 1783, 9270, 8095, 2840, 9811, 10421, 2253, 6878, 9559, 7469, 11129, 9195, 7771, 751, 4719, 11379, 5900, 7806, 5703, 10783, 9224, 10891, 9199, 11463, 7246, 8787, 6500, 1658, 6671, 5386, 2622, 510, 4661, 10345, 450, 6921, 11711, 8481, 8619, 9916, 4987, 12226, 5135, 8929, 7605, 4510, 9652, 2946, 6828, 1927, 11274, 365, 11408, 5039, 5547, 2485, 904, 1371, 24, 11675, 1280, 2334, 11066, 1590, 4411, 1891, 7186, 10734, 10487, 417, 2293, 9951, 7596, 3418, 4443, 6151, 3469, 5082, 7699, 682, 980, 7087, 11445, 5207, 8239, 8016, 9068, 9694, 8452, 7000, 5662, 567, 2941, 3769, 7434, 293, 3232, 10883, 9656, 6940, 2945, 9282, 1265, 3480, 10118, 5530, 6685, 8190, 8345, 2832, 10268, 3572, 11007, 8360, 1706, 7559, 9060, 6919, 8753, 8536, 3941, 6643, 6086, 6105, 9169, 8136, 2213, 3805, 11522, 11520, 5526, 12239, 12073, 4360, 9004, 7235, 9135, 8566, 11444, 10353, 12282];

    //stateful initialisation
    function setUp() public {
        epervier = new ZKNOX_epervier();
    }

    function testVector0() public view {
        // public key
        // forgefmt: disable-next-line
        address pk_0 = address(728199263750570446964354330903202655824594974439);

        // signature s1
        // forgefmt: disable-next-line
        uint[512] memory tmp_s1 = [uint(12149), 406,12233,111,12168,12134,11916,12251,12181,12276,12189,12121,32,12146,12191,148,189,14,58,12250,12033,12275,12192,87,155,173,284,92,11998,12279,238,12152,12248,335,11971,12192,90,12226,12225,12055,12197,150,61,303,12127,12272,190,12277,71,234,25,12192,12179,12115,225,119,195,100,12175,10,12097,334,12176,61,12165,52,190,12177,11959,12258,73,12264,255,12056,22,12171,12180,32,12098,109,116,12019,12068,12061,12168,124,5,115,12113,400,11877,96,12269,12200,11923,168,38,12,12234,12263,12284,5,242,199,12049,354,12219,11948,12286,68,12239,12204,13,255,12201,328,44,12203,12227,12,45,386,12282,124,12136,12041,12195,60,12152,29,223,12142,14,12175,12222,153,221,12092,197,12218,98,12136,11935,12055,45,73,12204,12286,216,12276,12008,127,12116,148,12276,12170,12250,202,11915,12169,12231,12184,12163,12170,39,12200,94,235,133,154,100,233,12276,168,87,67,65,12129,12280,12091,123,12046,12257,12137,12136,179,12041,172,12285,111,12203,12095,154,12230,291,12063,12186,12094,12222,12212,12060,11989,313,11885,419,12224,12274,27,12219,205,232,12059,69,12224,83,12152,41,212,12123,12102,22,224,12219,199,109,121,55,12172,12203,12207,12243,14,119,12198,12213,12015,12146,52,191,12226,113,12240,177,241,12138,11971,11969,60,12252,11822,78,47,12190,12159,173,11988,39,199,12255,187,229,12,12245,132,11988,12287,12130,12173,12176,12279,119,12250,12276,335,12012,12216,11998,36,11914,12237,89,335,12206,11997,58,12049,12083,12187,314,12077,72,12265,96,12177,12241,12056,12219,298,12274,12109,17,11998,125,12118,12210,49,12193,12025,90,12252,24,12270,12072,16,79,12222,48,99,12288,156,12258,12003,152,12259,12078,12126,12154,50,12194,12279,194,11908,30,12281,12154,12230,11996,12109,237,103,12261,12276,65,246,12084,80,108,12269,12119,5,12133,104,12091,142,12222,160,12125,100,29,70,59,24,283,12259,151,117,12273,12186,63,12090,12214,11983,12218,12163,12034,251,251,12143,409,12255,199,91,408,97,12223,11861,12157,12073,241,68,52,12084,12280,12227,123,12126,36,12259,12190,12212,12116,11940,2,12174,53,134,74,17,178,328,12254,33,122,65,188,0,68,105,12213,12235,158,69,12152,12251,19,12265,4,119,181,12256,185,109,250,12135,212,12150,12271,12163,50,12264,153,102,12021,52,87,12076,12161,27,1,12231,8,124,12218,12145,12242,12100,12268,12233,12268,19,11928,32,153,12192,4,75,112,12101,149,14,12221,71,138,12177,12168,28,12251,12225,78,61,160,12103,214,178,63,169,12182,8,11993,98,12164,400,12038,40,12101,20,12230,12259,11814,12156,11989,28,12056,26,12244,240,12182,313,193,184,12150,14];

        // signature s2
        // forgefmt: disable-next-line
        uint[512] memory tmp_s2 = [uint(223), 12256,12162,12138,12162,12134,23,12206,35,117,12239,12166,12262,49,91,321,104,91,163,119,12063,98,12142,190,12203,33,12146,12121,12172,12192,12167,32,12001,12255,12222,12250,12279,12230,12284,246,12265,140,12068,12276,12203,12164,12154,12155,141,12190,75,40,12140,12165,141,12063,12258,68,351,12123,12272,96,12179,96,174,12226,134,254,11891,194,12139,51,11999,12088,12236,12179,142,324,104,258,14,210,11913,12152,59,47,208,12179,50,11945,12045,140,23,11949,41,23,21,116,12242,12237,147,172,12107,12165,68,73,50,280,335,12193,12129,11996,40,64,45,12275,207,12104,135,12253,152,45,12165,290,521,185,108,11818,11998,12150,353,94,12025,12287,12228,58,68,12166,12202,98,347,12255,124,12202,11934,53,138,219,10,298,192,12258,12260,243,12156,12062,92,12286,220,279,132,185,12022,98,43,12189,33,12077,12034,12186,150,71,175,236,12167,12177,52,118,12103,12082,5,11998,11973,12143,73,182,12144,363,12163,12149,12282,12254,12188,12220,12038,12163,64,12114,12184,12230,12068,12234,12228,12171,133,156,12272,12196,12269,12022,12170,177,12251,158,42,374,9,12274,187,12163,131,159,54,12161,12175,118,23,133,319,70,12106,183,12130,10,158,12233,12140,111,12193,119,212,116,282,12225,96,12143,12146,12226,71,12200,63,116,12005,11926,12135,50,12283,12216,12137,24,255,12087,177,12258,12195,32,158,12166,52,12185,12262,65,37,60,252,12204,32,11809,388,55,10,12210,12072,12018,320,12285,132,12201,12249,67,12036,31,170,207,70,108,20,49,227,12227,11918,37,190,12147,12092,12232,25,151,129,87,103,135,12045,12270,104,12240,11918,151,20,26,12244,37,454,57,12182,12053,12159,12072,13,88,22,12277,12219,12186,12157,12178,309,12183,12119,12197,397,192,142,12242,12011,12103,12053,114,12130,12142,12221,12079,12159,12226,34,11939,36,12194,150,12223,12234,179,97,12175,64,90,92,258,12173,10,12274,12267,127,12284,59,140,180,139,261,173,12287,316,173,14,12194,12151,85,12065,12215,12047,333,12263,40,12087,12264,12031,12170,125,12244,12092,12032,12255,231,306,12073,12166,12104,12186,12168,11737,21,42,42,369,12249,52,12278,12232,286,399,41,128,311,115,61,12124,75,51,12190,12261,12036,115,12023,12213,12149,12185,12063,12059,0,12186,12276,210,247,197,128,244,12033,106,90,196,48,12212,191,100,12076,12260,5,79,11858,285,12251,12210,12282,137,12216,229,12009,119,12122,12277,12112,12054,93,163,12245,126,12096,12225,12169,12268,12072,12205,12082,12154,54,11971,12177,190,12120,12269,222,11823,12100,11896,12264,61,12156,12258,180,117,4,12278,12067,34,121,12275,260,12214,175,12118,144,12238];

        uint256[] memory s1 = new uint256[](512);
        uint256[] memory s2 = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            s1[i] = tmp_s1[i];
            s2[i] = tmp_s2[i];
        }
        uint256[] memory cs1 = _ZKNOX_NTT_Compact(s1);
        uint256[] memory cs2 = _ZKNOX_NTT_Compact(s2);
        // short hint
        uint256 hint = 11409;
        // message
        bytes memory message = "My name is Renaud";
        bytes memory salt =
            "\x46\xb9\xdd\x2b\x0b\xa8\x8d\x13\x23\x3b\x3f\xeb\x74\x3e\xeb\x24\x3f\xcd\x52\xea\x62\xb8\x1b\x82\xb5\x0c\x27\x64\x6e\xd5\x76\x2f\xd7\x5d\xc4\xdd\xd8\xc0\xf2\x00";
        address recovered_pk_0;
        recovered_pk_0 = epervier.recover(message, salt, cs1, cs2, hint);
        assertEq(pk_0, recovered_pk_0);
    }

    function testVector1() public view {
        // public key
        // forgefmt: disable-next-line
        address pk_1 = address(728199263750570446964354330903202655824594974439);

        // signature s1
        // forgefmt: disable-next-line
        uint[512] memory tmp_s1 = [uint(403), 25,12055,12159,12251,12170,12113,12249,150,12247,120,163,12017,64,12141,182,12263,12169,12110,12039,12224,176,123,62,12167,19,12239,12287,12025,12103,12199,12081,42,92,12281,38,12274,100,12061,150,327,12257,12199,12052,12005,65,11993,145,12120,11,11971,133,12215,52,175,12252,11841,24,108,12001,49,12210,355,12162,151,263,12205,132,250,12004,6,12017,12199,214,12091,12149,12133,12194,12224,12163,12247,12117,118,175,161,106,65,12203,11879,84,447,135,12278,185,12160,22,12080,15,126,191,12261,12138,129,12226,499,12287,12114,127,35,11969,119,28,29,12071,155,225,12149,12204,12245,40,134,12209,12144,12182,253,11919,64,85,127,214,12227,12264,137,12204,12054,12254,170,98,12240,62,39,125,11979,101,69,12140,110,185,33,12275,12067,354,27,12243,12153,151,12227,12049,86,12228,78,12157,12206,12171,12265,11907,12100,235,12209,73,200,15,326,438,281,12072,154,12275,154,69,12055,12285,129,186,12221,12105,31,190,220,12113,166,12250,12131,12026,161,11980,14,11986,12217,131,12213,50,71,312,98,12108,109,12196,11978,306,92,12222,58,168,12034,12182,38,12282,12037,128,60,12117,23,134,12102,12197,12040,92,12215,12065,276,285,12170,12097,11,12051,12065,12157,96,12259,12194,12201,220,12259,158,229,88,78,12279,12243,164,12158,12248,12256,181,12259,12171,12242,16,135,292,12191,22,12049,12168,12129,12073,446,204,173,242,160,11931,75,12191,96,12208,11738,12087,176,12021,12284,71,14,107,12116,12136,415,79,12249,12273,12225,128,33,12133,96,11837,12202,197,12242,37,185,76,12279,62,54,11999,12092,25,226,12228,17,208,112,64,33,12186,12180,88,352,86,166,12263,12083,12229,12084,224,142,55,12114,143,234,12112,12114,131,12074,11998,9,16,28,12142,11841,148,9,12051,12276,53,12272,101,89,12169,70,282,12202,155,159,12091,232,134,12145,241,12101,136,12073,12283,12101,160,6,277,20,12163,79,12027,86,109,66,437,202,12285,12250,12048,12287,12233,12084,12272,12203,12089,231,12230,174,12012,177,55,9,123,32,73,172,77,12164,12197,116,335,12213,1,84,12207,374,12157,88,21,12235,12145,135,12127,186,12177,12024,12105,460,12142,12092,12275,308,12267,208,12241,31,12129,18,12260,11963,12197,79,220,114,161,16,11991,122,87,62,199,12276,179,26,12108,64,12075,12122,12257,12142,80,11874,12094,20,12131,172,243,12244,12280,305,111,12112,72,151,18,12275,256,322,11880,72,12023,87,12165,140,130,12056,177,12207,12249,71,216,84,12222,99,128,12091,12093,12074,275,174,85,12126,12148,12163,52,330,12213,12100,12077,282,12288,12193,46,149,80,12264,139,12274,379,12218];

        // signature s2
        // forgefmt: disable-next-line
        uint[512] memory tmp_s2 = [uint(12284), 12105,12244,154,12204,11917,12268,98,124,11978,12187,12124,12135,141,12166,87,295,144,12284,145,12125,12157,199,12097,11997,12181,22,12277,14,12287,12083,12230,105,12239,41,44,12075,60,41,12147,12184,303,233,56,277,178,12188,54,12281,11970,12113,11962,267,12245,12197,12183,334,171,315,267,11924,12194,169,12107,12140,12187,12284,94,12113,59,290,49,12164,130,37,12182,12243,163,12202,65,45,123,12172,12234,71,39,12242,12084,28,274,12236,123,348,178,12248,12060,11980,61,270,134,278,200,12256,11720,12159,61,12273,214,12146,12228,163,12147,255,99,325,54,12092,12278,259,110,72,12280,12245,42,69,11986,12165,12204,379,12225,289,62,80,12134,99,211,12185,12166,216,174,12251,46,12093,12157,12169,20,87,35,148,12258,273,324,12009,12203,12147,12281,147,120,12127,82,12091,12230,12050,197,12145,12145,9,12275,84,12222,12115,92,12136,12158,12176,70,65,78,12270,30,12182,12215,11995,11904,12130,140,12230,12154,12136,56,12184,63,12071,12257,0,175,12176,360,12147,12079,5,90,12281,12160,12164,66,268,211,12221,115,12050,103,26,11895,76,8,12163,12175,169,12251,12074,362,75,12090,91,78,11932,12065,58,32,165,124,104,107,12222,12274,16,116,12283,11987,2,12254,11902,182,0,12169,58,17,66,12171,41,12255,12113,12241,12285,12279,141,553,115,267,12270,140,12234,142,12259,12095,257,12042,209,434,222,12109,125,12110,12263,209,11919,166,27,12258,90,310,121,0,12238,12223,207,12202,105,12029,12099,11,156,12121,12240,12161,196,11900,12094,12165,12207,12167,176,63,12189,83,12286,23,291,223,12273,143,12274,122,12005,12262,19,12152,12144,274,12190,58,12221,11956,12235,12117,12117,44,33,12209,12184,12256,90,81,137,12151,204,52,214,12105,48,12269,182,12242,41,333,12148,12248,12259,12268,114,12102,12042,12256,12236,417,13,190,12111,12090,40,52,11,189,3,44,85,12270,12216,37,12224,12242,33,232,12220,11975,124,48,117,93,186,17,12189,213,76,44,91,12250,12243,327,177,24,199,11,122,25,166,232,172,12131,12073,293,12190,11957,11932,86,12192,91,12085,12166,67,254,12268,48,12213,155,12269,3,12288,12281,12003,12121,12146,12159,12193,67,12179,125,12010,12225,12079,265,11963,12248,11965,83,202,12249,12258,131,13,36,22,12138,12002,188,74,193,45,256,12251,116,151,12024,12154,170,65,30,167,139,101,12093,12275,12161,178,12157,12024,12240,57,261,12158,12163,138,66,23,11989,6,12286,115,12171,237,508,12009,12221,27,12029,12288,12197,12040,284,12093,40,210,12183,58,12236,12115,12223,12186,22,11947,12231,12240,12209,266,111,107,12201,12288,12103,12157,12166];

        uint256[] memory s1 = new uint256[](512);
        uint256[] memory s2 = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            s1[i] = tmp_s1[i];
            s2[i] = tmp_s2[i];
        }
        uint256[] memory cs1 = _ZKNOX_NTT_Compact(s1);
        uint256[] memory cs2 = _ZKNOX_NTT_Compact(s2);
        // short hint
        uint256 hint = 8441;
        // message
        bytes memory message = "My name is Simon";
        bytes memory salt =
            "\x34\x9e\xc7\x55\x46\xf5\x8f\xb7\xc2\x77\x5c\x38\x46\x2c\x50\x10\xd8\x46\xc1\x85\xc1\x51\x11\xe5\x95\x52\x2a\x6b\xcd\x16\xcf\x86\xf3\xd1\x22\x10\x9e\x3b\x1f\xdd";
        address recovered_pk_1;
        recovered_pk_1 = epervier.recover(message, salt, cs1, cs2, hint);
        assertEq(pk_1, recovered_pk_1);
    }

    function testVector2() public view {
        // public key
        // forgefmt: disable-next-line
        address pk_2 = address(728199263750570446964354330903202655824594974439);

        // signature s1
        // forgefmt: disable-next-line
        uint[512] memory tmp_s1 = [uint(12114), 12101,137,12250,12236,60,12226,95,77,12189,12120,32,11986,12199,12260,4,12213,12150,96,10,178,55,83,12161,12274,496,12068,12042,12171,77,12133,12224,311,36,87,29,12069,12069,12160,12069,476,12008,49,12156,24,12043,101,12187,12175,12043,12073,12135,402,12222,30,12143,12275,12081,12096,83,9,12111,187,12195,12083,12177,12239,12085,12209,12233,15,12263,2,12204,12181,12283,9,203,12140,12173,12262,12274,12264,176,12105,12235,160,12266,76,12058,416,481,125,12258,12215,12284,88,12130,12282,12145,12284,12090,12214,57,12158,268,105,35,12070,12286,255,12075,12276,12073,62,182,12203,12144,12162,33,12120,0,114,213,12042,12283,12167,19,12243,12223,287,12242,84,12206,79,12221,12226,12124,61,12152,12128,77,12035,12280,198,78,12223,23,123,155,38,12215,6,117,12253,12260,149,99,12245,12243,152,12287,173,12257,17,160,12091,397,11784,11914,12019,141,299,12117,12078,164,12150,12217,12275,12229,11958,37,12196,104,83,12282,49,12191,12283,12131,12275,445,38,12222,96,12047,308,259,146,12257,161,61,44,297,12222,134,86,406,16,12034,154,136,12143,12278,64,200,12178,46,64,12129,40,12124,12181,4,49,12160,184,12175,12131,353,11999,12261,156,212,12269,107,415,236,12228,12166,27,123,12166,267,12139,125,12151,34,12284,174,12188,12057,12178,25,11958,12198,39,78,12086,121,250,60,11996,56,12095,91,112,12042,118,71,11964,12273,12182,12219,12255,12249,11945,259,13,11964,67,162,73,3,18,270,29,12282,12193,12226,51,17,24,315,40,65,12155,12108,12154,26,270,12275,12194,12110,12259,15,12183,12270,19,12199,12149,11947,11985,12091,12071,12203,12120,236,45,92,7,12274,24,77,93,12278,12007,255,12039,49,12140,138,11859,12254,212,12212,87,226,361,12126,12271,12190,16,12185,12261,109,41,12138,12203,12272,25,132,110,79,79,12149,239,12087,212,126,12251,161,12241,45,89,210,144,24,12285,12208,12199,12243,119,333,47,12116,39,12286,12027,48,89,70,12055,152,34,12075,88,81,13,12002,12252,138,197,200,84,11928,74,12035,281,203,50,22,12080,129,12169,188,12191,33,110,12102,87,12270,12110,303,12053,12005,12220,12268,119,113,12276,251,12038,12097,137,12266,12176,12266,12078,12100,99,133,19,12158,12254,12242,12061,12058,67,2,320,12171,12238,12108,12117,70,230,249,19,45,12213,21,118,173,87,12032,184,12236,68,107,12288,12158,12177,44,12283,12037,56,180,12202,159,12214,216,12240,12153,72,134,12263,187,12134,76,41,11999,170,81,12238,198,12121,103,48,36,12184,17,72,12279,12142,255,41,11952,59,11994,20,170,124,101,12134,0,12232,11863,107,12228,67,12046];

        // signature s2
        // forgefmt: disable-next-line
        uint[512] memory tmp_s2 = [uint(12073), 12223,12152,11955,11996,12092,242,61,12260,379,12068,12239,12243,12,12098,179,83,12132,12250,12250,20,11988,75,435,12016,294,12276,12225,12175,229,208,12191,12270,12088,120,12080,290,12231,12013,37,12195,53,12206,39,289,12154,12176,294,221,12264,179,12251,98,12035,12056,12214,12208,279,12046,112,12137,12100,12179,12287,12187,12112,286,12243,12250,12220,192,12285,183,258,11986,226,104,220,51,296,12285,12163,143,12148,12094,12110,12145,34,45,95,410,12155,278,12001,12039,155,182,105,33,12239,266,12088,145,14,262,173,104,12097,123,112,171,80,353,123,6,12117,11870,12158,12236,35,138,12053,12058,265,12151,383,12149,60,353,99,12279,122,12118,12115,12184,12221,12223,12231,226,146,168,12237,12211,12186,61,12,12233,169,207,12228,72,12057,110,235,74,164,12238,324,12269,217,1,12119,183,138,11885,169,133,275,12158,12082,379,12035,135,11891,12267,103,41,12136,12058,188,117,12247,12212,12088,12046,166,12244,13,118,12109,170,176,17,162,12189,7,230,283,12073,210,12076,12158,118,148,12122,12284,154,12140,12231,12156,12219,12172,224,389,12238,12248,12211,12222,12257,12119,12074,12074,12244,12113,78,52,12194,44,12059,13,12222,231,21,12086,12109,137,52,12243,12163,12098,33,12183,12220,58,12282,260,369,82,114,12268,11997,12067,93,85,3,12179,320,142,11850,4,18,83,48,198,9,233,22,12259,67,53,12112,243,12087,12164,200,168,496,320,120,103,22,12025,12193,12201,179,17,12110,7,12020,12216,197,271,151,76,12192,12118,63,118,12249,130,12221,12186,12229,12007,12247,289,12138,12083,12264,12214,12165,56,12255,12214,12283,338,11952,1,12244,508,100,321,120,169,80,12205,73,12257,147,1,250,154,12167,68,241,194,154,20,12271,12274,12032,286,6,95,12283,293,12013,105,12114,81,38,73,12052,12226,11935,100,94,76,12218,12009,242,12148,219,12140,57,12173,8,12202,12248,171,12280,12151,15,12197,45,12009,12085,280,12051,112,94,317,90,129,66,12285,126,12234,51,12142,32,12205,12226,221,12256,142,141,12245,241,12256,185,12052,53,124,12158,12170,12213,81,12076,12208,12237,12245,127,91,12182,28,12234,12264,188,199,362,12122,12174,12166,158,215,12092,36,264,106,120,61,121,11985,12086,404,12107,14,83,12169,283,12279,97,34,120,12023,41,12229,12107,12122,38,35,11897,12258,12159,27,12209,18,318,12194,319,429,167,95,12191,63,177,12283,22,207,200,31,12235,12120,67,120,12157,12089,101,12198,182,12218,53,179,12266,12218,291,85,12170,12024,11959,77,184,12004,159,12152,80,12273,226,123,169,0,12102,12215,12024,12056,12230,12168,4,11884,12267,12084];

        uint256[] memory s1 = new uint256[](512);
        uint256[] memory s2 = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            s1[i] = tmp_s1[i];
            s2[i] = tmp_s2[i];
        }
        uint256[] memory cs1 = _ZKNOX_NTT_Compact(s1);
        uint256[] memory cs2 = _ZKNOX_NTT_Compact(s2);
        // short hint
        uint256 hint = 2581;
        // message
        bytes memory message = "My name is Nicolas";
        bytes memory salt =
            "\xaa\xae\x31\x4e\xd9\x08\x3d\xab\x4b\x09\x9f\x8e\x30\x0f\x01\xb8\x65\x0f\x1f\x4b\x1d\x8f\xcf\x3f\x3c\xb5\x3f\xb8\xe9\xeb\x2e\xa2\x03\xbd\xc9\x70\xf5\x0a\xe5\x54";
        address recovered_pk_2;
        recovered_pk_2 = epervier.recover(message, salt, cs1, cs2, hint);
        assertEq(pk_2, recovered_pk_2);
    }

    function testVector3() public view {
        // public key
        // forgefmt: disable-next-line
        address pk_3 = address(728199263750570446964354330903202655824594974439);

        // signature s1
        // forgefmt: disable-next-line
        uint[512] memory tmp_s1 = [uint(39), 79,90,12060,76,12205,12259,12231,17,71,164,42,147,12043,200,132,48,138,225,117,359,21,12149,209,12181,12286,12242,31,100,12190,84,12102,12243,229,12151,446,12244,12274,4,90,12146,97,6,112,12087,12215,12057,133,12249,361,12228,133,97,0,12048,66,12176,12145,12094,316,15,12063,149,12213,165,12268,12145,261,227,69,12221,65,12081,226,80,12088,12239,245,62,12129,30,12063,12270,12150,4,12232,12265,12192,12148,180,12244,196,122,12162,111,112,120,60,12174,12156,12040,12114,12198,75,12215,12265,12210,85,12030,110,11943,12111,12095,53,12093,12090,126,12198,12027,56,12007,225,12192,12216,12034,12093,12072,9,318,12080,107,11959,12160,90,113,12109,13,12170,12255,12164,12109,12249,12023,41,12267,167,251,286,12155,11952,12106,11960,9,229,103,12194,142,534,34,172,94,77,12184,102,217,59,86,12169,30,12138,161,59,14,12281,70,12150,13,12052,12241,79,127,12091,285,168,73,286,296,18,12262,12033,238,12149,12185,12027,19,143,24,301,208,193,82,53,12159,12251,12122,12125,12277,118,118,12216,52,87,135,12097,353,212,37,116,180,50,12031,12186,11993,54,12286,12287,12263,12048,22,149,12087,12141,12131,68,89,11973,12218,12198,22,12144,233,37,12119,191,97,126,207,12256,169,202,12267,100,14,112,12279,12129,12234,12150,12201,63,12064,237,10,12133,40,12267,40,189,51,12053,313,220,12212,30,12250,12203,44,12146,12185,12270,217,118,91,12195,12248,238,12101,12187,12198,12251,38,195,183,12151,12252,317,182,11841,12199,12071,296,12175,11996,113,146,151,142,12264,264,12182,12212,12115,12288,12259,12282,12166,174,37,12143,72,12279,12268,12221,93,11958,12235,12260,12168,12260,73,12119,12253,12124,103,248,259,11,12255,12261,12118,12193,329,12069,148,11991,193,12221,245,12138,40,22,55,463,4,7,138,58,12117,116,16,11979,12212,12178,125,12162,278,12204,12232,12265,12238,12000,12059,41,12268,12019,12247,190,47,39,12255,12224,386,12221,12285,12082,11861,194,319,1,262,60,12064,12122,12107,37,12243,117,91,12149,151,12131,12095,12186,12017,12171,42,12229,145,12267,27,12277,12138,12172,48,12221,187,144,12212,158,11950,126,141,68,233,12158,12155,12182,12137,12213,143,11964,29,12160,12167,12108,119,11971,208,213,12241,12079,159,12202,66,12102,275,52,12228,12259,12038,0,12257,12078,16,12275,51,12025,77,194,33,21,236,12249,12211,12015,11898,12162,114,135,191,12121,12236,12092,12075,12285,64,12078,12065,45,12145,12192,12224,73,12141,21,125,87,12176,12281,12161,3,11969,12230,12057,165,44,0,12217,234,12286,100,12205,12019,145,214,12258,11869,12274,12060,12107,11942,16];

        // signature s2
        // forgefmt: disable-next-line
        uint[512] memory tmp_s2 = [uint(76), 12141,12075,53,12183,96,12017,176,45,5,107,12192,146,141,12192,12166,251,12227,126,11990,31,12200,12136,12014,12241,59,377,12280,12196,12071,12284,12282,159,210,11965,226,12231,104,12174,315,43,12155,92,69,58,31,0,38,194,147,57,12275,12237,0,65,137,32,56,14,11744,12158,11979,74,261,254,66,12263,61,12149,86,12199,12168,221,85,12143,12227,30,143,12137,132,12258,49,12092,202,12129,57,12070,600,12208,221,12108,237,12199,12275,46,12001,111,201,12144,12037,7,166,95,51,12157,128,12254,12167,43,12230,36,12138,230,12254,108,151,12174,12098,11933,12119,12182,12260,49,145,88,12252,40,148,12097,150,62,12149,12004,12173,391,8,12178,101,45,12224,12102,12209,12157,12152,205,12220,12252,12183,116,273,12179,12268,139,12253,12133,12109,80,239,12166,329,12249,12275,120,44,66,158,85,187,12229,11912,99,108,12270,61,12232,12069,12220,110,76,12219,262,257,45,146,184,51,12278,120,12231,123,12134,12259,12122,401,12185,12221,12134,144,12247,12280,12281,221,114,12112,12268,12193,316,23,231,94,12169,22,134,11913,2,12230,263,12265,12158,239,12262,12181,24,169,12109,12202,12060,514,11965,31,12157,12284,12119,12032,12062,12170,121,12081,12161,244,12217,354,416,12234,12145,12004,21,265,251,12130,54,174,12220,12231,12286,12195,19,199,12141,12177,11938,158,12155,12082,136,184,321,12198,12229,12282,12201,328,48,89,207,238,81,12,136,12111,36,295,12174,12207,12,12193,122,257,183,47,12173,102,176,12143,12192,12220,208,5,151,402,12061,253,135,12245,12280,79,12129,284,12275,201,11827,12172,144,12226,12142,12257,12135,31,258,12135,12040,182,12213,12165,76,204,259,97,66,165,38,223,176,12134,12201,12146,64,151,12187,115,12112,11871,113,182,9,30,5,12090,31,217,12207,116,77,120,30,12254,40,325,12194,12122,11970,12126,230,11998,12283,145,121,12053,107,251,12156,12048,74,88,213,73,181,12195,12145,12204,12111,12185,12208,228,12212,12192,61,85,12155,12287,256,12245,239,12276,12094,12100,86,12188,12182,222,79,13,17,238,22,12182,164,93,139,12063,152,12157,12156,12081,122,12220,11999,12235,12142,16,12165,129,12261,85,12,12108,73,11950,12186,93,52,184,41,12154,11991,11875,4,157,12245,96,12157,12147,12255,12200,243,12055,12170,193,12045,209,232,12089,12232,178,12057,115,130,12131,82,11941,12165,33,35,87,51,12108,80,114,12181,173,2,12128,111,218,41,12211,12249,185,12109,157,117,268,301,12006,12008,12030,12278,221,356,195,12242,12206,12258,12280,228,12129,12144,92,238,76,12121,88,26,12141,194,23,12112,204,12215,139,12139,124];

        uint256[] memory s1 = new uint256[](512);
        uint256[] memory s2 = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            s1[i] = tmp_s1[i];
            s2[i] = tmp_s2[i];
        }
        uint256[] memory cs1 = _ZKNOX_NTT_Compact(s1);
        uint256[] memory cs2 = _ZKNOX_NTT_Compact(s2);
        // short hint
        uint256 hint = 7288;
        // message
        bytes memory message = "We are ZKNox";
        bytes memory salt =
            "\xf9\xa6\x6d\x13\x68\xb2\x08\xe2\x1f\x7c\x10\xd0\x4a\x3d\xbd\x4e\x36\x06\x33\xe5\xdb\x4b\x60\x26\x01\xc1\x4c\xea\x73\x7d\xb3\xdc\xf7\x22\x63\x2c\xc7\x78\x51\xcb";
        address recovered_pk_3;
        recovered_pk_3 = epervier.recover(message, salt, cs1, cs2, hint);
        assertEq(pk_3, recovered_pk_3);
    }

    function testVector4() public view {
        // public key
        // forgefmt: disable-next-line
        address pk_4 = address(728199263750570446964354330903202655824594974439);

        // signature s1
        // forgefmt: disable-next-line
        uint[512] memory tmp_s1 = [uint(217), 11945,330,201,79,211,298,16,401,11981,12173,50,43,11906,12264,46,33,46,46,12131,12049,11998,107,12133,11979,12259,32,12164,11739,12260,12210,12119,12231,36,12275,12204,12150,23,2,12188,12013,11881,12188,175,11785,12171,12080,21,97,141,12279,158,100,108,101,297,12138,12169,12109,12062,71,205,12167,261,40,12177,12058,4,226,23,12210,73,12178,210,11989,134,11961,26,214,12150,12123,101,2,23,38,12024,72,221,290,12143,12206,152,12187,156,23,12074,12221,12134,313,12215,210,12110,12239,36,12181,66,12136,2,12076,136,12246,12164,12145,114,12286,12219,165,262,12264,11,12164,12200,28,12193,12242,221,12035,111,31,76,11991,12255,12144,12251,119,12195,91,12242,114,56,135,12233,12031,13,86,113,105,12246,33,12231,115,130,12267,12064,12059,12176,12189,7,12245,50,12245,256,12285,11907,33,12077,132,12164,21,70,11960,346,31,82,12100,12275,129,61,279,51,12241,12032,12287,174,131,12129,153,12199,12110,189,12229,327,12135,12196,12280,67,139,170,33,12218,32,11,12288,252,12078,12175,149,12225,50,12175,136,12139,23,184,100,12073,12207,11946,12087,12240,12144,12046,124,17,82,468,12156,80,12168,12168,5,12193,12168,102,146,12217,27,12131,64,74,12121,116,45,138,12232,12186,12060,302,112,12152,115,45,12074,82,406,12229,12210,71,298,12201,8,126,12228,165,12195,12219,12188,12074,12060,12247,127,78,20,12164,12062,158,12094,227,63,12215,12027,12211,161,109,53,353,0,12194,12187,12078,12232,12121,12228,75,158,43,35,12242,162,310,220,12027,12230,256,165,36,12196,11973,11795,56,12207,11984,12212,12277,185,12160,152,16,12067,12213,94,325,187,15,12044,61,12185,12229,45,156,253,12264,12242,12217,42,12282,12099,50,12207,382,12163,12160,12157,12044,206,12151,78,12137,22,12160,104,12179,210,94,147,222,221,12252,42,12212,49,12216,139,193,20,64,12279,12182,12275,12195,129,11,1,1,12260,80,358,61,12270,12192,12272,12137,12236,161,16,12163,12048,12222,12178,12217,12258,11997,12261,121,440,193,12174,145,44,12051,27,196,144,219,11,12287,12044,42,198,12144,12020,208,249,304,4,12250,11847,12159,16,62,12285,208,27,12142,12143,11982,54,12239,12209,12149,16,12042,24,12249,12195,12165,121,12287,33,12243,22,95,94,71,123,156,12052,176,12147,102,12234,240,12197,120,12106,116,330,209,352,185,12222,20,250,12125,12252,12169,118,12287,12160,159,12198,108,29,12282,12237,12250,12194,12224,58,189,283,111,116,12271,12166,12022,103,222,12151,77,12252,170,73,12094,73,236,12162,120,129,25,380,262,164,129,13,127,12210,12239,12277,330,12152,50];

        // signature s2
        // forgefmt: disable-next-line
        uint[512] memory tmp_s2 = [uint(12175), 169,61,11841,12272,83,12192,12213,12076,113,54,124,277,12263,12167,92,68,36,12238,12157,12252,12113,12241,12057,151,12231,127,28,252,63,12183,21,12278,213,144,195,12250,114,12227,12238,149,137,71,12277,107,109,11699,327,12232,12101,107,12073,259,150,37,12109,63,12285,12226,12119,12193,12212,11,123,165,149,12108,28,12118,126,76,87,12066,194,298,12235,11,12156,12248,142,12245,12286,29,12069,66,12154,104,29,4,31,34,12158,36,11987,217,12267,12284,12260,12192,11965,11949,79,127,26,12088,12179,48,12200,99,12264,162,196,11896,17,12288,12051,12196,12217,12185,263,154,12128,11976,12063,12227,12258,167,354,12129,12253,69,12126,50,114,11912,107,11915,262,12121,25,4,93,16,220,12226,12128,12248,12284,12226,12040,12259,243,171,373,12119,12190,33,67,12249,12231,12155,106,12228,12127,154,12120,11884,7,149,73,12179,12185,11895,12210,395,39,12045,12210,430,210,12143,12217,11986,11935,12187,12254,11795,12100,12225,4,12000,99,74,12152,12180,12175,11950,12054,82,12248,203,12085,485,12059,206,2,54,47,52,12199,11997,461,12234,12212,74,12129,257,12216,12176,12120,54,11912,412,118,12100,78,12078,180,12244,12111,141,12173,12239,11941,282,12178,91,12010,105,115,12182,12123,12196,12148,12178,12252,275,87,14,12157,11845,12090,12239,279,83,11968,149,119,12271,12275,157,174,12165,44,12087,398,12262,42,12241,212,410,12080,77,12066,11838,83,14,12121,12250,96,116,12096,12066,346,12050,331,12261,111,30,2,12286,80,12235,217,175,12121,12197,79,176,28,12003,12,80,12222,34,149,12237,11994,2,204,223,12234,231,12115,430,12145,12,12269,68,419,139,231,12154,12265,11776,105,222,74,12125,12133,94,12249,295,12199,250,12093,12187,12110,12134,94,32,265,12123,364,130,54,104,90,188,180,91,12187,231,348,12034,84,12223,23,12240,11990,12167,12273,271,54,185,12217,11869,198,12083,36,12031,12187,12280,12189,12045,276,12267,12270,325,12283,12241,17,12211,12078,12127,12,12225,12242,103,12220,12255,12196,13,155,56,12228,422,12232,207,17,162,118,25,69,108,12176,12284,83,241,71,12278,11859,51,12241,73,7,60,95,28,12073,12225,12141,11987,120,194,12041,202,12165,24,12256,136,12147,86,12199,12218,12287,320,142,12229,134,12138,12081,12102,90,12162,12249,42,12042,143,12282,12090,76,97,352,141,12133,12099,12055,12186,283,12270,393,101,12151,11921,12278,12051,28,12280,12051,173,20,12137,28,82,11929,96,11963,12177,5,12255,82,12182,27,12238,12197,142,187,123,12155,12281,103,106,67,146,12103,68,12124,57,12199,146,12186,151,12260,70,18,12187,12109,12054,12175,12142,177];

        uint256[] memory s1 = new uint256[](512);
        uint256[] memory s2 = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            s1[i] = tmp_s1[i];
            s2[i] = tmp_s2[i];
        }
        uint256[] memory cs1 = _ZKNOX_NTT_Compact(s1);
        uint256[] memory cs2 = _ZKNOX_NTT_Compact(s2);
        // short hint
        uint256 hint = 2333;
        // message
        bytes memory message = "Practical security on the chain.";
        bytes memory salt =
            "\x14\x30\x45\xd7\x91\xcc\x85\xef\xf5\xb2\x19\x32\xf2\x38\x61\xbc\xf2\x3a\x52\xb5\xda\x67\xea\xf7\xba\xae\x0f\x5f\xb1\x36\x9d\xb7\x8f\x3a\xc4\x5f\x8c\x4a\xc5\x67";
        address recovered_pk_4;
        recovered_pk_4 = epervier.recover(message, salt, cs1, cs2, hint);
        assertEq(pk_4, recovered_pk_4);
    }
}
