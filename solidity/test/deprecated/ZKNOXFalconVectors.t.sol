// code generated using pythonref/generate_deprecated_falcon_test_vectors.py.
pragma solidity ^0.8.25;

import {Test, console} from "forge-std/Test.sol";
import "../../src/ZKNOX_NTT.sol";
import "../../src/deprecated/ZKNOX_falcon.sol";

contract ZKNOX_FalconTest is Test {
    ZKNOX_falcon falcon;
    //exemple of stateless initialisation, no external contract provided
    ZKNOX_NTT ntt = new ZKNOX_NTT(address(0), address(0), 12289, 12265);
    // forgefmt: disable-next-line
        uint256[1024] psi_rev = [uint256(1), 10810, 7143, 4043, 10984, 722, 5736, 8155, 3542, 8785, 9744, 3621, 10643, 1212, 3195, 5860, 7468, 2639, 9664, 11340, 11726, 9314, 9283, 9545, 5728, 7698, 5023, 5828, 8961, 6512, 7311, 1351, 2319, 11119, 11334, 11499, 9088, 3014, 5086, 10963, 4846, 9542, 9154, 3712, 4805, 8736, 11227, 9995, 3091, 12208, 7969, 11289, 9326, 7393, 9238, 2366, 11112, 8034, 10654, 9521, 12149, 10436, 7678, 11563, 1260, 4388, 4632, 6534, 2426, 334, 1428, 1696, 2013, 9000, 729, 3241, 2881, 3284, 7197, 10200, 8595, 7110, 10530, 8582, 3382, 11934, 9741, 8058, 3637, 3459, 145, 6747, 9558, 8357, 7399, 6378, 9447, 480, 1022, 9, 9821, 339, 5791, 544, 10616, 4278, 6958, 7300, 8112, 8705, 1381, 9764, 11336, 8541, 827, 5767, 2476, 118, 2197, 7222, 3949, 8993, 4452, 2396, 7935, 130, 2837, 6915, 2401, 442, 7188, 11222, 390, 773, 8456, 3778, 354, 4861, 9377, 5698, 5012, 9808, 2859, 11244, 1017, 7404, 1632, 7205, 27, 9223, 8526, 10849, 1537, 242, 4714, 8146, 9611, 3704, 5019, 11744, 1002, 5011, 5088, 8005, 7313, 10682, 8509, 11414, 9852, 3646, 6022, 2987, 9723, 10102, 6250, 9867, 11224, 2143, 11885, 7644, 1168, 5277, 11082, 3248, 493, 8193, 6845, 2381, 7952, 11854, 1378, 1912, 2166, 3915, 12176, 7370, 12129, 3149, 12286, 4437, 3636, 4938, 5291, 2704, 10863, 7635, 1663, 10512, 3364, 1689, 4057, 9018, 9442, 7875, 2174, 4372, 7247, 9984, 4053, 2645, 5195, 9509, 7394, 1484, 9042, 9603, 8311, 9320, 9919, 2865, 5332, 3510, 1630, 10163, 5407, 3186, 11136, 9405, 10040, 8241, 9890, 8889, 7098, 9153, 9289, 671, 3016, 243, 6730, 420, 10111, 1544, 3985, 4905, 3531, 476, 49, 1263, 5915, 1483, 9789, 10800, 10706, 6347, 1512, 350, 10474, 5383, 5369, 10232, 9087, 4493, 9551, 6421, 6554, 2655, 9280, 1693, 174, 723, 10314, 8532, 347, 2925, 8974, 11863, 1858, 4754, 3030, 4115, 2361, 10446, 2908, 218, 3434, 8760, 3963, 576, 6142, 9842, 1954, 10238, 9407, 10484, 3991, 8320, 9522, 156, 2281, 5876, 10258, 5333, 3772, 418, 5908, 11836, 5429, 7515, 7552, 1293, 295, 6099, 5766, 652, 8273, 4077, 8527, 9370, 325, 10885, 11143, 11341, 5990, 1159, 8561, 8240, 3329, 4298, 12121, 2692, 5961, 7183, 10327, 1594, 6167, 9734, 7105, 11089, 1360, 3956, 6170, 5297, 8210, 11231, 922, 441, 1958, 4322, 1112, 2078, 4046, 709, 9139, 1319, 4240, 8719, 6224, 11454, 2459, 683, 3656, 12225, 10723, 5782, 9341, 9786, 9166, 10542, 9235, 6803, 7856, 6370, 3834, 7032, 7048, 9369, 8120, 9162, 6821, 1010, 8807, 787, 5057, 4698, 4780, 8844, 12097, 1321, 4912, 10240, 677, 6415, 6234, 8953, 1323, 9523, 12237, 3174, 1579, 11858, 9784, 5906, 3957, 9450, 151, 10162, 12231, 12048, 3532, 11286, 1956, 7280, 11404, 6281, 3477, 6608, 142, 11184, 9445, 3438, 11314, 4212, 9260, 6695, 4782, 5886, 8076, 504, 2302, 11684, 11868, 8209, 3602, 6068, 8689, 3263, 6077, 7665, 7822, 7500, 6752, 4749, 4449, 6833, 12142, 8500, 6118, 8471, 1190, 9606, 3860, 5445, 7753, 11239, 5079, 9027, 2169, 11767, 7965, 4916, 8214, 5315, 11011, 9945, 1973, 6715, 8775, 11248, 5925, 11271, 654, 3565, 1702, 1987, 6760, 5206, 3199, 12233, 6136, 6427, 6874, 8646, 4948, 6152, 400, 10561, 5339, 5446, 3710, 6093, 468, 8301, 316, 11907, 10256, 8291, 3879, 1922, 10930, 6854, 973, 11035, 7, 1936, 845, 3723, 3154, 5054, 3285, 7929, 216, 50, 6763, 769, 767, 8484, 10076, 4153, 3120, 6184, 6203, 5646, 8348, 3753, 3536, 5370, 3229, 4730, 10583, 3929, 1282, 8717, 2021, 9457, 3944, 4099, 5604, 6759, 2171, 8809, 11024, 3007, 9344, 5349, 2633, 1406, 9057, 11996, 4855, 8520, 9348, 11722, 6627, 5289, 3837, 2595, 3221, 4273, 4050, 7082, 844, 5202, 11309, 11607, 4590, 7207, 8820, 6138, 7846, 8871, 4693, 2338, 9996, 11872, 1802, 1555, 5103, 10398, 7878, 10699, 1223, 9955, 11009, 614, 12265, 10918, 11385, 9804, 6742, 7250, 881, 11924, 1015, 10362, 5461, 9343, 2637, 7779, 4684, 3360, 7154, 63, 7302, 2373, 3670, 3808, 578, 5368, 11839, 1944, 7628, 11779, 9667, 6903, 5618, 10631, 5789, 3502, 5043, 826, 3090, 1398, 3065, 1506, 6586, 4483, 6389, 910, 7570, 11538, 4518, 3094, 1160, 4820, 2730, 5411, 10036, 1868, 2478, 9449, 4194, 3019, 10506, 7211, 7724, 4974, 7119, 2672, 11424, 1279, 189, 3116, 10526, 2209, 10759, 1694, 8420, 7866, 5832, 1350, 10555, 8474, 7014, 10499, 11038, 6879, 2035, 1040, 10407, 6164, 7519, 944, 5287, 8620, 6616, 9269, 6883, 7624, 4834, 2712, 9461, 4352, 8176, 72, 3840, 10447, 3451, 8195, 11048, 4378, 6508, 9244, 9646, 1095, 2873, 2827, 11498, 2434, 11169, 9754, 12268, 6481, 874, 9988, 170, 6639, 2307, 4289, 11641, 12139, 11259, 11823, 3821, 1681, 4649, 5969, 2929, 6026, 1573, 8443, 3793, 6226, 11787, 5118, 2602, 10388, 1849, 5776, 9021, 3795, 7988, 7766, 457, 12281, 11410, 9696, 982, 10013, 4218, 4390, 8835, 8531, 7785, 778, 530, 2626, 3578, 4697, 8823, 1701, 10243, 2940, 9332, 10808, 3317, 9757, 139, 3332, 343, 8841, 4538, 10381, 7078, 1866, 1208, 7562, 10584, 2450, 11873, 814, 716, 10179, 2164, 6873, 5412, 8080, 9011, 6296, 3515, 11851, 1218, 5061, 10753, 10568, 2429, 8186, 1373, 9307, 717, 8700, 8921, 4227, 4238, 11677, 8067, 1526, 11749, 12164, 3163, 4032, 6127, 7449, 1389, 10221, 4404, 11943, 3359, 9084, 5209, 1092, 3678, 4265, 10361, 464, 1826, 2926, 4489, 9118, 1136, 3449, 3708, 9051, 2065, 5826, 3495, 4564, 8755, 3961, 10533, 4145, 2275, 2461, 4267, 5653, 5063, 8113, 10771, 8524, 11014, 5508, 11113, 6555, 4860, 1125, 10844, 11158, 6302, 6693, 579, 3889, 9520, 3114, 6323, 212, 8314, 4883, 6454, 3087, 1417, 5676, 7784, 2257, 3744, 4963, 2528, 9233, 5102, 11877, 6701, 6444, 4924, 4781, 1014, 11841, 1327, 3607, 3942, 7057, 2717, 60, 3200, 10754, 5836, 7723, 2260, 68, 180, 4138, 7684, 2689, 10880, 7070, 204, 5509, 10821, 8308, 8882, 463, 10945, 9247, 9806, 10235, 4739, 8038, 6771, 1226, 9261, 5216, 11925, 9929, 11053, 9272, 7043, 4475, 3121, 4705, 1057, 9689, 11883, 10602, 146, 5268, 1403, 1804, 6094, 7100, 12050, 9389, 994, 4554, 4670, 11777, 5464, 4906, 3375, 9998, 8896, 4335, 7376, 3528, 3825, 8054, 9342, 8307, 636, 5609, 11667, 10552, 5672, 4499, 5598, 3344, 10397, 8665, 6565, 10964, 11260, 10344, 5959, 10141, 8330, 5797, 2442, 1248, 5115, 4939, 10975, 1744, 2894, 8635, 6599, 9834, 8342, 338, 3343, 8170, 1522, 10138, 12269, 5002, 4608, 5163, 4578, 377, 11914, 1620, 10453, 11864, 10104, 11897, 6085, 8122, 11251, 11366, 10058, 6197, 2800, 193, 506, 1255, 1392, 5784, 3276, 8951, 2212, 9615, 10347, 8881, 2575, 1165, 2776, 11111, 6811, 3511];
    // forgefmt: disable-next-line
        uint256[1024] psi_inv_rev = [uint256(1), 1479, 8246, 5146, 4134, 6553, 11567, 1305, 6429, 9094, 11077, 1646, 8668, 2545, 3504, 8747, 10938, 4978, 5777, 3328, 6461, 7266, 4591, 6561, 2744, 3006, 2975, 563, 949, 2625, 9650, 4821, 726, 4611, 1853, 140, 2768, 1635, 4255, 1177, 9923, 3051, 4896, 2963, 1000, 4320, 81, 9198, 2294, 1062, 3553, 7484, 8577, 3135, 2747, 7443, 1326, 7203, 9275, 3201, 790, 955, 1170, 9970, 5374, 9452, 12159, 4354, 9893, 7837, 3296, 8340, 5067, 10092, 12171, 9813, 6522, 11462, 3748, 953, 2525, 10908, 3584, 4177, 4989, 5331, 8011, 1673, 11745, 6498, 11950, 2468, 12280, 11267, 11809, 2842, 5911, 4890, 3932, 2731, 5542, 12144, 8830, 8652, 4231, 2548, 355, 8907, 3707, 1759, 5179, 3694, 2089, 5092, 9005, 9408, 9048, 11560, 3289, 10276, 10593, 10861, 11955, 9863, 5755, 7657, 7901, 11029, 11813, 8758, 7384, 8304, 10745, 2178, 11869, 5559, 12046, 9273, 11618, 3000, 3136, 5191, 3400, 2399, 4048, 2249, 2884, 1153, 9103, 6882, 2126, 10659, 8779, 6957, 9424, 2370, 2969, 3978, 2686, 3247, 10805, 4895, 2780, 7094, 9644, 8236, 2305, 5042, 7917, 10115, 4414, 2847, 3271, 8232, 10600, 8925, 1777, 10626, 4654, 1426, 9585, 6998, 7351, 8653, 7852, 3, 9140, 160, 4919, 113, 8374, 10123, 10377, 10911, 435, 4337, 9908, 5444, 4096, 11796, 9041, 1207, 7012, 11121, 4645, 404, 10146, 1065, 2422, 6039, 2187, 2566, 9302, 6267, 8643, 2437, 875, 3780, 1607, 4976, 4284, 7201, 7278, 11287, 545, 7270, 8585, 2678, 4143, 7575, 12047, 10752, 1440, 3763, 3066, 12262, 5084, 10657, 4885, 11272, 1045, 9430, 2481, 7277, 6591, 2912, 7428, 11935, 8511, 3833, 11516, 11899, 1067, 5101, 11847, 9888, 1254, 11316, 5435, 1359, 10367, 8410, 3998, 2033, 382, 11973, 3988, 11821, 6196, 8579, 6843, 6950, 1728, 11889, 6137, 7341, 3643, 5415, 5862, 6153, 56, 9090, 7083, 5529, 10302, 10587, 8724, 11635, 1018, 6364, 1041, 3514, 5574, 10316, 2344, 1278, 6974, 4075, 7373, 4324, 522, 10120, 3262, 7210, 1050, 4536, 6844, 8429, 2683, 11099, 3818, 6171, 3789, 147, 5456, 7840, 7540, 5537, 4789, 4467, 4624, 6212, 9026, 3600, 6221, 8687, 4080, 421, 605, 9987, 11785, 4213, 6403, 7507, 5594, 3029, 8077, 975, 8851, 2844, 1105, 12147, 5681, 8812, 6008, 885, 5009, 10333, 1003, 8757, 241, 58, 2127, 12138, 2839, 8332, 6383, 2505, 431, 10710, 9115, 52, 2766, 10966, 3336, 6055, 5874, 11612, 2049, 7377, 10968, 192, 3445, 7509, 7591, 7232, 11502, 3482, 11279, 5468, 3127, 4169, 2920, 5241, 5257, 8455, 5919, 4433, 5486, 3054, 1747, 3123, 2503, 2948, 6507, 1566, 64, 8633, 11606, 9830, 835, 6065, 3570, 8049, 10970, 3150, 11580, 8243, 10211, 11177, 7967, 10331, 11848, 11367, 1058, 4079, 6992, 6119, 8333, 10929, 1200, 5184, 2555, 6122, 10695, 1962, 5106, 6328, 9597, 168, 7991, 8960, 4049, 3728, 11130, 6299, 948, 1146, 1404, 11964, 2919, 3762, 8212, 4016, 11637, 6523, 6190, 11994, 10996, 4737, 4774, 6860, 453, 6381, 11871, 8517, 6956, 2031, 6413, 10008, 12133, 2767, 3969, 8298, 1805, 2882, 2051, 10335, 2447, 6147, 11713, 8326, 3529, 8855, 12071, 9381, 1843, 9928, 8174, 9259, 7535, 10431, 426, 3315, 9364, 11942, 3757, 1975, 11566, 12115, 10596, 3009, 9634, 5735, 5868, 2738, 7796, 3202, 2057, 6920, 6906, 1815, 11939, 10777, 5942, 1583, 1489, 2500, 10806, 6374, 11026, 12240, 8778, 5478, 1178, 9513, 11124, 9714, 3408, 1942, 2674, 10077, 3338, 9013, 6505, 10897, 11034, 11783, 12096, 9489, 6092, 2231, 923, 1038, 4167, 6204, 392, 2185, 425, 1836, 10669, 375, 11912, 7711, 7126, 7681, 7287, 20, 2151, 10767, 4119, 8946, 11951, 3947, 2455, 5690, 3654, 9395, 10545, 1314, 7350, 7174, 11041, 9847, 6492, 3959, 2148, 6330, 1945, 1029, 1325, 5724, 3624, 1892, 8945, 6691, 7790, 6617, 1737, 622, 6680, 11653, 3982, 2947, 4235, 8464, 8761, 4913, 7954, 3393, 2291, 8914, 7383, 6825, 512, 7619, 7735, 11295, 2900, 239, 5189, 6195, 10485, 10886, 7021, 12143, 1687, 406, 2600, 11232, 7584, 9168, 7814, 5246, 3017, 1236, 2360, 364, 7073, 3028, 11063, 5518, 4251, 7550, 2054, 2483, 3042, 1344, 11826, 3407, 3981, 1468, 6780, 12085, 5219, 1409, 9600, 4605, 8151, 12109, 12221, 10029, 4566, 6453, 1535, 9089, 12229, 9572, 5232, 8347, 8682, 10962, 448, 11275, 7508, 7365, 5845, 5588, 412, 7187, 3056, 9761, 7326, 8545, 10032, 4505, 6613, 10872, 9202, 5835, 7406, 3975, 12077, 5966, 9175, 2769, 8400, 11710, 5596, 5987, 1131, 1445, 11164, 7429, 5734, 1176, 6781, 1275, 3765, 1518, 4176, 7226, 6636, 8022, 9828, 10014, 8144, 1756, 8328, 3534, 7725, 8794, 6463, 10224, 3238, 8581, 8840, 11153, 3171, 7800, 9363, 10463, 11825, 1928, 8024, 8611, 11197, 7080, 3205, 8930, 346, 7885, 2068, 10900, 4840, 6162, 8257, 9126, 125, 540, 10763, 4222, 612, 8051, 8062, 3368, 3589, 11572, 2982, 10916, 4103, 9860, 1721, 1536, 7228, 11071, 438, 8774, 5993, 3278, 4209, 6877, 5416, 10125, 2110, 11573, 11475, 416, 9839, 1705, 4727, 11081, 10423, 5211, 1908, 7751, 3448, 11946, 8957, 12150, 2532, 8972, 1481, 2957, 9349, 2046, 10588, 3466, 7592, 8711, 9663, 11759, 11511, 4504, 3758, 3454, 7899, 8071, 2276, 11307, 2593, 879, 8, 11832, 4523, 4301, 8494, 3268, 6513, 10440, 1901, 9687, 7171, 502, 6063, 8496, 3846, 10716, 6263, 9360, 6320, 7640, 10608, 8468, 466, 1030, 150, 648, 8000, 9982, 5650, 12119, 2301, 11415, 5808, 21, 2535, 1120, 9855, 791, 9462, 9416, 11194, 2643, 3045, 5781, 7911, 1241, 4094, 8838, 1842, 8449, 12217, 4113, 7937, 2828, 9577, 7455, 4665, 5406, 3020, 5673, 3669, 7002, 11345, 4770, 6125, 1882, 11249, 10254, 5410, 1251, 1790, 5275, 3815, 1734, 10939, 6457, 4423, 3869, 10595, 1530, 10080, 1763, 9173, 12100, 11010, 865, 9617, 5170, 7315, 4565, 5078, 1783, 9270, 8095, 2840, 9811, 10421, 2253, 6878, 9559, 7469, 11129, 9195, 7771, 751, 4719, 11379, 5900, 7806, 5703, 10783, 9224, 10891, 9199, 11463, 7246, 8787, 6500, 1658, 6671, 5386, 2622, 510, 4661, 10345, 450, 6921, 11711, 8481, 8619, 9916, 4987, 12226, 5135, 8929, 7605, 4510, 9652, 2946, 6828, 1927, 11274, 365, 11408, 5039, 5547, 2485, 904, 1371, 24, 11675, 1280, 2334, 11066, 1590, 4411, 1891, 7186, 10734, 10487, 417, 2293, 9951, 7596, 3418, 4443, 6151, 3469, 5082, 7699, 682, 980, 7087, 11445, 5207, 8239, 8016, 9068, 9694, 8452, 7000, 5662, 567, 2941, 3769, 7434, 293, 3232, 10883, 9656, 6940, 2945, 9282, 1265, 3480, 10118, 5530, 6685, 8190, 8345, 2832, 10268, 3572, 11007, 8360, 1706, 7559, 9060, 6919, 8753, 8536, 3941, 6643, 6086, 6105, 9169, 8136, 2213, 3805, 11522, 11520, 5526, 12239, 12073, 4360, 9004, 7235, 9135, 8566, 11444, 10353, 12282];

    //stateful initialisation
    function setUp() public {
        bytes memory bytecode_psirev = abi.encodePacked(psi_rev);

        address a_psirev; //address of the precomputations bytecode contract
        a_psirev = address(uint160(0xcaca)); //here it is etched, use create in the future
        vm.etch(a_psirev, bytecode_psirev); //pushing psirev bytecode into contract todo : replace with create

        bytes memory bytecode_psiInvrev = abi.encodePacked(psi_inv_rev);

        address a_psiInvrev; //address of the precomputations bytecode contract
        a_psiInvrev = address(uint160(0xa5a5)); //here it is etched, use create in the future
        vm.etch(a_psiInvrev, bytecode_psiInvrev); //pushing psirev bytecode into contract todo : replace with create

        ntt.update(a_psirev, a_psiInvrev, 12289, 12265); //update ntt with outer contract

        falcon = new ZKNOX_falcon(ntt);
    }

    function testVector0() public view {
        // public key
        // forgefmt: disable-next-line
        uint[512] memory tmp_pk = [uint(8494), 9875,5391,1879,708,7214,6161,7426,130,4397,5498,8631,2407,9977,1931,7029,2352,991,9225,9158,8285,955,12093,4942,2664,778,3383,11334,11105,10565,3474,7022,2706,1183,6455,1113,1385,4181,5984,1364,6193,7574,2703,11943,2783,9363,10213,6442,10177,6408,8584,2766,1171,7190,253,3679,2625,7796,8043,5703,2065,459,1063,5107,475,7421,2950,1363,9991,2222,1222,2148,12181,10486,7239,2220,8612,10147,11233,10557,3816,7607,2043,9737,1487,6402,7156,4425,11155,8706,2669,9984,4688,8809,3126,5346,8576,11683,12012,2541,7468,3700,12043,6636,274,7905,1637,11874,8091,6388,2132,3454,5363,11278,8138,4104,3664,6955,7423,9252,5243,717,9654,11089,2662,5813,2725,3997,7882,8147,1972,5360,9958,6537,9866,1837,9724,2515,6909,11077,7382,8940,10578,66,991,11249,12078,5661,297,4236,5240,10615,8894,6752,1599,8903,4789,8794,721,143,708,3893,9853,10975,12240,4519,3983,9215,420,8767,11835,10220,3914,10930,3539,11989,4395,2901,1427,7668,5489,4941,6674,12249,5831,3530,12171,10261,775,894,11564,5706,3810,11670,9294,9899,5872,9997,9218,8757,7970,11087,3323,4779,9473,12172,9576,2989,1404,11193,376,7670,9520,11007,10252,55,8952,3523,8081,2097,6848,11377,6165,5777,12044,12000,8941,1892,8951,4426,8954,9118,4116,7340,10060,9311,7351,11995,9476,6246,2151,1574,4104,12141,880,3709,2410,8871,1771,8281,11433,8802,5517,7260,8932,2340,11134,8858,1110,2811,6777,10364,9649,7387,1996,6561,7065,2190,12094,11677,10503,2145,11418,10041,9467,109,5395,5299,7200,11203,3966,6117,1065,3458,5521,12182,6969,1134,7108,648,285,8703,100,12113,6653,7377,6804,1717,9467,10055,4009,3545,7482,28,4253,47,12043,7057,1286,10754,3347,3280,3738,3323,7715,6500,350,12245,11148,1705,6450,336,2873,176,9059,2491,7546,2877,7417,9768,2526,2893,551,9462,1754,3452,7819,10010,844,4087,8473,5019,9155,12253,8338,10746,6837,9485,7469,4277,8497,10631,2810,5104,5895,7050,298,1144,3489,7210,11509,4913,7844,1396,9705,11371,1646,3089,7918,12187,6710,106,6810,3783,9423,180,3100,228,6112,9775,3407,10474,3340,232,11654,454,2551,6891,10879,2473,6594,9791,6870,5661,5877,8893,3075,4752,1135,3859,2495,5101,1384,5825,5539,1734,4694,7444,8731,4653,7432,7238,9267,1719,9790,6698,6049,2948,4962,8614,2381,2866,6384,11786,775,4155,7072,9670,2011,4684,6722,1077,7784,7614,217,90,9505,4379,1799,1159,6056,11386,5041,3383,102,12112,9520,8228,9636,668,210,4688,3381,2281,2261,11425,7820,2252,9565,7195,8650,7037,11164,9071,1220,1974,6262,8288,4926,1069,206,7288,4139,4020,728,10582,10621,4568,5054,9984,6837,236,7164,9106,9007,3765,700,4173,1524,11782,6690,9860,2926,538,11340,6889,10459,7255,7705,6244,10579,7541,10909,11397,9092,115,2610,5294,10509,3454,4985,2496];
        uint256[] memory pk = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            pk[i] = tmp_pk[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint[512] memory tmp_s2 = [uint(170), 11878,88,12083,12279,18,18,12138,12271,92,12098,321,225,12046,311,107,31,252,12186,207,12148,172,128,12200,122,12207,140,141,11982,12158,96,175,12094,168,12241,12147,1,142,14,11996,70,9,38,12,12002,12153,27,10,40,12274,12272,155,12243,12253,125,256,12236,12203,247,97,12120,103,21,12207,12099,108,12252,12214,45,183,12261,48,183,143,240,11822,70,65,35,12242,6,12123,12267,51,229,12215,23,19,239,68,12268,12165,42,180,12269,12179,12217,138,12248,12136,177,12265,95,38,12259,12197,145,11880,12075,12176,12110,50,224,61,198,98,12104,11928,32,71,54,45,175,84,12248,163,399,12219,106,17,12109,175,12250,71,24,123,224,12004,357,12,94,48,251,44,85,131,61,110,75,12162,149,128,55,65,12028,12262,12039,197,207,111,12121,12177,12244,12221,12256,125,12263,12074,12155,186,119,12134,48,12207,176,12137,0,432,12132,12053,12171,99,12071,12101,12242,12246,12155,52,12217,12039,12276,12209,80,12227,352,72,91,12135,43,38,12009,12203,12203,12139,12264,85,12213,75,12162,12143,225,12274,83,12109,12159,12279,12281,12136,12233,118,197,12186,55,143,12123,12147,12206,149,208,12164,26,86,407,238,47,12011,12075,11926,12273,12260,12265,214,55,12287,92,89,128,12063,42,12174,423,11905,12252,12198,12174,231,12115,12221,12217,12286,17,12247,12111,22,12194,12250,12220,202,12263,235,198,12159,209,12243,313,154,12212,12249,133,10,15,45,182,12195,57,102,12092,12092,152,98,12246,12168,20,45,397,11952,12281,206,188,12094,423,12057,43,79,74,88,12117,12060,12173,12092,12194,184,12192,44,9,152,130,2,12188,12281,124,12278,296,12243,311,11994,11822,12159,45,57,154,165,124,12251,244,12215,124,12193,12263,94,12241,12128,231,30,104,12246,12160,12113,12142,152,199,60,12101,12227,215,12263,12237,11966,12227,47,108,12078,12286,12266,11976,33,212,12110,12084,12041,133,4,277,12082,136,12216,252,12090,11965,377,17,117,12212,321,12205,221,69,12212,12126,11990,12061,12272,62,12252,12162,172,12272,12272,12078,105,85,12096,12068,12209,12180,42,12272,12203,12276,12228,85,198,12097,302,12103,198,12119,12259,12220,128,118,159,12207,12061,12266,298,131,38,12116,4,12204,32,3,12168,180,168,12216,12261,16,40,12268,221,322,248,12151,12227,12283,64,12174,12162,299,12267,12219,12184,94,12186,12150,93,12188,106,12083,12114,288,339,12208,95,20,55,157,128,200,12087,12203,69,12288,152,11929,12191,12144,12182,12038,12100,55,12113,12166,185,316,12044,74,12025,247,12009,63,12040,12272,12221,6,12281,114,12149,173,12161,12244,12143,584,12246,12195,41,12240,169,417,127];
        ZKNOX_falcon.Signature memory sig;
        sig.s2 = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            sig.s2[i] = tmp_s2[i];
        }
        // message
        bytes memory message = "My name is Renaud";
        sig.salt =
            "\x46\xb9\xdd\x2b\x0b\xa8\x8d\x13\x23\x3b\x3f\xeb\x74\x3e\xeb\x24\x3f\xcd\x52\xea\x62\xb8\x1b\x82\xb5\x0c\x27\x64\x6e\xd5\x76\x2f\xd7\x5d\xc4\xdd\xd8\xc0\xf2\x00";
        bool result = falcon.verify(message, sig, pk, true);
        assertEq(true, result);
    }

    function testVector1() public view {
        // public key
        // forgefmt: disable-next-line
        uint[512] memory tmp_pk = [uint(8494), 9875,5391,1879,708,7214,6161,7426,130,4397,5498,8631,2407,9977,1931,7029,2352,991,9225,9158,8285,955,12093,4942,2664,778,3383,11334,11105,10565,3474,7022,2706,1183,6455,1113,1385,4181,5984,1364,6193,7574,2703,11943,2783,9363,10213,6442,10177,6408,8584,2766,1171,7190,253,3679,2625,7796,8043,5703,2065,459,1063,5107,475,7421,2950,1363,9991,2222,1222,2148,12181,10486,7239,2220,8612,10147,11233,10557,3816,7607,2043,9737,1487,6402,7156,4425,11155,8706,2669,9984,4688,8809,3126,5346,8576,11683,12012,2541,7468,3700,12043,6636,274,7905,1637,11874,8091,6388,2132,3454,5363,11278,8138,4104,3664,6955,7423,9252,5243,717,9654,11089,2662,5813,2725,3997,7882,8147,1972,5360,9958,6537,9866,1837,9724,2515,6909,11077,7382,8940,10578,66,991,11249,12078,5661,297,4236,5240,10615,8894,6752,1599,8903,4789,8794,721,143,708,3893,9853,10975,12240,4519,3983,9215,420,8767,11835,10220,3914,10930,3539,11989,4395,2901,1427,7668,5489,4941,6674,12249,5831,3530,12171,10261,775,894,11564,5706,3810,11670,9294,9899,5872,9997,9218,8757,7970,11087,3323,4779,9473,12172,9576,2989,1404,11193,376,7670,9520,11007,10252,55,8952,3523,8081,2097,6848,11377,6165,5777,12044,12000,8941,1892,8951,4426,8954,9118,4116,7340,10060,9311,7351,11995,9476,6246,2151,1574,4104,12141,880,3709,2410,8871,1771,8281,11433,8802,5517,7260,8932,2340,11134,8858,1110,2811,6777,10364,9649,7387,1996,6561,7065,2190,12094,11677,10503,2145,11418,10041,9467,109,5395,5299,7200,11203,3966,6117,1065,3458,5521,12182,6969,1134,7108,648,285,8703,100,12113,6653,7377,6804,1717,9467,10055,4009,3545,7482,28,4253,47,12043,7057,1286,10754,3347,3280,3738,3323,7715,6500,350,12245,11148,1705,6450,336,2873,176,9059,2491,7546,2877,7417,9768,2526,2893,551,9462,1754,3452,7819,10010,844,4087,8473,5019,9155,12253,8338,10746,6837,9485,7469,4277,8497,10631,2810,5104,5895,7050,298,1144,3489,7210,11509,4913,7844,1396,9705,11371,1646,3089,7918,12187,6710,106,6810,3783,9423,180,3100,228,6112,9775,3407,10474,3340,232,11654,454,2551,6891,10879,2473,6594,9791,6870,5661,5877,8893,3075,4752,1135,3859,2495,5101,1384,5825,5539,1734,4694,7444,8731,4653,7432,7238,9267,1719,9790,6698,6049,2948,4962,8614,2381,2866,6384,11786,775,4155,7072,9670,2011,4684,6722,1077,7784,7614,217,90,9505,4379,1799,1159,6056,11386,5041,3383,102,12112,9520,8228,9636,668,210,4688,3381,2281,2261,11425,7820,2252,9565,7195,8650,7037,11164,9071,1220,1974,6262,8288,4926,1069,206,7288,4139,4020,728,10582,10621,4568,5054,9984,6837,236,7164,9106,9007,3765,700,4173,1524,11782,6690,9860,2926,538,11340,6889,10459,7255,7705,6244,10579,7541,10909,11397,9092,115,2610,5294,10509,3454,4985,2496];
        uint256[] memory pk = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            pk[i] = tmp_pk[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint[512] memory tmp_s2 = [uint(12241), 12216,12163,12208,61,12043,387,10,12185,158,253,218,421,225,12191,12106,12283,12191,177,27,48,138,12224,45,44,40,12232,329,12236,156,95,162,12115,30,69,280,11980,258,119,91,19,25,12165,122,12059,12082,0,188,12285,11872,167,12283,12276,12243,239,12183,33,12174,12264,12032,12251,12160,99,12073,12231,12089,12193,113,108,184,12173,12237,11942,12056,12259,41,12269,12163,12262,221,12148,12233,12148,66,12180,12158,67,11980,12267,157,12093,80,485,64,74,12133,12223,12215,12187,12250,383,253,12198,11900,12210,12200,12129,5,12219,59,12271,120,12237,137,11976,12081,259,29,12229,11984,65,213,12144,12205,130,12077,111,91,12268,12223,12288,81,91,148,197,66,12088,11936,12097,300,12061,119,121,104,200,217,12250,12220,2,84,94,12091,233,144,12238,12196,169,18,67,251,12174,12086,11890,12268,300,12082,378,6,198,12134,12019,12263,12,82,12186,17,12254,12123,12146,12047,70,12093,143,12086,12112,12164,321,119,80,12171,11810,12218,12240,173,12122,150,11964,12187,200,12194,12237,7,39,105,45,12189,66,12223,122,12148,12239,12077,12233,375,1,11982,137,12169,42,80,141,12108,20,116,164,12259,12267,11932,12189,183,12237,12223,204,156,130,12042,187,12257,12149,12208,114,12119,335,12225,12163,111,12225,11987,12028,11889,186,12015,78,12252,12116,12284,123,12233,77,27,97,184,13,12152,103,91,12221,12232,12115,326,2,58,280,111,314,101,10,12075,114,423,11984,12000,12048,12196,12153,4,178,12191,368,12112,231,12044,56,11895,106,12201,12230,140,12229,12242,12156,11935,67,254,211,12283,12241,12065,179,232,10,12111,46,187,218,12116,91,12241,12285,69,135,56,12242,12087,5,231,144,12100,12265,60,12255,70,131,12227,12167,12259,51,154,12188,157,12137,159,12062,171,83,12286,12047,91,12223,12216,171,12281,243,52,287,12222,12267,12157,12274,27,12256,11938,138,128,12250,12113,12196,232,12211,79,157,12268,12017,12158,12193,51,238,12211,12193,12147,128,100,12234,31,95,11875,12238,12054,11998,12157,12241,244,12204,3,124,192,39,166,12239,144,12095,12188,12144,55,12076,12242,71,12158,12241,21,12047,229,12046,0,12143,128,307,244,33,47,274,30,226,12144,107,45,12276,11998,50,0,12252,257,11978,12270,88,17,12098,12116,22,12017,12243,345,11991,12133,12212,94,12186,12205,45,12210,28,51,171,20,12062,12136,11929,12145,123,54,12102,173,53,12258,11981,12178,123,12097,12243,46,12206,12132,144,175,12153,11916,207,205,12022,187,209,301,12223,11,185,12194,204,58,84,106,12078,70,20,12010,225,11807,80,12110,12235,497,12003,12068,384,253,184,206,155,156,12250,26,12198,12159];
        ZKNOX_falcon.Signature memory sig;
        sig.s2 = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            sig.s2[i] = tmp_s2[i];
        }
        // message
        bytes memory message = "My name is Simon";
        sig.salt =
            "\x34\x9e\xc7\x55\x46\xf5\x8f\xb7\xc2\x77\x5c\x38\x46\x2c\x50\x10\xd8\x46\xc1\x85\xc1\x51\x11\xe5\x95\x52\x2a\x6b\xcd\x16\xcf\x86\xf3\xd1\x22\x10\x9e\x3b\x1f\xdd";
        bool result = falcon.verify(message, sig, pk, true);
        assertEq(true, result);
    }

    function testVector2() public view {
        // public key
        // forgefmt: disable-next-line
        uint[512] memory tmp_pk = [uint(8494), 9875,5391,1879,708,7214,6161,7426,130,4397,5498,8631,2407,9977,1931,7029,2352,991,9225,9158,8285,955,12093,4942,2664,778,3383,11334,11105,10565,3474,7022,2706,1183,6455,1113,1385,4181,5984,1364,6193,7574,2703,11943,2783,9363,10213,6442,10177,6408,8584,2766,1171,7190,253,3679,2625,7796,8043,5703,2065,459,1063,5107,475,7421,2950,1363,9991,2222,1222,2148,12181,10486,7239,2220,8612,10147,11233,10557,3816,7607,2043,9737,1487,6402,7156,4425,11155,8706,2669,9984,4688,8809,3126,5346,8576,11683,12012,2541,7468,3700,12043,6636,274,7905,1637,11874,8091,6388,2132,3454,5363,11278,8138,4104,3664,6955,7423,9252,5243,717,9654,11089,2662,5813,2725,3997,7882,8147,1972,5360,9958,6537,9866,1837,9724,2515,6909,11077,7382,8940,10578,66,991,11249,12078,5661,297,4236,5240,10615,8894,6752,1599,8903,4789,8794,721,143,708,3893,9853,10975,12240,4519,3983,9215,420,8767,11835,10220,3914,10930,3539,11989,4395,2901,1427,7668,5489,4941,6674,12249,5831,3530,12171,10261,775,894,11564,5706,3810,11670,9294,9899,5872,9997,9218,8757,7970,11087,3323,4779,9473,12172,9576,2989,1404,11193,376,7670,9520,11007,10252,55,8952,3523,8081,2097,6848,11377,6165,5777,12044,12000,8941,1892,8951,4426,8954,9118,4116,7340,10060,9311,7351,11995,9476,6246,2151,1574,4104,12141,880,3709,2410,8871,1771,8281,11433,8802,5517,7260,8932,2340,11134,8858,1110,2811,6777,10364,9649,7387,1996,6561,7065,2190,12094,11677,10503,2145,11418,10041,9467,109,5395,5299,7200,11203,3966,6117,1065,3458,5521,12182,6969,1134,7108,648,285,8703,100,12113,6653,7377,6804,1717,9467,10055,4009,3545,7482,28,4253,47,12043,7057,1286,10754,3347,3280,3738,3323,7715,6500,350,12245,11148,1705,6450,336,2873,176,9059,2491,7546,2877,7417,9768,2526,2893,551,9462,1754,3452,7819,10010,844,4087,8473,5019,9155,12253,8338,10746,6837,9485,7469,4277,8497,10631,2810,5104,5895,7050,298,1144,3489,7210,11509,4913,7844,1396,9705,11371,1646,3089,7918,12187,6710,106,6810,3783,9423,180,3100,228,6112,9775,3407,10474,3340,232,11654,454,2551,6891,10879,2473,6594,9791,6870,5661,5877,8893,3075,4752,1135,3859,2495,5101,1384,5825,5539,1734,4694,7444,8731,4653,7432,7238,9267,1719,9790,6698,6049,2948,4962,8614,2381,2866,6384,11786,775,4155,7072,9670,2011,4684,6722,1077,7784,7614,217,90,9505,4379,1799,1159,6056,11386,5041,3383,102,12112,9520,8228,9636,668,210,4688,3381,2281,2261,11425,7820,2252,9565,7195,8650,7037,11164,9071,1220,1974,6262,8288,4926,1069,206,7288,4139,4020,728,10582,10621,4568,5054,9984,6837,236,7164,9106,9007,3765,700,4173,1524,11782,6690,9860,2926,538,11340,6889,10459,7255,7705,6244,10579,7541,10909,11397,9092,115,2610,5294,10509,3454,4985,2496];
        uint256[] memory pk = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            pk[i] = tmp_pk[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint[512] memory tmp_s2 = [uint(50), 78,12214,12267,12165,12019,61,215,59,73,12032,53,166,12135,43,12225,249,12204,170,187,78,160,119,12102,11999,12008,9,18,12257,119,12169,12004,101,359,16,12192,12083,12143,85,271,158,25,131,26,110,234,125,105,248,160,12072,167,12113,252,11892,70,38,75,12284,12167,12093,121,12035,12098,325,12189,12280,70,11960,26,220,70,12226,309,12193,12,12259,75,217,252,12232,12072,12262,12212,12270,59,246,12267,108,183,12268,12074,12241,8,12251,12276,4,238,235,197,12210,12269,79,11892,25,216,167,169,62,168,173,280,12066,167,12164,12107,108,111,12227,2,62,197,12250,74,157,153,32,66,98,12090,153,12223,153,12160,170,12220,41,11985,12213,12092,12171,12039,14,29,12157,2,12153,12152,311,12073,245,111,67,149,66,12145,12270,74,12148,164,159,12230,1,12259,142,79,12001,98,189,233,53,210,12103,12280,169,12106,63,211,12115,12035,11795,66,181,12232,12161,12265,144,107,12109,12269,11930,12173,159,12266,12283,7,184,126,320,101,12287,15,214,140,40,15,42,12015,12106,12244,232,12140,11942,168,11887,12155,12054,12212,85,12053,70,71,12268,12101,12250,12272,325,151,12020,12128,9,53,12238,11922,79,12232,34,70,12132,207,12242,12276,12243,12018,341,307,11782,3,310,114,118,87,258,12171,12222,132,63,12159,12173,12171,12168,10,41,91,12277,200,195,12240,12194,12247,283,0,12179,12235,174,12275,12216,12136,12095,209,224,12159,12239,12266,11972,171,12064,12133,11930,12141,1,12056,12262,198,40,20,12074,12266,190,12196,63,49,304,12269,178,12163,12218,74,210,12157,12278,157,130,191,155,130,12187,186,12208,199,12031,12098,11978,82,12101,174,12065,98,320,12248,157,12132,111,125,6,12171,12108,120,12236,147,113,11971,268,12278,12076,36,243,12247,12090,12243,12285,110,228,12217,12254,12250,125,88,12183,12174,50,12220,12119,12201,109,187,34,12261,12262,79,12126,12215,152,63,11921,98,12193,91,12024,103,12243,11,12132,115,300,131,12236,22,12156,12123,11802,12188,170,12198,38,12199,12146,12262,177,58,208,12013,12266,12110,12186,150,94,12284,162,148,8,172,271,66,60,13,12159,92,101,11,256,263,12121,12169,12135,191,12147,36,11962,12193,12246,12186,45,8,12246,14,341,186,12167,12090,52,12250,296,12155,210,12208,12262,42,12284,12263,12132,418,406,41,12134,12111,12151,12274,130,47,126,12191,122,11,12152,11981,65,12213,46,12225,243,12070,201,1,130,12106,190,12038,51,12041,12152,89,12186,168,12005,46,63,97,12122,12056,12209,41,151,96,448,7,89,73,12182,12058,182,12274,65,12276,12135,12215,12288,12122,12283,118,139,7];
        ZKNOX_falcon.Signature memory sig;
        sig.s2 = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            sig.s2[i] = tmp_s2[i];
        }
        // message
        bytes memory message = "My name is Nicolas";
        sig.salt =
            "\xaa\xae\x31\x4e\xd9\x08\x3d\xab\x4b\x09\x9f\x8e\x30\x0f\x01\xb8\x65\x0f\x1f\x4b\x1d\x8f\xcf\x3f\x3c\xb5\x3f\xb8\xe9\xeb\x2e\xa2\x03\xbd\xc9\x70\xf5\x0a\xe5\x54";
        bool result = falcon.verify(message, sig, pk, true);
        assertEq(true, result);
    }

    function testVector3() public view {
        // public key
        // forgefmt: disable-next-line
        uint[512] memory tmp_pk = [uint(8494), 9875,5391,1879,708,7214,6161,7426,130,4397,5498,8631,2407,9977,1931,7029,2352,991,9225,9158,8285,955,12093,4942,2664,778,3383,11334,11105,10565,3474,7022,2706,1183,6455,1113,1385,4181,5984,1364,6193,7574,2703,11943,2783,9363,10213,6442,10177,6408,8584,2766,1171,7190,253,3679,2625,7796,8043,5703,2065,459,1063,5107,475,7421,2950,1363,9991,2222,1222,2148,12181,10486,7239,2220,8612,10147,11233,10557,3816,7607,2043,9737,1487,6402,7156,4425,11155,8706,2669,9984,4688,8809,3126,5346,8576,11683,12012,2541,7468,3700,12043,6636,274,7905,1637,11874,8091,6388,2132,3454,5363,11278,8138,4104,3664,6955,7423,9252,5243,717,9654,11089,2662,5813,2725,3997,7882,8147,1972,5360,9958,6537,9866,1837,9724,2515,6909,11077,7382,8940,10578,66,991,11249,12078,5661,297,4236,5240,10615,8894,6752,1599,8903,4789,8794,721,143,708,3893,9853,10975,12240,4519,3983,9215,420,8767,11835,10220,3914,10930,3539,11989,4395,2901,1427,7668,5489,4941,6674,12249,5831,3530,12171,10261,775,894,11564,5706,3810,11670,9294,9899,5872,9997,9218,8757,7970,11087,3323,4779,9473,12172,9576,2989,1404,11193,376,7670,9520,11007,10252,55,8952,3523,8081,2097,6848,11377,6165,5777,12044,12000,8941,1892,8951,4426,8954,9118,4116,7340,10060,9311,7351,11995,9476,6246,2151,1574,4104,12141,880,3709,2410,8871,1771,8281,11433,8802,5517,7260,8932,2340,11134,8858,1110,2811,6777,10364,9649,7387,1996,6561,7065,2190,12094,11677,10503,2145,11418,10041,9467,109,5395,5299,7200,11203,3966,6117,1065,3458,5521,12182,6969,1134,7108,648,285,8703,100,12113,6653,7377,6804,1717,9467,10055,4009,3545,7482,28,4253,47,12043,7057,1286,10754,3347,3280,3738,3323,7715,6500,350,12245,11148,1705,6450,336,2873,176,9059,2491,7546,2877,7417,9768,2526,2893,551,9462,1754,3452,7819,10010,844,4087,8473,5019,9155,12253,8338,10746,6837,9485,7469,4277,8497,10631,2810,5104,5895,7050,298,1144,3489,7210,11509,4913,7844,1396,9705,11371,1646,3089,7918,12187,6710,106,6810,3783,9423,180,3100,228,6112,9775,3407,10474,3340,232,11654,454,2551,6891,10879,2473,6594,9791,6870,5661,5877,8893,3075,4752,1135,3859,2495,5101,1384,5825,5539,1734,4694,7444,8731,4653,7432,7238,9267,1719,9790,6698,6049,2948,4962,8614,2381,2866,6384,11786,775,4155,7072,9670,2011,4684,6722,1077,7784,7614,217,90,9505,4379,1799,1159,6056,11386,5041,3383,102,12112,9520,8228,9636,668,210,4688,3381,2281,2261,11425,7820,2252,9565,7195,8650,7037,11164,9071,1220,1974,6262,8288,4926,1069,206,7288,4139,4020,728,10582,10621,4568,5054,9984,6837,236,7164,9106,9007,3765,700,4173,1524,11782,6690,9860,2926,538,11340,6889,10459,7255,7705,6244,10579,7541,10909,11397,9092,115,2610,5294,10509,3454,4985,2496];
        uint256[] memory pk = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            pk[i] = tmp_pk[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint[512] memory tmp_s2 = [uint(12076), 11975,131,181,294,12240,52,11999,55,37,12167,12118,11964,11882,215,12133,171,81,12013,65,339,12207,101,12228,209,47,108,52,11882,12143,12109,12238,12264,12265,12203,142,12127,12235,149,249,279,12234,12202,12047,12235,12244,334,164,12140,195,12209,149,139,12161,12209,365,12194,12265,12259,116,12030,44,315,50,12278,12029,33,11899,16,77,190,12178,12181,232,12226,12260,160,231,11955,19,61,12187,124,8,12271,149,12242,12258,12176,213,221,233,20,12096,12113,12050,12280,12258,232,12239,128,200,233,12257,12106,129,12259,97,89,12257,293,12249,52,12244,66,12240,7,12236,12017,12030,138,142,33,144,3,12193,12229,20,12139,12264,149,12285,7,12233,208,4,99,19,12174,11979,91,217,131,90,12159,12146,177,12135,275,184,25,12266,260,23,12262,158,38,12124,12287,12284,155,12272,12156,12278,12178,370,73,173,128,12234,119,12259,144,12249,12170,125,29,11989,41,54,9,12091,12227,169,160,198,95,67,21,217,196,12183,284,354,2,158,12188,68,76,75,12177,289,135,8,178,12082,12058,131,70,12106,14,11955,84,169,12105,12109,12233,103,43,12266,63,42,4,178,146,187,11973,11980,12214,85,242,171,12288,12004,12170,12250,153,11984,48,15,385,168,66,12248,71,60,77,12161,12242,17,75,12002,202,64,12226,91,5,211,12111,12200,90,12288,12278,262,12261,12059,221,12253,12174,122,12180,12217,317,132,12214,86,289,12140,12068,436,248,47,12184,43,12178,11965,12195,12090,11892,140,143,149,12258,161,12064,292,12218,1,12216,12191,12250,143,12092,12166,12207,59,99,5,228,135,3,11944,12123,213,12176,12215,12285,41,12179,41,12097,12240,238,34,141,132,12213,12211,101,12062,293,11995,12154,12174,48,111,52,235,185,12187,68,11867,13,43,210,12192,12114,12052,12000,101,247,226,190,72,94,66,11981,12071,103,12153,0,79,254,12173,11982,12171,41,12208,198,1,12178,208,12085,12232,12187,12257,12093,11979,12287,139,12261,70,12265,79,109,190,143,12235,12186,12190,62,212,12218,12193,12155,96,260,70,102,220,289,12217,363,12108,129,119,50,6,399,72,11996,12139,12212,335,131,12207,12282,12230,12065,150,124,131,136,11980,11,12179,12287,162,108,39,292,12232,173,12227,11989,12174,12199,12234,434,5,245,12254,90,6,52,336,227,12084,12275,12049,12106,12288,12123,382,299,245,206,154,11989,12228,12134,11826,12177,12187,12139,12260,12276,12249,103,57,12092,19,12091,85,111,12280,79,263,12116,11990,337,12268,359,12283,12176,12170,68,261,34,12236,12224,12206,12146,12282,12099,165,12149,12128,12238,12224,26,68,93,145,10,12178,12262,12211,15,12183,12192,296];
        ZKNOX_falcon.Signature memory sig;
        sig.s2 = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            sig.s2[i] = tmp_s2[i];
        }
        // message
        bytes memory message = "We are ZKNox";
        sig.salt =
            "\xf9\xa6\x6d\x13\x68\xb2\x08\xe2\x1f\x7c\x10\xd0\x4a\x3d\xbd\x4e\x36\x06\x33\xe5\xdb\x4b\x60\x26\x01\xc1\x4c\xea\x73\x7d\xb3\xdc\xf7\x22\x63\x2c\xc7\x78\x51\xcb";
        bool result = falcon.verify(message, sig, pk, true);
        assertEq(true, result);
    }

    function testVector4() public view {
        // public key
        // forgefmt: disable-next-line
        uint[512] memory tmp_pk = [uint(8494), 9875,5391,1879,708,7214,6161,7426,130,4397,5498,8631,2407,9977,1931,7029,2352,991,9225,9158,8285,955,12093,4942,2664,778,3383,11334,11105,10565,3474,7022,2706,1183,6455,1113,1385,4181,5984,1364,6193,7574,2703,11943,2783,9363,10213,6442,10177,6408,8584,2766,1171,7190,253,3679,2625,7796,8043,5703,2065,459,1063,5107,475,7421,2950,1363,9991,2222,1222,2148,12181,10486,7239,2220,8612,10147,11233,10557,3816,7607,2043,9737,1487,6402,7156,4425,11155,8706,2669,9984,4688,8809,3126,5346,8576,11683,12012,2541,7468,3700,12043,6636,274,7905,1637,11874,8091,6388,2132,3454,5363,11278,8138,4104,3664,6955,7423,9252,5243,717,9654,11089,2662,5813,2725,3997,7882,8147,1972,5360,9958,6537,9866,1837,9724,2515,6909,11077,7382,8940,10578,66,991,11249,12078,5661,297,4236,5240,10615,8894,6752,1599,8903,4789,8794,721,143,708,3893,9853,10975,12240,4519,3983,9215,420,8767,11835,10220,3914,10930,3539,11989,4395,2901,1427,7668,5489,4941,6674,12249,5831,3530,12171,10261,775,894,11564,5706,3810,11670,9294,9899,5872,9997,9218,8757,7970,11087,3323,4779,9473,12172,9576,2989,1404,11193,376,7670,9520,11007,10252,55,8952,3523,8081,2097,6848,11377,6165,5777,12044,12000,8941,1892,8951,4426,8954,9118,4116,7340,10060,9311,7351,11995,9476,6246,2151,1574,4104,12141,880,3709,2410,8871,1771,8281,11433,8802,5517,7260,8932,2340,11134,8858,1110,2811,6777,10364,9649,7387,1996,6561,7065,2190,12094,11677,10503,2145,11418,10041,9467,109,5395,5299,7200,11203,3966,6117,1065,3458,5521,12182,6969,1134,7108,648,285,8703,100,12113,6653,7377,6804,1717,9467,10055,4009,3545,7482,28,4253,47,12043,7057,1286,10754,3347,3280,3738,3323,7715,6500,350,12245,11148,1705,6450,336,2873,176,9059,2491,7546,2877,7417,9768,2526,2893,551,9462,1754,3452,7819,10010,844,4087,8473,5019,9155,12253,8338,10746,6837,9485,7469,4277,8497,10631,2810,5104,5895,7050,298,1144,3489,7210,11509,4913,7844,1396,9705,11371,1646,3089,7918,12187,6710,106,6810,3783,9423,180,3100,228,6112,9775,3407,10474,3340,232,11654,454,2551,6891,10879,2473,6594,9791,6870,5661,5877,8893,3075,4752,1135,3859,2495,5101,1384,5825,5539,1734,4694,7444,8731,4653,7432,7238,9267,1719,9790,6698,6049,2948,4962,8614,2381,2866,6384,11786,775,4155,7072,9670,2011,4684,6722,1077,7784,7614,217,90,9505,4379,1799,1159,6056,11386,5041,3383,102,12112,9520,8228,9636,668,210,4688,3381,2281,2261,11425,7820,2252,9565,7195,8650,7037,11164,9071,1220,1974,6262,8288,4926,1069,206,7288,4139,4020,728,10582,10621,4568,5054,9984,6837,236,7164,9106,9007,3765,700,4173,1524,11782,6690,9860,2926,538,11340,6889,10459,7255,7705,6244,10579,7541,10909,11397,9092,115,2610,5294,10509,3454,4985,2496];
        uint256[] memory pk = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            pk[i] = tmp_pk[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint[512] memory tmp_s2 = [uint(114), 10,165,12030,11883,51,12049,21,182,172,12195,117,272,12134,12116,11967,66,214,483,258,147,397,12105,12163,84,12102,12108,0,35,12205,110,101,11973,85,12265,85,12116,79,256,137,12126,12131,12271,12269,12213,144,110,49,12199,12252,12204,85,12130,303,12284,112,150,12121,193,12135,11843,51,24,444,66,214,73,16,12074,307,12150,209,12282,12208,207,41,47,12248,12241,200,426,12223,12160,160,12277,57,12205,142,12225,8,12281,12239,151,12215,413,41,12088,12115,12285,44,2,113,12206,152,12232,84,12184,31,3,229,165,12132,12146,12283,12187,133,67,12220,12107,11881,12172,115,12284,242,11963,12221,26,0,11872,12143,100,74,157,12278,12059,12169,53,12171,12139,408,12271,12284,109,37,12283,12024,356,119,11979,12287,12143,16,42,12255,45,57,115,12247,12150,12270,267,12281,12144,16,9,12229,82,94,152,12213,133,12188,29,16,11997,12069,12229,168,229,14,12014,95,12100,12254,12038,132,12138,12181,12089,70,17,164,296,12203,12193,175,12005,12168,12132,240,73,135,88,12237,85,157,12233,23,12209,20,23,12128,12219,12194,56,394,166,204,12243,11998,12108,12145,74,12147,122,19,11970,139,271,12282,39,196,92,12205,12081,171,121,12184,147,12070,114,320,260,13,12134,12185,12247,12190,6,12268,12078,117,12066,12253,101,12052,12277,12072,12237,213,12132,12080,12208,12249,12221,12280,165,75,25,12257,125,12269,12057,11967,180,265,254,15,12096,12116,298,12178,76,12279,12285,12257,12282,12247,12054,45,6,44,141,12282,12283,201,240,11992,145,12205,84,196,77,111,12152,167,12052,12110,59,273,12011,12206,17,12258,12278,12200,12235,12222,12210,222,279,94,120,12,12177,77,275,262,12114,12222,12116,12102,12242,216,330,143,12271,11948,12251,12151,103,4,11933,12223,161,118,12203,247,12026,12258,310,12194,12261,84,28,12142,77,12268,12235,12182,12039,11979,12048,12261,12184,11974,12183,11994,42,12083,12179,12144,132,12209,12275,3,66,138,11,12172,12189,45,144,12125,78,129,37,12118,20,12085,247,189,252,12211,28,31,12247,12140,12013,12107,12197,12180,91,12064,243,9,12271,12232,12217,219,142,12280,176,12036,153,12136,57,217,10,338,12287,273,233,27,120,12204,12276,147,12088,12248,12256,11994,12081,12270,12222,12239,12230,190,338,147,158,305,86,12252,60,302,12220,346,141,12023,150,43,12147,153,17,12084,12274,12108,167,12012,146,12211,12226,12256,14,37,12146,129,109,170,12031,153,70,60,9,11895,11989,12106,49,134,12071,21,100,12265,335,7,67,12099,188,52,12221,329,12086,12179,399,10,139,12069,12085,12269,150,12139,12209,12020,253,12285,42,12201,12203,12182,234,12235];
        ZKNOX_falcon.Signature memory sig;
        sig.s2 = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            sig.s2[i] = tmp_s2[i];
        }
        // message
        bytes memory message = "Practical security on the chain.";
        sig.salt =
            "\x14\x30\x45\xd7\x91\xcc\x85\xef\xf5\xb2\x19\x32\xf2\x38\x61\xbc\xf2\x3a\x52\xb5\xda\x67\xea\xf7\xba\xae\x0f\x5f\xb1\x36\x9d\xb7\x8f\x3a\xc4\x5f\x8c\x4a\xc5\x67";
        bool result = falcon.verify(message, sig, pk, true);
        assertEq(true, result);
    }
}
