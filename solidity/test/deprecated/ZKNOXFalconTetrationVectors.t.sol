// code generated using pythonref/generate_deprecated_falcon_test_vectors.py.
pragma solidity ^0.8.25;

import {Test, console} from "forge-std/Test.sol";
import "../../src/ZKNOX_NTT.sol";
import "../../src/deprecated/ZKNOX_falcon.sol";

contract ZKNOX_FalconTest is Test {
    ZKNOX_falcon falcon;
    //exemple of stateless initialisation, no external contract provided
    ZKNOX_NTT ntt = new ZKNOX_NTT(address(0), address(0), 12289, 12265);
    // forgefmt: disable-next-line
        uint256[1024] psi_rev = [uint256(1), 10810, 7143, 4043, 10984, 722, 5736, 8155, 3542, 8785, 9744, 3621, 10643, 1212, 3195, 5860, 7468, 2639, 9664, 11340, 11726, 9314, 9283, 9545, 5728, 7698, 5023, 5828, 8961, 6512, 7311, 1351, 2319, 11119, 11334, 11499, 9088, 3014, 5086, 10963, 4846, 9542, 9154, 3712, 4805, 8736, 11227, 9995, 3091, 12208, 7969, 11289, 9326, 7393, 9238, 2366, 11112, 8034, 10654, 9521, 12149, 10436, 7678, 11563, 1260, 4388, 4632, 6534, 2426, 334, 1428, 1696, 2013, 9000, 729, 3241, 2881, 3284, 7197, 10200, 8595, 7110, 10530, 8582, 3382, 11934, 9741, 8058, 3637, 3459, 145, 6747, 9558, 8357, 7399, 6378, 9447, 480, 1022, 9, 9821, 339, 5791, 544, 10616, 4278, 6958, 7300, 8112, 8705, 1381, 9764, 11336, 8541, 827, 5767, 2476, 118, 2197, 7222, 3949, 8993, 4452, 2396, 7935, 130, 2837, 6915, 2401, 442, 7188, 11222, 390, 773, 8456, 3778, 354, 4861, 9377, 5698, 5012, 9808, 2859, 11244, 1017, 7404, 1632, 7205, 27, 9223, 8526, 10849, 1537, 242, 4714, 8146, 9611, 3704, 5019, 11744, 1002, 5011, 5088, 8005, 7313, 10682, 8509, 11414, 9852, 3646, 6022, 2987, 9723, 10102, 6250, 9867, 11224, 2143, 11885, 7644, 1168, 5277, 11082, 3248, 493, 8193, 6845, 2381, 7952, 11854, 1378, 1912, 2166, 3915, 12176, 7370, 12129, 3149, 12286, 4437, 3636, 4938, 5291, 2704, 10863, 7635, 1663, 10512, 3364, 1689, 4057, 9018, 9442, 7875, 2174, 4372, 7247, 9984, 4053, 2645, 5195, 9509, 7394, 1484, 9042, 9603, 8311, 9320, 9919, 2865, 5332, 3510, 1630, 10163, 5407, 3186, 11136, 9405, 10040, 8241, 9890, 8889, 7098, 9153, 9289, 671, 3016, 243, 6730, 420, 10111, 1544, 3985, 4905, 3531, 476, 49, 1263, 5915, 1483, 9789, 10800, 10706, 6347, 1512, 350, 10474, 5383, 5369, 10232, 9087, 4493, 9551, 6421, 6554, 2655, 9280, 1693, 174, 723, 10314, 8532, 347, 2925, 8974, 11863, 1858, 4754, 3030, 4115, 2361, 10446, 2908, 218, 3434, 8760, 3963, 576, 6142, 9842, 1954, 10238, 9407, 10484, 3991, 8320, 9522, 156, 2281, 5876, 10258, 5333, 3772, 418, 5908, 11836, 5429, 7515, 7552, 1293, 295, 6099, 5766, 652, 8273, 4077, 8527, 9370, 325, 10885, 11143, 11341, 5990, 1159, 8561, 8240, 3329, 4298, 12121, 2692, 5961, 7183, 10327, 1594, 6167, 9734, 7105, 11089, 1360, 3956, 6170, 5297, 8210, 11231, 922, 441, 1958, 4322, 1112, 2078, 4046, 709, 9139, 1319, 4240, 8719, 6224, 11454, 2459, 683, 3656, 12225, 10723, 5782, 9341, 9786, 9166, 10542, 9235, 6803, 7856, 6370, 3834, 7032, 7048, 9369, 8120, 9162, 6821, 1010, 8807, 787, 5057, 4698, 4780, 8844, 12097, 1321, 4912, 10240, 677, 6415, 6234, 8953, 1323, 9523, 12237, 3174, 1579, 11858, 9784, 5906, 3957, 9450, 151, 10162, 12231, 12048, 3532, 11286, 1956, 7280, 11404, 6281, 3477, 6608, 142, 11184, 9445, 3438, 11314, 4212, 9260, 6695, 4782, 5886, 8076, 504, 2302, 11684, 11868, 8209, 3602, 6068, 8689, 3263, 6077, 7665, 7822, 7500, 6752, 4749, 4449, 6833, 12142, 8500, 6118, 8471, 1190, 9606, 3860, 5445, 7753, 11239, 5079, 9027, 2169, 11767, 7965, 4916, 8214, 5315, 11011, 9945, 1973, 6715, 8775, 11248, 5925, 11271, 654, 3565, 1702, 1987, 6760, 5206, 3199, 12233, 6136, 6427, 6874, 8646, 4948, 6152, 400, 10561, 5339, 5446, 3710, 6093, 468, 8301, 316, 11907, 10256, 8291, 3879, 1922, 10930, 6854, 973, 11035, 7, 1936, 845, 3723, 3154, 5054, 3285, 7929, 216, 50, 6763, 769, 767, 8484, 10076, 4153, 3120, 6184, 6203, 5646, 8348, 3753, 3536, 5370, 3229, 4730, 10583, 3929, 1282, 8717, 2021, 9457, 3944, 4099, 5604, 6759, 2171, 8809, 11024, 3007, 9344, 5349, 2633, 1406, 9057, 11996, 4855, 8520, 9348, 11722, 6627, 5289, 3837, 2595, 3221, 4273, 4050, 7082, 844, 5202, 11309, 11607, 4590, 7207, 8820, 6138, 7846, 8871, 4693, 2338, 9996, 11872, 1802, 1555, 5103, 10398, 7878, 10699, 1223, 9955, 11009, 614, 12265, 10918, 11385, 9804, 6742, 7250, 881, 11924, 1015, 10362, 5461, 9343, 2637, 7779, 4684, 3360, 7154, 63, 7302, 2373, 3670, 3808, 578, 5368, 11839, 1944, 7628, 11779, 9667, 6903, 5618, 10631, 5789, 3502, 5043, 826, 3090, 1398, 3065, 1506, 6586, 4483, 6389, 910, 7570, 11538, 4518, 3094, 1160, 4820, 2730, 5411, 10036, 1868, 2478, 9449, 4194, 3019, 10506, 7211, 7724, 4974, 7119, 2672, 11424, 1279, 189, 3116, 10526, 2209, 10759, 1694, 8420, 7866, 5832, 1350, 10555, 8474, 7014, 10499, 11038, 6879, 2035, 1040, 10407, 6164, 7519, 944, 5287, 8620, 6616, 9269, 6883, 7624, 4834, 2712, 9461, 4352, 8176, 72, 3840, 10447, 3451, 8195, 11048, 4378, 6508, 9244, 9646, 1095, 2873, 2827, 11498, 2434, 11169, 9754, 12268, 6481, 874, 9988, 170, 6639, 2307, 4289, 11641, 12139, 11259, 11823, 3821, 1681, 4649, 5969, 2929, 6026, 1573, 8443, 3793, 6226, 11787, 5118, 2602, 10388, 1849, 5776, 9021, 3795, 7988, 7766, 457, 12281, 11410, 9696, 982, 10013, 4218, 4390, 8835, 8531, 7785, 778, 530, 2626, 3578, 4697, 8823, 1701, 10243, 2940, 9332, 10808, 3317, 9757, 139, 3332, 343, 8841, 4538, 10381, 7078, 1866, 1208, 7562, 10584, 2450, 11873, 814, 716, 10179, 2164, 6873, 5412, 8080, 9011, 6296, 3515, 11851, 1218, 5061, 10753, 10568, 2429, 8186, 1373, 9307, 717, 8700, 8921, 4227, 4238, 11677, 8067, 1526, 11749, 12164, 3163, 4032, 6127, 7449, 1389, 10221, 4404, 11943, 3359, 9084, 5209, 1092, 3678, 4265, 10361, 464, 1826, 2926, 4489, 9118, 1136, 3449, 3708, 9051, 2065, 5826, 3495, 4564, 8755, 3961, 10533, 4145, 2275, 2461, 4267, 5653, 5063, 8113, 10771, 8524, 11014, 5508, 11113, 6555, 4860, 1125, 10844, 11158, 6302, 6693, 579, 3889, 9520, 3114, 6323, 212, 8314, 4883, 6454, 3087, 1417, 5676, 7784, 2257, 3744, 4963, 2528, 9233, 5102, 11877, 6701, 6444, 4924, 4781, 1014, 11841, 1327, 3607, 3942, 7057, 2717, 60, 3200, 10754, 5836, 7723, 2260, 68, 180, 4138, 7684, 2689, 10880, 7070, 204, 5509, 10821, 8308, 8882, 463, 10945, 9247, 9806, 10235, 4739, 8038, 6771, 1226, 9261, 5216, 11925, 9929, 11053, 9272, 7043, 4475, 3121, 4705, 1057, 9689, 11883, 10602, 146, 5268, 1403, 1804, 6094, 7100, 12050, 9389, 994, 4554, 4670, 11777, 5464, 4906, 3375, 9998, 8896, 4335, 7376, 3528, 3825, 8054, 9342, 8307, 636, 5609, 11667, 10552, 5672, 4499, 5598, 3344, 10397, 8665, 6565, 10964, 11260, 10344, 5959, 10141, 8330, 5797, 2442, 1248, 5115, 4939, 10975, 1744, 2894, 8635, 6599, 9834, 8342, 338, 3343, 8170, 1522, 10138, 12269, 5002, 4608, 5163, 4578, 377, 11914, 1620, 10453, 11864, 10104, 11897, 6085, 8122, 11251, 11366, 10058, 6197, 2800, 193, 506, 1255, 1392, 5784, 3276, 8951, 2212, 9615, 10347, 8881, 2575, 1165, 2776, 11111, 6811, 3511];
    // forgefmt: disable-next-line
        uint256[1024] psi_inv_rev = [uint256(1), 1479, 8246, 5146, 4134, 6553, 11567, 1305, 6429, 9094, 11077, 1646, 8668, 2545, 3504, 8747, 10938, 4978, 5777, 3328, 6461, 7266, 4591, 6561, 2744, 3006, 2975, 563, 949, 2625, 9650, 4821, 726, 4611, 1853, 140, 2768, 1635, 4255, 1177, 9923, 3051, 4896, 2963, 1000, 4320, 81, 9198, 2294, 1062, 3553, 7484, 8577, 3135, 2747, 7443, 1326, 7203, 9275, 3201, 790, 955, 1170, 9970, 5374, 9452, 12159, 4354, 9893, 7837, 3296, 8340, 5067, 10092, 12171, 9813, 6522, 11462, 3748, 953, 2525, 10908, 3584, 4177, 4989, 5331, 8011, 1673, 11745, 6498, 11950, 2468, 12280, 11267, 11809, 2842, 5911, 4890, 3932, 2731, 5542, 12144, 8830, 8652, 4231, 2548, 355, 8907, 3707, 1759, 5179, 3694, 2089, 5092, 9005, 9408, 9048, 11560, 3289, 10276, 10593, 10861, 11955, 9863, 5755, 7657, 7901, 11029, 11813, 8758, 7384, 8304, 10745, 2178, 11869, 5559, 12046, 9273, 11618, 3000, 3136, 5191, 3400, 2399, 4048, 2249, 2884, 1153, 9103, 6882, 2126, 10659, 8779, 6957, 9424, 2370, 2969, 3978, 2686, 3247, 10805, 4895, 2780, 7094, 9644, 8236, 2305, 5042, 7917, 10115, 4414, 2847, 3271, 8232, 10600, 8925, 1777, 10626, 4654, 1426, 9585, 6998, 7351, 8653, 7852, 3, 9140, 160, 4919, 113, 8374, 10123, 10377, 10911, 435, 4337, 9908, 5444, 4096, 11796, 9041, 1207, 7012, 11121, 4645, 404, 10146, 1065, 2422, 6039, 2187, 2566, 9302, 6267, 8643, 2437, 875, 3780, 1607, 4976, 4284, 7201, 7278, 11287, 545, 7270, 8585, 2678, 4143, 7575, 12047, 10752, 1440, 3763, 3066, 12262, 5084, 10657, 4885, 11272, 1045, 9430, 2481, 7277, 6591, 2912, 7428, 11935, 8511, 3833, 11516, 11899, 1067, 5101, 11847, 9888, 1254, 11316, 5435, 1359, 10367, 8410, 3998, 2033, 382, 11973, 3988, 11821, 6196, 8579, 6843, 6950, 1728, 11889, 6137, 7341, 3643, 5415, 5862, 6153, 56, 9090, 7083, 5529, 10302, 10587, 8724, 11635, 1018, 6364, 1041, 3514, 5574, 10316, 2344, 1278, 6974, 4075, 7373, 4324, 522, 10120, 3262, 7210, 1050, 4536, 6844, 8429, 2683, 11099, 3818, 6171, 3789, 147, 5456, 7840, 7540, 5537, 4789, 4467, 4624, 6212, 9026, 3600, 6221, 8687, 4080, 421, 605, 9987, 11785, 4213, 6403, 7507, 5594, 3029, 8077, 975, 8851, 2844, 1105, 12147, 5681, 8812, 6008, 885, 5009, 10333, 1003, 8757, 241, 58, 2127, 12138, 2839, 8332, 6383, 2505, 431, 10710, 9115, 52, 2766, 10966, 3336, 6055, 5874, 11612, 2049, 7377, 10968, 192, 3445, 7509, 7591, 7232, 11502, 3482, 11279, 5468, 3127, 4169, 2920, 5241, 5257, 8455, 5919, 4433, 5486, 3054, 1747, 3123, 2503, 2948, 6507, 1566, 64, 8633, 11606, 9830, 835, 6065, 3570, 8049, 10970, 3150, 11580, 8243, 10211, 11177, 7967, 10331, 11848, 11367, 1058, 4079, 6992, 6119, 8333, 10929, 1200, 5184, 2555, 6122, 10695, 1962, 5106, 6328, 9597, 168, 7991, 8960, 4049, 3728, 11130, 6299, 948, 1146, 1404, 11964, 2919, 3762, 8212, 4016, 11637, 6523, 6190, 11994, 10996, 4737, 4774, 6860, 453, 6381, 11871, 8517, 6956, 2031, 6413, 10008, 12133, 2767, 3969, 8298, 1805, 2882, 2051, 10335, 2447, 6147, 11713, 8326, 3529, 8855, 12071, 9381, 1843, 9928, 8174, 9259, 7535, 10431, 426, 3315, 9364, 11942, 3757, 1975, 11566, 12115, 10596, 3009, 9634, 5735, 5868, 2738, 7796, 3202, 2057, 6920, 6906, 1815, 11939, 10777, 5942, 1583, 1489, 2500, 10806, 6374, 11026, 12240, 8778, 5478, 1178, 9513, 11124, 9714, 3408, 1942, 2674, 10077, 3338, 9013, 6505, 10897, 11034, 11783, 12096, 9489, 6092, 2231, 923, 1038, 4167, 6204, 392, 2185, 425, 1836, 10669, 375, 11912, 7711, 7126, 7681, 7287, 20, 2151, 10767, 4119, 8946, 11951, 3947, 2455, 5690, 3654, 9395, 10545, 1314, 7350, 7174, 11041, 9847, 6492, 3959, 2148, 6330, 1945, 1029, 1325, 5724, 3624, 1892, 8945, 6691, 7790, 6617, 1737, 622, 6680, 11653, 3982, 2947, 4235, 8464, 8761, 4913, 7954, 3393, 2291, 8914, 7383, 6825, 512, 7619, 7735, 11295, 2900, 239, 5189, 6195, 10485, 10886, 7021, 12143, 1687, 406, 2600, 11232, 7584, 9168, 7814, 5246, 3017, 1236, 2360, 364, 7073, 3028, 11063, 5518, 4251, 7550, 2054, 2483, 3042, 1344, 11826, 3407, 3981, 1468, 6780, 12085, 5219, 1409, 9600, 4605, 8151, 12109, 12221, 10029, 4566, 6453, 1535, 9089, 12229, 9572, 5232, 8347, 8682, 10962, 448, 11275, 7508, 7365, 5845, 5588, 412, 7187, 3056, 9761, 7326, 8545, 10032, 4505, 6613, 10872, 9202, 5835, 7406, 3975, 12077, 5966, 9175, 2769, 8400, 11710, 5596, 5987, 1131, 1445, 11164, 7429, 5734, 1176, 6781, 1275, 3765, 1518, 4176, 7226, 6636, 8022, 9828, 10014, 8144, 1756, 8328, 3534, 7725, 8794, 6463, 10224, 3238, 8581, 8840, 11153, 3171, 7800, 9363, 10463, 11825, 1928, 8024, 8611, 11197, 7080, 3205, 8930, 346, 7885, 2068, 10900, 4840, 6162, 8257, 9126, 125, 540, 10763, 4222, 612, 8051, 8062, 3368, 3589, 11572, 2982, 10916, 4103, 9860, 1721, 1536, 7228, 11071, 438, 8774, 5993, 3278, 4209, 6877, 5416, 10125, 2110, 11573, 11475, 416, 9839, 1705, 4727, 11081, 10423, 5211, 1908, 7751, 3448, 11946, 8957, 12150, 2532, 8972, 1481, 2957, 9349, 2046, 10588, 3466, 7592, 8711, 9663, 11759, 11511, 4504, 3758, 3454, 7899, 8071, 2276, 11307, 2593, 879, 8, 11832, 4523, 4301, 8494, 3268, 6513, 10440, 1901, 9687, 7171, 502, 6063, 8496, 3846, 10716, 6263, 9360, 6320, 7640, 10608, 8468, 466, 1030, 150, 648, 8000, 9982, 5650, 12119, 2301, 11415, 5808, 21, 2535, 1120, 9855, 791, 9462, 9416, 11194, 2643, 3045, 5781, 7911, 1241, 4094, 8838, 1842, 8449, 12217, 4113, 7937, 2828, 9577, 7455, 4665, 5406, 3020, 5673, 3669, 7002, 11345, 4770, 6125, 1882, 11249, 10254, 5410, 1251, 1790, 5275, 3815, 1734, 10939, 6457, 4423, 3869, 10595, 1530, 10080, 1763, 9173, 12100, 11010, 865, 9617, 5170, 7315, 4565, 5078, 1783, 9270, 8095, 2840, 9811, 10421, 2253, 6878, 9559, 7469, 11129, 9195, 7771, 751, 4719, 11379, 5900, 7806, 5703, 10783, 9224, 10891, 9199, 11463, 7246, 8787, 6500, 1658, 6671, 5386, 2622, 510, 4661, 10345, 450, 6921, 11711, 8481, 8619, 9916, 4987, 12226, 5135, 8929, 7605, 4510, 9652, 2946, 6828, 1927, 11274, 365, 11408, 5039, 5547, 2485, 904, 1371, 24, 11675, 1280, 2334, 11066, 1590, 4411, 1891, 7186, 10734, 10487, 417, 2293, 9951, 7596, 3418, 4443, 6151, 3469, 5082, 7699, 682, 980, 7087, 11445, 5207, 8239, 8016, 9068, 9694, 8452, 7000, 5662, 567, 2941, 3769, 7434, 293, 3232, 10883, 9656, 6940, 2945, 9282, 1265, 3480, 10118, 5530, 6685, 8190, 8345, 2832, 10268, 3572, 11007, 8360, 1706, 7559, 9060, 6919, 8753, 8536, 3941, 6643, 6086, 6105, 9169, 8136, 2213, 3805, 11522, 11520, 5526, 12239, 12073, 4360, 9004, 7235, 9135, 8566, 11444, 10353, 12282];

    //stateful initialisation
    function setUp() public {
        bytes memory bytecode_psirev = abi.encodePacked(psi_rev);

        address a_psirev; //address of the precomputations bytecode contract
        a_psirev = address(uint160(0xcaca)); //here it is etched, use create in the future
        vm.etch(a_psirev, bytecode_psirev); //pushing psirev bytecode into contract todo : replace with create

        bytes memory bytecode_psiInvrev = abi.encodePacked(psi_inv_rev);

        address a_psiInvrev; //address of the precomputations bytecode contract
        a_psiInvrev = address(uint160(0xa5a5)); //here it is etched, use create in the future
        vm.etch(a_psiInvrev, bytecode_psiInvrev); //pushing psirev bytecode into contract todo : replace with create

        ntt.update(a_psirev, a_psiInvrev, 12289, 12265); //update ntt with outer contract

        falcon = new ZKNOX_falcon(ntt);
    }

    function testVector0() public view {
        // public key
        // forgefmt: disable-next-line
        uint[512] memory tmp_pk = [uint(8494), 9875,5391,1879,708,7214,6161,7426,130,4397,5498,8631,2407,9977,1931,7029,2352,991,9225,9158,8285,955,12093,4942,2664,778,3383,11334,11105,10565,3474,7022,2706,1183,6455,1113,1385,4181,5984,1364,6193,7574,2703,11943,2783,9363,10213,6442,10177,6408,8584,2766,1171,7190,253,3679,2625,7796,8043,5703,2065,459,1063,5107,475,7421,2950,1363,9991,2222,1222,2148,12181,10486,7239,2220,8612,10147,11233,10557,3816,7607,2043,9737,1487,6402,7156,4425,11155,8706,2669,9984,4688,8809,3126,5346,8576,11683,12012,2541,7468,3700,12043,6636,274,7905,1637,11874,8091,6388,2132,3454,5363,11278,8138,4104,3664,6955,7423,9252,5243,717,9654,11089,2662,5813,2725,3997,7882,8147,1972,5360,9958,6537,9866,1837,9724,2515,6909,11077,7382,8940,10578,66,991,11249,12078,5661,297,4236,5240,10615,8894,6752,1599,8903,4789,8794,721,143,708,3893,9853,10975,12240,4519,3983,9215,420,8767,11835,10220,3914,10930,3539,11989,4395,2901,1427,7668,5489,4941,6674,12249,5831,3530,12171,10261,775,894,11564,5706,3810,11670,9294,9899,5872,9997,9218,8757,7970,11087,3323,4779,9473,12172,9576,2989,1404,11193,376,7670,9520,11007,10252,55,8952,3523,8081,2097,6848,11377,6165,5777,12044,12000,8941,1892,8951,4426,8954,9118,4116,7340,10060,9311,7351,11995,9476,6246,2151,1574,4104,12141,880,3709,2410,8871,1771,8281,11433,8802,5517,7260,8932,2340,11134,8858,1110,2811,6777,10364,9649,7387,1996,6561,7065,2190,12094,11677,10503,2145,11418,10041,9467,109,5395,5299,7200,11203,3966,6117,1065,3458,5521,12182,6969,1134,7108,648,285,8703,100,12113,6653,7377,6804,1717,9467,10055,4009,3545,7482,28,4253,47,12043,7057,1286,10754,3347,3280,3738,3323,7715,6500,350,12245,11148,1705,6450,336,2873,176,9059,2491,7546,2877,7417,9768,2526,2893,551,9462,1754,3452,7819,10010,844,4087,8473,5019,9155,12253,8338,10746,6837,9485,7469,4277,8497,10631,2810,5104,5895,7050,298,1144,3489,7210,11509,4913,7844,1396,9705,11371,1646,3089,7918,12187,6710,106,6810,3783,9423,180,3100,228,6112,9775,3407,10474,3340,232,11654,454,2551,6891,10879,2473,6594,9791,6870,5661,5877,8893,3075,4752,1135,3859,2495,5101,1384,5825,5539,1734,4694,7444,8731,4653,7432,7238,9267,1719,9790,6698,6049,2948,4962,8614,2381,2866,6384,11786,775,4155,7072,9670,2011,4684,6722,1077,7784,7614,217,90,9505,4379,1799,1159,6056,11386,5041,3383,102,12112,9520,8228,9636,668,210,4688,3381,2281,2261,11425,7820,2252,9565,7195,8650,7037,11164,9071,1220,1974,6262,8288,4926,1069,206,7288,4139,4020,728,10582,10621,4568,5054,9984,6837,236,7164,9106,9007,3765,700,4173,1524,11782,6690,9860,2926,538,11340,6889,10459,7255,7705,6244,10579,7541,10909,11397,9092,115,2610,5294,10509,3454,4985,2496];
        uint256[] memory pk = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            pk[i] = tmp_pk[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint[512] memory tmp_s2 = [uint(271), 204,12288,28,237,12212,12221,12221,12059,12277,12112,12201,30,12077,124,218,213,85,12049,12264,12179,12116,12118,16,12213,378,81,27,12196,149,228,103,37,219,12263,12232,167,12104,27,74,12207,50,12271,11895,12137,93,12190,12265,12092,278,118,12083,12150,11905,12140,62,86,11954,194,8,180,57,265,70,346,12279,12213,12174,28,125,12162,12061,94,12217,70,12031,178,12256,12149,12231,12116,12148,12038,12284,212,12151,124,236,12136,12259,122,12016,12190,12271,12197,12286,50,17,126,12169,12188,12286,252,12005,12241,146,147,12175,139,92,117,12144,12196,47,12182,12139,12226,12252,12280,12104,216,209,80,132,18,174,48,12131,177,238,12177,41,295,11,12242,110,38,230,12198,12116,12227,245,150,12138,294,12156,12158,12079,12241,313,56,12179,12246,12134,364,12253,87,32,260,12142,12129,107,12221,215,12256,12058,286,12198,12257,12106,12285,12117,11,28,157,82,12159,12079,47,12011,12155,12279,371,12191,12152,12230,12261,12105,12060,12046,127,12164,12187,12099,12127,12086,12103,12265,100,126,12235,12288,12044,12260,12188,86,12135,12265,55,120,168,85,243,12266,201,247,78,12174,43,12273,88,24,104,361,12152,11,52,128,79,12165,168,11964,12190,12201,12180,186,12195,188,12201,80,239,12103,12057,34,12261,54,312,12223,12187,12278,16,156,12147,47,12087,12178,12274,267,63,12180,83,16,65,12254,19,12062,12240,12184,12204,14,12147,12155,86,12217,23,84,12220,12143,12096,112,115,12230,12173,12150,12171,12244,309,272,12223,101,117,12140,14,12175,112,140,12270,12266,12193,128,147,273,264,500,12035,50,11962,12118,169,12115,3,12160,194,56,12128,274,116,138,18,155,186,11992,12161,74,12068,107,12176,12237,12229,261,222,90,246,77,12220,161,12264,12231,146,158,165,259,6,12216,12237,12278,28,68,12162,12189,12176,12243,12160,25,54,12132,102,63,12134,12058,111,11992,111,12174,179,95,12284,12283,66,12257,12129,12032,12164,12119,12196,12186,56,178,12242,12206,12256,12044,22,6,158,15,64,12040,147,288,12241,340,12092,15,22,11964,12046,94,12271,12173,11974,11,12193,12132,129,44,12222,12123,74,12161,167,12181,11865,23,101,21,276,12126,118,12264,12234,22,315,12063,12063,12206,12132,287,118,12170,12202,12229,12141,152,166,12119,11946,174,12246,11972,12122,17,12024,365,49,12159,149,12244,148,51,223,12022,12052,59,75,114,12083,25,12210,90,193,66,12284,12115,114,1,12131,12219,12186,135,12173,12220,12031,167,12184,159,142,12081,12236,12249,12147,12136,0,12030,18,252,108,10,225,11850,186,183,35,12108,12036,126,98,12039,25,12169,12214,2,12268,183,12231,12166,257,143,12251,43,127,143];
        ZKNOX_falcon.Signature memory sig;
        sig.s2 = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            sig.s2[i] = tmp_s2[i];
        }
        // message
        bytes memory message = "My name is Renaud";
        sig.salt =
            "\xab\x0b\xae\x31\x63\x39\x89\x43\x04\xe3\x58\x77\xb0\xc2\x8a\x9b\x1f\xd1\x66\xc7\x96\xb9\xcc\x25\x8a\x06\x4a\x8f\x57\xe2\x7f\x2a\x5b\x8d\x54\x8a\x72\x8c\x94\x44";
        bool result = falcon.verify(message, sig, pk, false);
        assertEq(true, result);
    }

    function testVector1() public view {
        // public key
        // forgefmt: disable-next-line
        uint[512] memory tmp_pk = [uint(8494), 9875,5391,1879,708,7214,6161,7426,130,4397,5498,8631,2407,9977,1931,7029,2352,991,9225,9158,8285,955,12093,4942,2664,778,3383,11334,11105,10565,3474,7022,2706,1183,6455,1113,1385,4181,5984,1364,6193,7574,2703,11943,2783,9363,10213,6442,10177,6408,8584,2766,1171,7190,253,3679,2625,7796,8043,5703,2065,459,1063,5107,475,7421,2950,1363,9991,2222,1222,2148,12181,10486,7239,2220,8612,10147,11233,10557,3816,7607,2043,9737,1487,6402,7156,4425,11155,8706,2669,9984,4688,8809,3126,5346,8576,11683,12012,2541,7468,3700,12043,6636,274,7905,1637,11874,8091,6388,2132,3454,5363,11278,8138,4104,3664,6955,7423,9252,5243,717,9654,11089,2662,5813,2725,3997,7882,8147,1972,5360,9958,6537,9866,1837,9724,2515,6909,11077,7382,8940,10578,66,991,11249,12078,5661,297,4236,5240,10615,8894,6752,1599,8903,4789,8794,721,143,708,3893,9853,10975,12240,4519,3983,9215,420,8767,11835,10220,3914,10930,3539,11989,4395,2901,1427,7668,5489,4941,6674,12249,5831,3530,12171,10261,775,894,11564,5706,3810,11670,9294,9899,5872,9997,9218,8757,7970,11087,3323,4779,9473,12172,9576,2989,1404,11193,376,7670,9520,11007,10252,55,8952,3523,8081,2097,6848,11377,6165,5777,12044,12000,8941,1892,8951,4426,8954,9118,4116,7340,10060,9311,7351,11995,9476,6246,2151,1574,4104,12141,880,3709,2410,8871,1771,8281,11433,8802,5517,7260,8932,2340,11134,8858,1110,2811,6777,10364,9649,7387,1996,6561,7065,2190,12094,11677,10503,2145,11418,10041,9467,109,5395,5299,7200,11203,3966,6117,1065,3458,5521,12182,6969,1134,7108,648,285,8703,100,12113,6653,7377,6804,1717,9467,10055,4009,3545,7482,28,4253,47,12043,7057,1286,10754,3347,3280,3738,3323,7715,6500,350,12245,11148,1705,6450,336,2873,176,9059,2491,7546,2877,7417,9768,2526,2893,551,9462,1754,3452,7819,10010,844,4087,8473,5019,9155,12253,8338,10746,6837,9485,7469,4277,8497,10631,2810,5104,5895,7050,298,1144,3489,7210,11509,4913,7844,1396,9705,11371,1646,3089,7918,12187,6710,106,6810,3783,9423,180,3100,228,6112,9775,3407,10474,3340,232,11654,454,2551,6891,10879,2473,6594,9791,6870,5661,5877,8893,3075,4752,1135,3859,2495,5101,1384,5825,5539,1734,4694,7444,8731,4653,7432,7238,9267,1719,9790,6698,6049,2948,4962,8614,2381,2866,6384,11786,775,4155,7072,9670,2011,4684,6722,1077,7784,7614,217,90,9505,4379,1799,1159,6056,11386,5041,3383,102,12112,9520,8228,9636,668,210,4688,3381,2281,2261,11425,7820,2252,9565,7195,8650,7037,11164,9071,1220,1974,6262,8288,4926,1069,206,7288,4139,4020,728,10582,10621,4568,5054,9984,6837,236,7164,9106,9007,3765,700,4173,1524,11782,6690,9860,2926,538,11340,6889,10459,7255,7705,6244,10579,7541,10909,11397,9092,115,2610,5294,10509,3454,4985,2496];
        uint256[] memory pk = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            pk[i] = tmp_pk[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint[512] memory tmp_s2 = [uint(65), 12196,12269,13,12173,97,79,12223,12245,12144,225,11936,12167,11969,12261,71,49,109,12147,70,11977,12167,41,33,12243,12213,12239,12134,120,12190,12236,12070,10,48,12282,225,321,23,12010,175,12213,142,54,24,201,92,197,12109,12244,180,5,12238,418,73,242,12243,75,44,34,22,12283,166,55,11998,385,101,309,11974,11962,12286,230,12120,352,11992,35,12029,32,12214,458,208,116,12125,11876,224,12180,64,12091,12162,12032,12171,354,12116,12254,307,12013,51,18,12186,27,12223,12217,120,148,12243,12255,12244,92,168,12201,12147,11999,12224,56,12220,12222,12227,61,176,62,12065,357,179,46,12157,12223,247,35,12180,84,12231,12174,12074,32,12028,12093,12279,12266,372,12212,135,12095,118,12237,12091,12283,12219,193,6,58,12179,375,4,107,12227,12269,12170,192,122,206,90,12095,156,12020,12206,12263,151,12110,212,172,80,11986,40,154,213,12279,12243,12101,146,125,5,2,347,12049,12279,37,161,12118,12224,12199,77,160,12197,24,65,124,12002,12230,96,12106,12016,367,12197,215,32,75,125,58,12043,343,150,12137,12142,407,177,12275,124,362,12203,12206,333,12228,12085,444,54,12119,12251,11994,12,11904,61,12250,12167,12082,11953,11958,143,12038,122,113,12029,87,12230,174,12248,109,7,438,28,12237,96,223,98,246,12243,12166,82,12244,137,12006,12048,12216,103,200,12166,12,30,12230,184,152,369,12058,44,12281,97,12248,49,12271,12095,12217,461,11968,12161,12121,145,12228,12094,142,112,12081,217,74,12205,178,242,11986,12215,348,17,12112,94,12274,12273,12107,152,12260,12209,58,52,12219,12277,12208,66,12142,44,12189,12206,12167,12184,120,23,12136,11892,42,12155,12237,113,221,12265,12032,12223,70,54,12224,178,12079,87,12161,125,37,82,85,11975,225,12006,12268,113,90,458,12104,12217,12144,12285,93,12038,184,12240,12191,12234,12136,33,12155,176,12287,12262,92,12016,12123,33,417,12262,146,12246,12263,12159,184,12253,158,23,78,82,12256,12285,12235,12070,12050,12094,12191,12125,115,20,210,12225,61,12238,221,62,12092,36,1,188,26,52,12126,12256,12220,85,12207,12043,72,124,12226,462,78,12176,49,301,63,12045,12153,12170,12092,12127,11813,204,11947,12210,12188,204,11880,262,12132,93,12279,21,46,12141,156,80,12015,287,12200,11987,11932,0,12229,80,11843,12181,31,12211,49,12155,12173,12261,12149,96,12180,264,12136,12063,126,224,12215,88,12169,12250,98,136,12226,12152,76,12039,202,120,379,12260,35,271,12192,12243,25,12271,12102,138,12228,12287,12100,21,234,12220,12260,12168,12150,12270,11995,260,193,284,251,12088,12240,12084,12275,12089,12124,12047,12288,135,145,12287,12079,1];
        ZKNOX_falcon.Signature memory sig;
        sig.s2 = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            sig.s2[i] = tmp_s2[i];
        }
        // message
        bytes memory message = "My name is Simon";
        sig.salt =
            "\x91\x89\x90\xff\x93\xe0\x65\x6b\x5f\x75\xb0\x87\x29\xc6\x0e\x6a\x9d\x73\x52\xb9\xef\xd2\xe3\x3e\x3d\x1b\xa6\xe6\xd8\x9e\xdf\xa6\x71\x26\x6e\xce\x6b\xe7\xbb\x5a";
        bool result = falcon.verify(message, sig, pk, false);
        assertEq(true, result);
    }

    function testVector2() public view {
        // public key
        // forgefmt: disable-next-line
        uint[512] memory tmp_pk = [uint(8494), 9875,5391,1879,708,7214,6161,7426,130,4397,5498,8631,2407,9977,1931,7029,2352,991,9225,9158,8285,955,12093,4942,2664,778,3383,11334,11105,10565,3474,7022,2706,1183,6455,1113,1385,4181,5984,1364,6193,7574,2703,11943,2783,9363,10213,6442,10177,6408,8584,2766,1171,7190,253,3679,2625,7796,8043,5703,2065,459,1063,5107,475,7421,2950,1363,9991,2222,1222,2148,12181,10486,7239,2220,8612,10147,11233,10557,3816,7607,2043,9737,1487,6402,7156,4425,11155,8706,2669,9984,4688,8809,3126,5346,8576,11683,12012,2541,7468,3700,12043,6636,274,7905,1637,11874,8091,6388,2132,3454,5363,11278,8138,4104,3664,6955,7423,9252,5243,717,9654,11089,2662,5813,2725,3997,7882,8147,1972,5360,9958,6537,9866,1837,9724,2515,6909,11077,7382,8940,10578,66,991,11249,12078,5661,297,4236,5240,10615,8894,6752,1599,8903,4789,8794,721,143,708,3893,9853,10975,12240,4519,3983,9215,420,8767,11835,10220,3914,10930,3539,11989,4395,2901,1427,7668,5489,4941,6674,12249,5831,3530,12171,10261,775,894,11564,5706,3810,11670,9294,9899,5872,9997,9218,8757,7970,11087,3323,4779,9473,12172,9576,2989,1404,11193,376,7670,9520,11007,10252,55,8952,3523,8081,2097,6848,11377,6165,5777,12044,12000,8941,1892,8951,4426,8954,9118,4116,7340,10060,9311,7351,11995,9476,6246,2151,1574,4104,12141,880,3709,2410,8871,1771,8281,11433,8802,5517,7260,8932,2340,11134,8858,1110,2811,6777,10364,9649,7387,1996,6561,7065,2190,12094,11677,10503,2145,11418,10041,9467,109,5395,5299,7200,11203,3966,6117,1065,3458,5521,12182,6969,1134,7108,648,285,8703,100,12113,6653,7377,6804,1717,9467,10055,4009,3545,7482,28,4253,47,12043,7057,1286,10754,3347,3280,3738,3323,7715,6500,350,12245,11148,1705,6450,336,2873,176,9059,2491,7546,2877,7417,9768,2526,2893,551,9462,1754,3452,7819,10010,844,4087,8473,5019,9155,12253,8338,10746,6837,9485,7469,4277,8497,10631,2810,5104,5895,7050,298,1144,3489,7210,11509,4913,7844,1396,9705,11371,1646,3089,7918,12187,6710,106,6810,3783,9423,180,3100,228,6112,9775,3407,10474,3340,232,11654,454,2551,6891,10879,2473,6594,9791,6870,5661,5877,8893,3075,4752,1135,3859,2495,5101,1384,5825,5539,1734,4694,7444,8731,4653,7432,7238,9267,1719,9790,6698,6049,2948,4962,8614,2381,2866,6384,11786,775,4155,7072,9670,2011,4684,6722,1077,7784,7614,217,90,9505,4379,1799,1159,6056,11386,5041,3383,102,12112,9520,8228,9636,668,210,4688,3381,2281,2261,11425,7820,2252,9565,7195,8650,7037,11164,9071,1220,1974,6262,8288,4926,1069,206,7288,4139,4020,728,10582,10621,4568,5054,9984,6837,236,7164,9106,9007,3765,700,4173,1524,11782,6690,9860,2926,538,11340,6889,10459,7255,7705,6244,10579,7541,10909,11397,9092,115,2610,5294,10509,3454,4985,2496];
        uint256[] memory pk = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            pk[i] = tmp_pk[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint[512] memory tmp_s2 = [uint(12074), 157,12208,12214,12111,280,96,11775,12260,204,132,12014,12206,290,12229,26,12213,82,31,12191,152,188,12103,294,30,12223,130,12126,209,12172,41,12261,11884,12264,270,12085,12140,50,12063,12211,117,94,12082,41,12219,219,0,11990,73,12176,11953,12251,71,42,422,229,454,225,6,25,11988,11,134,6,64,12285,12090,12226,12281,56,40,111,349,12251,12199,241,148,12172,263,103,247,295,436,272,46,12113,29,11980,102,12180,12259,56,12244,0,5,12247,22,22,12212,12200,12097,12238,72,15,12235,11877,19,12106,12254,41,132,323,206,247,167,319,12051,12098,12195,40,104,12248,12255,38,104,318,12176,291,240,4,138,12141,12103,12247,60,12014,164,79,85,12240,182,12219,12260,243,11882,87,64,96,35,12004,202,161,12103,12061,281,12243,413,308,175,12234,64,12281,258,383,52,12271,322,12256,40,43,12172,12254,385,11,138,12244,12193,12287,3,210,164,12155,11972,12136,12124,102,84,12210,12052,12253,349,308,288,12120,12114,12222,12285,12210,131,194,12283,118,12249,12111,12119,12120,201,228,12018,234,11,12026,12247,12073,60,100,76,11853,165,12187,127,12180,12216,56,12014,12255,114,82,12282,221,87,178,12276,12047,120,11955,12135,210,78,12228,123,49,158,12271,12159,145,12134,12273,76,61,48,12142,12171,85,134,244,12015,100,183,167,12150,46,12253,44,12080,12277,12286,87,276,12065,12151,12051,167,136,12263,12167,12234,12084,12182,67,236,223,87,12068,12176,280,12137,12238,12146,138,12026,12247,108,22,6,12103,12237,12267,12186,12086,12125,201,11984,12028,12183,12168,98,438,12063,126,68,12124,12259,12242,12247,12185,12110,17,22,352,76,12242,410,12263,118,3,239,307,12256,12137,23,84,174,52,12229,12124,12,12280,134,152,74,196,144,12231,110,149,12137,12264,315,234,180,12077,12103,12229,12124,12172,55,323,12070,41,12171,144,30,12085,11996,32,133,8,34,148,166,12243,93,310,244,12287,126,12037,12093,54,12279,112,12156,12133,33,250,12115,167,2,11954,174,12008,12118,12203,137,100,238,12228,1,12145,44,221,59,9,137,13,12169,144,37,103,1,293,46,324,58,168,12069,16,12153,12130,186,12162,53,11906,64,52,100,12211,321,45,12266,117,110,12069,119,12136,12192,94,54,12251,12175,12288,12133,12164,12069,12053,177,94,12247,109,12287,12191,112,12086,0,12244,1,66,14,237,29,178,7,12061,99,12242,12170,101,35,122,208,70,12174,12000,12132,12203,12288,12082,12111,12118,84,255,156,12257,12019,11883,12176,61,164,370,117,62,12068,12233,22,12247,12007,12065,79,12010,170,11989,406,73,12086,12158,12246,12228,12238,78,12021,137];
        ZKNOX_falcon.Signature memory sig;
        sig.s2 = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            sig.s2[i] = tmp_s2[i];
        }
        // message
        bytes memory message = "My name is Nicolas";
        sig.salt =
            "\x13\x57\x9b\x4e\xf5\xf6\xb6\x42\x65\x63\xd7\x19\x5b\x8c\x5b\x84\x73\x6b\x14\x26\x61\x60\x34\x2c\x40\x93\xf8\xab\xea\x48\x37\x1b\xa9\x4c\xc0\x6d\xcb\x6b\x8a\x8e";
        bool result = falcon.verify(message, sig, pk, false);
        assertEq(true, result);
    }

    function testVector3() public view {
        // public key
        // forgefmt: disable-next-line
        uint[512] memory tmp_pk = [uint(8494), 9875,5391,1879,708,7214,6161,7426,130,4397,5498,8631,2407,9977,1931,7029,2352,991,9225,9158,8285,955,12093,4942,2664,778,3383,11334,11105,10565,3474,7022,2706,1183,6455,1113,1385,4181,5984,1364,6193,7574,2703,11943,2783,9363,10213,6442,10177,6408,8584,2766,1171,7190,253,3679,2625,7796,8043,5703,2065,459,1063,5107,475,7421,2950,1363,9991,2222,1222,2148,12181,10486,7239,2220,8612,10147,11233,10557,3816,7607,2043,9737,1487,6402,7156,4425,11155,8706,2669,9984,4688,8809,3126,5346,8576,11683,12012,2541,7468,3700,12043,6636,274,7905,1637,11874,8091,6388,2132,3454,5363,11278,8138,4104,3664,6955,7423,9252,5243,717,9654,11089,2662,5813,2725,3997,7882,8147,1972,5360,9958,6537,9866,1837,9724,2515,6909,11077,7382,8940,10578,66,991,11249,12078,5661,297,4236,5240,10615,8894,6752,1599,8903,4789,8794,721,143,708,3893,9853,10975,12240,4519,3983,9215,420,8767,11835,10220,3914,10930,3539,11989,4395,2901,1427,7668,5489,4941,6674,12249,5831,3530,12171,10261,775,894,11564,5706,3810,11670,9294,9899,5872,9997,9218,8757,7970,11087,3323,4779,9473,12172,9576,2989,1404,11193,376,7670,9520,11007,10252,55,8952,3523,8081,2097,6848,11377,6165,5777,12044,12000,8941,1892,8951,4426,8954,9118,4116,7340,10060,9311,7351,11995,9476,6246,2151,1574,4104,12141,880,3709,2410,8871,1771,8281,11433,8802,5517,7260,8932,2340,11134,8858,1110,2811,6777,10364,9649,7387,1996,6561,7065,2190,12094,11677,10503,2145,11418,10041,9467,109,5395,5299,7200,11203,3966,6117,1065,3458,5521,12182,6969,1134,7108,648,285,8703,100,12113,6653,7377,6804,1717,9467,10055,4009,3545,7482,28,4253,47,12043,7057,1286,10754,3347,3280,3738,3323,7715,6500,350,12245,11148,1705,6450,336,2873,176,9059,2491,7546,2877,7417,9768,2526,2893,551,9462,1754,3452,7819,10010,844,4087,8473,5019,9155,12253,8338,10746,6837,9485,7469,4277,8497,10631,2810,5104,5895,7050,298,1144,3489,7210,11509,4913,7844,1396,9705,11371,1646,3089,7918,12187,6710,106,6810,3783,9423,180,3100,228,6112,9775,3407,10474,3340,232,11654,454,2551,6891,10879,2473,6594,9791,6870,5661,5877,8893,3075,4752,1135,3859,2495,5101,1384,5825,5539,1734,4694,7444,8731,4653,7432,7238,9267,1719,9790,6698,6049,2948,4962,8614,2381,2866,6384,11786,775,4155,7072,9670,2011,4684,6722,1077,7784,7614,217,90,9505,4379,1799,1159,6056,11386,5041,3383,102,12112,9520,8228,9636,668,210,4688,3381,2281,2261,11425,7820,2252,9565,7195,8650,7037,11164,9071,1220,1974,6262,8288,4926,1069,206,7288,4139,4020,728,10582,10621,4568,5054,9984,6837,236,7164,9106,9007,3765,700,4173,1524,11782,6690,9860,2926,538,11340,6889,10459,7255,7705,6244,10579,7541,10909,11397,9092,115,2610,5294,10509,3454,4985,2496];
        uint256[] memory pk = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            pk[i] = tmp_pk[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint[512] memory tmp_s2 = [uint(394), 103,208,244,12166,12270,12258,12098,12180,12287,12276,71,91,12258,167,78,12233,38,149,12237,170,146,12235,377,393,17,12005,12194,63,72,12211,12172,139,12112,52,12275,87,38,12032,153,12168,223,12243,26,11961,12278,12287,12153,12253,12060,12205,12110,217,12123,12174,12213,264,12118,12159,12172,12104,12193,245,28,12175,12092,86,12030,227,11976,12210,102,12040,12030,0,254,50,45,302,12004,217,36,12075,11,42,11935,12179,293,12255,67,12105,12070,118,12235,12023,12234,12161,12126,281,22,12062,77,206,201,12154,7,177,127,53,12266,60,45,104,12159,12047,122,12226,12225,320,319,9,12182,12252,157,12285,268,8,88,12267,12255,123,46,240,12024,232,145,12047,66,12160,12267,155,269,12230,60,12285,11871,12194,78,12192,255,11909,12257,12191,12201,91,279,12126,12204,15,131,12240,12159,11953,12248,12180,12272,89,66,161,12218,12136,257,238,101,110,12236,12210,12249,12225,21,41,12151,101,182,102,12246,100,15,12227,12152,100,206,12265,12286,192,150,12248,12202,34,280,12034,268,15,47,133,42,12250,12055,314,12161,12165,309,12232,12095,231,115,207,61,12189,107,12144,12153,217,44,12048,12264,12011,281,103,157,12123,12006,5,12100,108,12223,52,86,56,21,12283,12175,16,12165,12200,12078,54,12237,202,118,12173,148,135,12196,104,194,12208,52,87,12112,29,4,12265,268,100,199,247,12263,26,12249,12258,125,12284,12156,12090,12135,12239,12254,44,12279,12162,12219,12147,190,12286,12096,12203,12169,395,287,131,12257,12086,6,12109,11,132,56,12167,298,12253,12248,153,140,12217,12172,107,12178,12135,12280,12213,12271,12258,12271,12277,164,12153,72,11941,12208,12202,121,12151,12281,52,72,12082,12212,12224,21,160,166,50,158,12085,12257,12283,11859,12070,12147,12161,12201,2,121,221,11988,12266,245,150,123,284,10,207,124,12090,12150,12265,12241,199,237,90,12134,130,82,12007,208,12133,88,164,42,343,268,101,12190,63,11937,10,42,49,175,12184,12120,42,12170,12238,173,30,22,154,151,53,12266,126,167,12191,12252,12208,12148,157,63,148,12025,7,12219,12166,103,12242,12077,12004,12269,13,44,12021,245,12057,12037,168,0,12186,250,12278,12254,12209,114,313,12108,12266,12125,45,123,69,12100,111,41,28,157,13,130,12216,12169,173,12086,178,12148,96,30,12118,238,12051,12098,109,30,69,203,81,84,54,36,12276,12271,93,12259,391,12252,12215,12020,68,77,11969,4,12260,198,12061,279,81,12195,10,291,12064,13,185,12235,125,12208,215,12138,78,16,32,12279,352,12266,38,118,12116,112,12248,126,11886,21,12096,45,76,12100,127,12057,12219,38,7,12054,12209,183];
        ZKNOX_falcon.Signature memory sig;
        sig.s2 = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            sig.s2[i] = tmp_s2[i];
        }
        // message
        bytes memory message = "We are ZKNox";
        sig.salt =
            "\x5a\x54\x83\x5f\x8b\x04\xd4\xc0\xb2\x96\x67\xba\xeb\x0c\x32\x58\x80\x9e\xe6\x98\xdb\xc0\x35\x36\xa1\xc9\x36\xc8\x11\xf6\xe6\xf6\x92\x10\xf5\x63\x20\x80\x06\x49";
        bool result = falcon.verify(message, sig, pk, false);
        assertEq(true, result);
    }

    function testVector4() public view {
        // public key
        // forgefmt: disable-next-line
        uint[512] memory tmp_pk = [uint(8494), 9875,5391,1879,708,7214,6161,7426,130,4397,5498,8631,2407,9977,1931,7029,2352,991,9225,9158,8285,955,12093,4942,2664,778,3383,11334,11105,10565,3474,7022,2706,1183,6455,1113,1385,4181,5984,1364,6193,7574,2703,11943,2783,9363,10213,6442,10177,6408,8584,2766,1171,7190,253,3679,2625,7796,8043,5703,2065,459,1063,5107,475,7421,2950,1363,9991,2222,1222,2148,12181,10486,7239,2220,8612,10147,11233,10557,3816,7607,2043,9737,1487,6402,7156,4425,11155,8706,2669,9984,4688,8809,3126,5346,8576,11683,12012,2541,7468,3700,12043,6636,274,7905,1637,11874,8091,6388,2132,3454,5363,11278,8138,4104,3664,6955,7423,9252,5243,717,9654,11089,2662,5813,2725,3997,7882,8147,1972,5360,9958,6537,9866,1837,9724,2515,6909,11077,7382,8940,10578,66,991,11249,12078,5661,297,4236,5240,10615,8894,6752,1599,8903,4789,8794,721,143,708,3893,9853,10975,12240,4519,3983,9215,420,8767,11835,10220,3914,10930,3539,11989,4395,2901,1427,7668,5489,4941,6674,12249,5831,3530,12171,10261,775,894,11564,5706,3810,11670,9294,9899,5872,9997,9218,8757,7970,11087,3323,4779,9473,12172,9576,2989,1404,11193,376,7670,9520,11007,10252,55,8952,3523,8081,2097,6848,11377,6165,5777,12044,12000,8941,1892,8951,4426,8954,9118,4116,7340,10060,9311,7351,11995,9476,6246,2151,1574,4104,12141,880,3709,2410,8871,1771,8281,11433,8802,5517,7260,8932,2340,11134,8858,1110,2811,6777,10364,9649,7387,1996,6561,7065,2190,12094,11677,10503,2145,11418,10041,9467,109,5395,5299,7200,11203,3966,6117,1065,3458,5521,12182,6969,1134,7108,648,285,8703,100,12113,6653,7377,6804,1717,9467,10055,4009,3545,7482,28,4253,47,12043,7057,1286,10754,3347,3280,3738,3323,7715,6500,350,12245,11148,1705,6450,336,2873,176,9059,2491,7546,2877,7417,9768,2526,2893,551,9462,1754,3452,7819,10010,844,4087,8473,5019,9155,12253,8338,10746,6837,9485,7469,4277,8497,10631,2810,5104,5895,7050,298,1144,3489,7210,11509,4913,7844,1396,9705,11371,1646,3089,7918,12187,6710,106,6810,3783,9423,180,3100,228,6112,9775,3407,10474,3340,232,11654,454,2551,6891,10879,2473,6594,9791,6870,5661,5877,8893,3075,4752,1135,3859,2495,5101,1384,5825,5539,1734,4694,7444,8731,4653,7432,7238,9267,1719,9790,6698,6049,2948,4962,8614,2381,2866,6384,11786,775,4155,7072,9670,2011,4684,6722,1077,7784,7614,217,90,9505,4379,1799,1159,6056,11386,5041,3383,102,12112,9520,8228,9636,668,210,4688,3381,2281,2261,11425,7820,2252,9565,7195,8650,7037,11164,9071,1220,1974,6262,8288,4926,1069,206,7288,4139,4020,728,10582,10621,4568,5054,9984,6837,236,7164,9106,9007,3765,700,4173,1524,11782,6690,9860,2926,538,11340,6889,10459,7255,7705,6244,10579,7541,10909,11397,9092,115,2610,5294,10509,3454,4985,2496];
        uint256[] memory pk = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            pk[i] = tmp_pk[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint[512] memory tmp_s2 = [uint(90), 12285,12152,12163,12276,12034,29,12066,12251,166,118,48,117,18,26,12220,12248,144,12212,12210,90,12164,117,29,161,140,135,12154,294,328,12036,193,12147,104,21,73,12099,326,11945,12221,12219,12193,36,324,6,11990,12288,12075,12228,12214,12236,12238,90,110,207,12126,12172,12257,188,146,12104,385,73,12219,10,12178,174,211,12285,121,12247,186,12234,95,300,100,206,178,12154,274,12166,12075,12179,11950,372,12233,12101,12132,45,12147,31,167,12122,179,5,12213,12208,12040,12281,279,12160,11926,12227,12131,56,12228,1,12265,56,12224,12242,12277,307,12161,12256,402,25,11990,157,12256,134,12264,12158,12272,12012,12268,12214,22,12216,12027,12070,289,119,45,12268,12112,340,12099,11987,40,16,250,158,153,206,60,12137,13,401,12167,104,406,12171,12196,12135,12148,71,12260,12210,12157,12079,120,11916,12240,12089,12200,99,12097,118,7,12250,301,12277,150,148,64,12234,12117,11997,12275,120,131,12030,12101,12191,163,12179,11953,12230,118,19,135,61,12157,41,319,12107,12239,268,12216,69,423,50,200,173,173,89,113,165,12257,128,299,271,12229,12201,133,12065,12150,12070,144,86,12122,12204,12151,12132,12261,395,12275,12058,122,153,12202,245,12035,12198,181,12022,12222,12173,12111,180,264,12062,4,11876,138,166,209,271,12196,138,12119,12017,12269,110,12231,11857,12197,12220,41,12042,12086,66,11,11996,12215,11963,12287,12277,161,12204,79,112,317,42,11846,12277,67,12182,12134,89,186,17,6,12208,128,98,12080,12168,202,103,79,12193,85,12175,12156,12168,11971,12162,12015,6,57,12081,255,12117,12192,25,12040,111,12197,138,351,12168,266,12193,166,12223,12272,147,12218,65,12266,96,30,11993,12141,241,12174,89,12208,12280,12082,116,11912,14,12089,47,23,10,12263,12246,90,12267,8,313,12223,12046,135,11924,122,29,12172,52,18,278,12185,225,12137,12179,16,12081,12102,116,12143,12011,12219,12251,81,12214,12087,12286,12145,241,12175,12250,12224,127,183,12204,21,53,11995,274,163,12252,294,185,12210,128,310,78,70,356,11957,85,219,83,11959,12103,3,12140,300,12195,12027,12272,44,208,12160,209,12171,225,12220,29,231,12281,85,106,12154,12211,12287,90,22,12085,11988,12204,20,12121,282,12235,25,163,12268,12007,12139,12243,12230,12055,125,297,88,12116,105,38,12267,12244,12249,12100,56,211,90,12133,12012,12099,12092,12236,176,12231,12060,65,90,12216,12265,11989,12158,82,12266,12200,58,48,12258,18,12058,11991,12226,12184,11968,199,12236,12273,63,12142,105,12012,119,12233,12275,12228,7,25,12236,12115,12126,12262,12253,12135,90,95,12251,22,12265,12033,12229,12284,12224,12139,12237,12231,167,12227,47,12276,233];
        ZKNOX_falcon.Signature memory sig;
        sig.s2 = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            sig.s2[i] = tmp_s2[i];
        }
        // message
        bytes memory message = "Practical security on the chain.";
        sig.salt =
            "\xc3\xff\x24\xbc\x6b\x6d\x7a\x3d\x30\x7c\xe7\xb1\x73\x1e\x7d\xf5\x96\x90\xd0\x53\x0d\x7f\x2f\x5b\xb9\xed\x37\xd1\x80\x16\x9a\x6c\x1b\xb0\x22\x25\x2a\xb8\xcc\x68";
        bool result = falcon.verify(message, sig, pk, false);
        assertEq(true, result);
    }
}
