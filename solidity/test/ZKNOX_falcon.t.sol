// code generated using pythonref/generate_falcon_test_vectors.py.
pragma solidity ^0.8.25;

import {Test, console} from "forge-std/Test.sol";
import "../src/ZKNOX_NTT.sol";
import "../src/ZKNOX_falcon_utils.sol";
import "../src/ZKNOX_falcon.sol";
import "../src/ZKNOX_falcon_deploy.sol";

contract ZKNOX_FalconTest is Test {
    ZKNOX_falcon falcon;

    //stateful initialisation
    function setUp() public {
        bytes32 salt = keccak256(abi.encodePacked("ZKnox"));

        falcon = new ZKNOX_falcon();
    }

    function testVector0() public view {
        // public key
        // forgefmt: disable-next-line
        uint256[32] memory tmp_pkc = [5662797900309780854973796610500849947334657117880689816302353465126500706865, 19773102689601973621062070293263100534733440101750387150077711329493973274058, 14606681890476865709816748627007131256488820167404174518724605890405097603719, 15845234755931409677594030697035096324340457247480758851130851814703350289524, 5524941775098342886171484209767745714294893760953145782448900256027476885810, 15301033023652038200658165594502048003364566882283859976805808429697192567788, 18875246040654000517074755552890901133645669291006567534900678519700207707731, 11843395683334522200668269515783436692309636627649985746204914551011013629864, 8419305811746464065544475584323153271481428319969733938911379662274846467111, 18343417927809591481517183183479503623951147924071925629514120039495430967592, 10007451325105194000131443764495043320645967197761209321537835667210153693191, 779487061150515667795843171268512499191273448454307717194241961063365614179, 14889466660684110621550004892629051623956217990147793956971155241422811501259, 2995124819739638247263964985959552967489690950312509006670204449438399867779, 16698797261630410217796026169071784061995015858612862963622742163763641855864, 13129716852402613948762495927854872029721399215764359316540986925328111906305, 8620514528683669238836845045565231437047299941974001946945409334379184590766, 5184181041252042291984928267300200431567362250531180743278111084485128161037, 15555356690664302555826193017277818624355238475260445618945780405430020481200, 19264077329172342356817033544893125657281034846341493111114385757819435942150, 8708853592016768361541207473719404660232059936330605270802350059910738161396, 21018648773068189736719755689803981281912117625241701774409626083005150670687, 267026197077955750670312407002345619518873569178283514941902712705828521229, 14359242962640593260752841229079220345384234239741953227891227234975247894859, 8320354099602406351863744856415421903486499003224102136141447162113864442068, 17564344674783852357247325589247473882830766139750808683064015010041459773180, 12601232530472338126510941067000966999586933909071534455578397454667291628041, 17820703520112071877812607241017358905719406745793395857586668204300579510382, 20977963461796112341763752649093803701879441191599296283127418471622134932903, 5627732773047409045458881938100601008133088383905060686572856121439798106767, 2602661464000108367786729796742170641292899005030508211661215565063118195399, 20110282897068872581106488251090599973196923955248066799683528955504800771309];
        uint256[] memory pkc = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            pkc[i] = tmp_pkc[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s2 = [21649177790571192151286347015496942774998047093443469911824293759971769921428, 268561837228003295750097962055377173144230591962156166013405983500166901722, 373131625068829243878329325423678131041649088938736656507320119997555081235, 21486956906798985719744375447418457093904022330284178432016463274856548335792, 21046685012579207363779083391328077072214150550607548013536002123977240477986, 21624441549379106406854913087313490894795813631028932379313967382686196510643, 21269307451108998178385520109334456835115990194191195737525785771781959909565, 21502531263687643325340175878774636041406187334634592429142727315400727670519, 21645644447053892427347704348572035349652711108703358737702992269605067960232, 21642434488002171509128269223391903377510003992725863045650229316731768864833, 143119470082566254482735508500984469699860060818744295831990820277956915152, 21329707513272854740751761229950211571450422559001525308753079369050633482098, 21274936790822894191602613586986915689519661452929637034834680332795904471016, 323334360936185288001981502514033468909440677622868552612107777952939454224, 123679299536821298309830082798375208376610949331800767508152351976155721432, 21491932279213207751766589616948004610084312966776105784769653908907333255233, 21555542660741624619295241800731825770453854520453475890665283178064948298017, 21221927933047296480928267470961179332618989116613413084747202280410795475009, 21640345869013883370330016229125346816596850570010888955143002957579576672404, 447342652619835196009820811808904031226531727490450346028265756926131110099, 48035216006736122407389636281329469805748676305369281203171327493607718987, 21518434450972238337302563984051994092825336572101022453461300155810011086937, 333938521709614508411251346141738162769014840087489168548614530158677590118, 21322638943617910190789463252175561671279485636811843560369873363276365299985, 67147494647851671533097211665243328708469268023218856658099323225006878424, 116612876865130439291083919507652316067243925780313881626436539371081498829, 21676008001193555476662926248472147257885449589381323941811680418544747741313, 127542681867544440369323810542605531185295482507825078859650437370710524036, 21474589727324966696397422730377349856660942504908738086594141842221836664953, 204955823209712158529229531556743920712069026834325166406926177293848227824, 55101682679218165125147635923326063419450638759116465378302788679604895838, 198216003314064520968126849996156841255555215727010889276036638293899030319];
        uint256[] memory s2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            s2[i] = tmp_s2[i];
        }
        // message
        bytes memory message = "My name is Renaud";
        bytes memory salt =
            "\xab\x0b\xae\x31\x63\x39\x89\x43\x04\xe3\x58\x77\xb0\xc2\x8a\x9b\x1f\xd1\x66\xc7\x96\xb9\xcc\x25\x8a\x06\x4a\x8f\x57\xe2\x7f\x2a\x5b\x8d\x54\x8a\x72\x8c\x94\x44";
        bool result = falcon.verify(message, salt, s2, pkc);
        assertEq(true, result);
    }

    function testVector1() public view {
        // public key
        // forgefmt: disable-next-line
        uint256[32] memory tmp_pkc = [5662797900309780854973796610500849947334657117880689816302353465126500706865, 19773102689601973621062070293263100534733440101750387150077711329493973274058, 14606681890476865709816748627007131256488820167404174518724605890405097603719, 15845234755931409677594030697035096324340457247480758851130851814703350289524, 5524941775098342886171484209767745714294893760953145782448900256027476885810, 15301033023652038200658165594502048003364566882283859976805808429697192567788, 18875246040654000517074755552890901133645669291006567534900678519700207707731, 11843395683334522200668269515783436692309636627649985746204914551011013629864, 8419305811746464065544475584323153271481428319969733938911379662274846467111, 18343417927809591481517183183479503623951147924071925629514120039495430967592, 10007451325105194000131443764495043320645967197761209321537835667210153693191, 779487061150515667795843171268512499191273448454307717194241961063365614179, 14889466660684110621550004892629051623956217990147793956971155241422811501259, 2995124819739638247263964985959552967489690950312509006670204449438399867779, 16698797261630410217796026169071784061995015858612862963622742163763641855864, 13129716852402613948762495927854872029721399215764359316540986925328111906305, 8620514528683669238836845045565231437047299941974001946945409334379184590766, 5184181041252042291984928267300200431567362250531180743278111084485128161037, 15555356690664302555826193017277818624355238475260445618945780405430020481200, 19264077329172342356817033544893125657281034846341493111114385757819435942150, 8708853592016768361541207473719404660232059936330605270802350059910738161396, 21018648773068189736719755689803981281912117625241701774409626083005150670687, 267026197077955750670312407002345619518873569178283514941902712705828521229, 14359242962640593260752841229079220345384234239741953227891227234975247894859, 8320354099602406351863744856415421903486499003224102136141447162113864442068, 17564344674783852357247325589247473882830766139750808683064015010041459773180, 12601232530472338126510941067000966999586933909071534455578397454667291628041, 17820703520112071877812607241017358905719406745793395857586668204300579510382, 20977963461796112341763752649093803701879441191599296283127418471622134932903, 5627732773047409045458881938100601008133088383905060686572856121439798106767, 2602661464000108367786729796742170641292899005030508211661215565063118195399, 20110282897068872581106488251090599973196923955248066799683528955504800771309];
        uint256[] memory pkc = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            pkc[i] = tmp_pkc[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s2 = [194682686577610227246794695790715774126944874938428808986542410689990230135, 21209578797232041709286278565353757389708021321244238293915949802285695044, 21546703545696180855681069975918364541250822957120857472490640683003863957701, 108107261259864131647640314879209136401220200481432262235088649804704657342, 21278466953220005277143488220296682264666514238642259014027042528002340892575, 21356210062360815728479234982603977588355313360474497173479485111652984881228, 28600167887805239548180466269769444397148101494273412969588445637293899880, 21373553283207204848640764270744320634713030558788244955341093174867868844108, 187286759473542881013576550970547849203367076170543633199274462815663238984, 60401549871109243896928853540737834993354618518134892921660777037918580606, 95732160517032057921925508485491761636601354631527318630385656666669920224, 21207469605214262683320661946857337645668320236778396279280173490279165734874, 21460455414142077064495604464593687296831794405111486628929870506891858673755, 5631668306887557050738494558619849146545757022917648253048896176919490406, 63930472044930065098192495828103724454479173831074445973909762468460625926, 7395981111584989711043970861311579896839398611611897377580501422996074344, 14458188131905473014631970539328817583903503039603445810250206317962199091, 47708110970044448321413739320727634051394143775801958882647561653199372524, 21695119179420030207088390014818971321051832965749095039316269331789351104509, 21596496221609714947242360606041609205955645180558924037830182175085078523726, 21103550603542902924851553372701121327442172391783259240989921079025583063193, 21700415654645830251846677077602552557948858800574869254354992268239749054624, 362531723894909670115203445621122542563648112070875341719204299042632302813, 512397349459355985850600546641917543052807609594473422614121390394526859303, 222950675969320959868148959667226049295692074114584663424378885879099371392, 104245864054057079326974862843064049808915620551997214427772035469701033736, 21550557362206209354206290369581073342571981668216140867660132300165473513435, 21623004206828566858889248265475832231414896189265833848347282522444344524844, 174920398624128739911197446561742917144717286645578866601687611454642651271, 408469186433220486059854700233846396289332066861950535963850596883314114568, 433206415358416069256686675196271782522173307238240827950474013955889049588, 256517211524099221464913041288946341925530632579246662806331665088535658538];
        uint256[] memory s2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            s2[i] = tmp_s2[i];
        }
        // message
        bytes memory message = "My name is Simon";
        bytes memory salt =
            "\x91\x89\x90\xff\x93\xe0\x65\x6b\x5f\x75\xb0\x87\x29\xc6\x0e\x6a\x9d\x73\x52\xb9\xef\xd2\xe3\x3e\x3d\x1b\xa6\xe6\xd8\x9e\xdf\xa6\x71\x26\x6e\xce\x6b\xe7\xbb\x5a";
        bool result = falcon.verify(message, salt, s2, pkc);
        assertEq(true, result);
    }

    function testVector2() public view {
        // public key
        // forgefmt: disable-next-line
        uint256[32] memory tmp_pkc = [5662797900309780854973796610500849947334657117880689816302353465126500706865, 19773102689601973621062070293263100534733440101750387150077711329493973274058, 14606681890476865709816748627007131256488820167404174518724605890405097603719, 15845234755931409677594030697035096324340457247480758851130851814703350289524, 5524941775098342886171484209767745714294893760953145782448900256027476885810, 15301033023652038200658165594502048003364566882283859976805808429697192567788, 18875246040654000517074755552890901133645669291006567534900678519700207707731, 11843395683334522200668269515783436692309636627649985746204914551011013629864, 8419305811746464065544475584323153271481428319969733938911379662274846467111, 18343417927809591481517183183479503623951147924071925629514120039495430967592, 10007451325105194000131443764495043320645967197761209321537835667210153693191, 779487061150515667795843171268512499191273448454307717194241961063365614179, 14889466660684110621550004892629051623956217990147793956971155241422811501259, 2995124819739638247263964985959552967489690950312509006670204449438399867779, 16698797261630410217796026169071784061995015858612862963622742163763641855864, 13129716852402613948762495927854872029721399215764359316540986925328111906305, 8620514528683669238836845045565231437047299941974001946945409334379184590766, 5184181041252042291984928267300200431567362250531180743278111084485128161037, 15555356690664302555826193017277818624355238475260445618945780405430020481200, 19264077329172342356817033544893125657281034846341493111114385757819435942150, 8708853592016768361541207473719404660232059936330605270802350059910738161396, 21018648773068189736719755689803981281912117625241701774409626083005150670687, 267026197077955750670312407002345619518873569178283514941902712705828521229, 14359242962640593260752841229079220345384234239741953227891227234975247894859, 8320354099602406351863744856415421903486499003224102136141447162113864442068, 17564344674783852357247325589247473882830766139750808683064015010041459773180, 12601232530472338126510941067000966999586933909071534455578397454667291628041, 17820703520112071877812607241017358905719406745793395857586668204300579510382, 20977963461796112341763752649093803701879441191599296283127418471622134932903, 5627732773047409045458881938100601008133088383905060686572856121439798106767, 2602661464000108367786729796742170641292899005030508211661215565063118195399, 20110282897068872581106488251090599973196923955248066799683528955504800771309];
        uint256[] memory pkc = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            pkc[i] = tmp_pkc[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s2 = [83368463789534418773637917004411568927501911403895260829890950549917085510, 433204964410165772229288582996469014456189653196716054825558692668499701689, 21688378788326145424938921071855435819016802944263471693535254173686258008162, 146653078386307804090039222208390332928510107395024111740198918716498051188, 192913359185061762802723790788884584228224807132989579462123563036071559185, 174923844694821791934365346412698913579997006764233948403642131135873679453, 177005206335748389376011005549313189090625290449510339466352320906119938093, 134282376976841906304938012574764364392167368186650194440790850273608019721, 295386229280433231287760567181087228975995579731381654901195811143075704672, 125451425776786298050543208073374739504665461692398687750671224607865831604, 21204348602132740190454090220489702379894369405497208055988054938560954422, 21057290839861310575833430112239923949020599492746791990902359662767911600223, 21484865920369066350256879276212371710827087624812849324775341498238497980441, 21543494557077558157767139946612620445400114578116864246357529792722748714980, 21228997365271203934918701785407403377043740508677831614375438979973128335250, 254431643828719943363168790691202159618291128031672447457003103177179594883, 21643879050837399616959950329030766017889155043775699632286442235493895372917, 21366811279551276117929169765191613701197955319974913266267441812636237037646, 21589104505247657328126595328170057135533112356673392641224703632147718221626, 21705720585392722922288119193182230817709356227197695933122955562258419363817, 210582256254245321230944899365900783046047268312358467224286161015892410553, 67467298468928378461709160894009562422323667429353836471288647257142526174, 401405545565146236768414759625815235079482201871887647902854199710089019426, 242058295543645364469603196285533617537305765945903478771539828377630277659, 242387179954915486414898552751845909136723666599166526775187251675298475847, 21508158208971909325311841028614649671720264483265842805765096044974779478011, 272424195205399826356002498265657484966970152204117152351437673127721185027, 44171850718503119557848757064326318010157160096131887405350875276358201213, 21532895383888841644640511827815131680228562870491659771784274985001802608363, 21559395291054650916613143018010240154905698005554200926602924124594631749617, 305666056903143792691495556729812265352071316857396745224349351784979890241, 53006576207760733614742769062179569974763497460833291287471961013096885895];
        uint256[] memory s2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            s2[i] = tmp_s2[i];
        }
        // message
        bytes memory message = "My name is Nicolas";
        bytes memory salt =
            "\x13\x57\x9b\x4e\xf5\xf6\xb6\x42\x65\x63\xd7\x19\x5b\x8c\x5b\x84\x73\x6b\x14\x26\x61\x60\x34\x2c\x40\x93\xf8\xab\xea\x48\x37\x1b\xa9\x4c\xc0\x6d\xcb\x6b\x8a\x8e";
        bool result = falcon.verify(message, salt, s2, pkc);
        assertEq(true, result);
    }

    function testVector3() public view {
        // public key
        // forgefmt: disable-next-line
        uint256[32] memory tmp_pkc = [5662797900309780854973796610500849947334657117880689816302353465126500706865, 19773102689601973621062070293263100534733440101750387150077711329493973274058, 14606681890476865709816748627007131256488820167404174518724605890405097603719, 15845234755931409677594030697035096324340457247480758851130851814703350289524, 5524941775098342886171484209767745714294893760953145782448900256027476885810, 15301033023652038200658165594502048003364566882283859976805808429697192567788, 18875246040654000517074755552890901133645669291006567534900678519700207707731, 11843395683334522200668269515783436692309636627649985746204914551011013629864, 8419305811746464065544475584323153271481428319969733938911379662274846467111, 18343417927809591481517183183479503623951147924071925629514120039495430967592, 10007451325105194000131443764495043320645967197761209321537835667210153693191, 779487061150515667795843171268512499191273448454307717194241961063365614179, 14889466660684110621550004892629051623956217990147793956971155241422811501259, 2995124819739638247263964985959552967489690950312509006670204449438399867779, 16698797261630410217796026169071784061995015858612862963622742163763641855864, 13129716852402613948762495927854872029721399215764359316540986925328111906305, 8620514528683669238836845045565231437047299941974001946945409334379184590766, 5184181041252042291984928267300200431567362250531180743278111084485128161037, 15555356690664302555826193017277818624355238475260445618945780405430020481200, 19264077329172342356817033544893125657281034846341493111114385757819435942150, 8708853592016768361541207473719404660232059936330605270802350059910738161396, 21018648773068189736719755689803981281912117625241701774409626083005150670687, 267026197077955750670312407002345619518873569178283514941902712705828521229, 14359242962640593260752841229079220345384234239741953227891227234975247894859, 8320354099602406351863744856415421903486499003224102136141447162113864442068, 17564344674783852357247325589247473882830766139750808683064015010041459773180, 12601232530472338126510941067000966999586933909071534455578397454667291628041, 17820703520112071877812607241017358905719406745793395857586668204300579510382, 20977963461796112341763752649093803701879441191599296283127418471622134932903, 5627732773047409045458881938100601008133088383905060686572856121439798106767, 2602661464000108367786729796742170641292899005030508211661215565063118195399, 20110282897068872581106488251090599973196923955248066799683528955504800771309];
        uint256[] memory pkc = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            pkc[i] = tmp_pkc[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s2 = [222625215438031505579127074507852610564115689196496035210990191719705542738, 21676009079545422737713381060865179658839324459056031138701582900638377848741, 21700417110429881450355131003541671711179952764759253699004054421120697184193, 21543492562032043865556988121198738235882828821803141968153958109212761665386, 23299114424939793132040474886892366131501081418156330672410285025780707217, 125449080304696710954464720017230561119373994471678725889429678650124730405, 173152715719887884357233622899815337343513243853139905732911055915259461928, 21665079818564169437946849963212636168925651899610389893095113945195807899737, 21661548631868031173248617985665868846158924689859421817693929401876334325619, 21301439389021424916890219958724695162966167577527441422907326559101383540766, 309523162629360155094452927665364563602435265325015482861712315609432326284, 21601801098430467982221900867025858581149879524255805862571029829560022728801, 21670384506750038980053149935043926703834968309824011082764396306675766263826, 360763129391914414202176950632587338980831084812165678366320101041099571400, 21423347878365599531170235829174662691402110115816083024823055044286034030514, 21691583791813774388230199832002826365587893281688523377579582392926308729009, 418743185802538904212863652769337549090626410509663041026136534813908140123, 540982738239750295558347474552866423303719052512744685576196353100484259588, 199983820935202336583988510684659154281129697934677317429007977439445266073, 21491929529267791472688880803433246610199023008666486485969759322461364563921, 21538194253629759725804966535908579520128679626031365743577844565209948434382, 21697209685630014533396161982713806985264672891271207063851374154973236494410, 21660105083479219995264081016400316403735747205765836724563452342300452401034, 369275786542229138989075067259474722326889523203701806460946655893072260835, 268888505929953483372429122951880212817244027402066263419225789947243725135, 118381130843297671896321559177544654731744460290114377778579872451487793299, 415212457204585777723576537964859334224149108214525235330682225296636194787, 268891665256743650946589438675670257090726853990418597179111573867867942862, 422284428630847944775947050893371389737242366636072767769666921466003718352, 127540767705983051037607894464943101323558745436592134443382603104652898165, 180220724165554076907922847002820785242812837304081566553492921347865641110, 150502662188002183449048192742920861700750734053403302429511675122307235891];
        uint256[] memory s2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            s2[i] = tmp_s2[i];
        }
        // message
        bytes memory message = "We are ZKNox";
        bytes memory salt =
            "\x5a\x54\x83\x5f\x8b\x04\xd4\xc0\xb2\x96\x67\xba\xeb\x0c\x32\x58\x80\x9e\xe6\x98\xdb\xc0\x35\x36\xa1\xc9\x36\xc8\x11\xf6\xe6\xf6\x92\x10\xf5\x63\x20\x80\x06\x49";
        bool result = falcon.verify(message, salt, s2, pkc);
        assertEq(true, result);
    }

    function testVector4() public view {
        // public key
        // forgefmt: disable-next-line
        uint256[32] memory tmp_pkc = [5662797900309780854973796610500849947334657117880689816302353465126500706865, 19773102689601973621062070293263100534733440101750387150077711329493973274058, 14606681890476865709816748627007131256488820167404174518724605890405097603719, 15845234755931409677594030697035096324340457247480758851130851814703350289524, 5524941775098342886171484209767745714294893760953145782448900256027476885810, 15301033023652038200658165594502048003364566882283859976805808429697192567788, 18875246040654000517074755552890901133645669291006567534900678519700207707731, 11843395683334522200668269515783436692309636627649985746204914551011013629864, 8419305811746464065544475584323153271481428319969733938911379662274846467111, 18343417927809591481517183183479503623951147924071925629514120039495430967592, 10007451325105194000131443764495043320645967197761209321537835667210153693191, 779487061150515667795843171268512499191273448454307717194241961063365614179, 14889466660684110621550004892629051623956217990147793956971155241422811501259, 2995124819739638247263964985959552967489690950312509006670204449438399867779, 16698797261630410217796026169071784061995015858612862963622742163763641855864, 13129716852402613948762495927854872029721399215764359316540986925328111906305, 8620514528683669238836845045565231437047299941974001946945409334379184590766, 5184181041252042291984928267300200431567362250531180743278111084485128161037, 15555356690664302555826193017277818624355238475260445618945780405430020481200, 19264077329172342356817033544893125657281034846341493111114385757819435942150, 8708853592016768361541207473719404660232059936330605270802350059910738161396, 21018648773068189736719755689803981281912117625241701774409626083005150670687, 267026197077955750670312407002345619518873569178283514941902712705828521229, 14359242962640593260752841229079220345384234239741953227891227234975247894859, 8320354099602406351863744856415421903486499003224102136141447162113864442068, 17564344674783852357247325589247473882830766139750808683064015010041459773180, 12601232530472338126510941067000966999586933909071534455578397454667291628041, 17820703520112071877812607241017358905719406745793395857586668204300579510382, 20977963461796112341763752649093803701879441191599296283127418471622134932903, 5627732773047409045458881938100601008133088383905060686572856121439798106767, 2602661464000108367786729796742170641292899005030508211661215565063118195399, 20110282897068872581106488251090599973196923955248066799683528955504800771309];
        uint256[] memory pkc = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            pkc[i] = tmp_pkc[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s2 = [21412424242127082749610191839594829392609335319990662478876364133294951759985, 938197166425361380710370353796599425511229962339559620164675044002097409939, 21647411321071212380761415897307069808958400586121678825154806791311314649193, 21462219969556675763555611051663129394279025351199249323826899476414370939245, 21532570112142586367213716456156282998882970169651536503256279162900785278707, 21601473486094596278097689415768313475766014769988104499793352491966770261860, 150193458487198855960172412486860950466445743917494382397285067450316226641, 63936079761480428901679655785343220182344262444313383981477033448091168724, 21391218793246810542894263058024234198425450067853564400670791803242390892366, 21494022974037990514034492875641587719272379241657474320245997058192701194336, 226157044397558708313848400855036171451956097324768575903477268262834876262, 21566138777573877099557493308809750273628886950442867571793324261757020483552, 773883953089600364097561083085227543243017227910536201641816112224598491361, 21557304056970610111204775034836942486808579572748898192758264058277730004744, 21223371934745051167914669435621300396040813795764848505121538289868127272995, 21557301285044470254816923161326995105145083344818767855254692732795701833612, 358670471364258104760714939225456754161095942466404070493513978650688159835, 328210437288473321774710936334930011045884507386554434481927591059194021, 21157996108003185944232451222500907214109530742953072012336327589114699513996, 21355880957270181049275784779783162902793112397695029577916382944137202905051, 408143289567265176959499044317175596826929427503599671510878281598475436203, 21168594930748873226772498811875707934017541796377192364540189468144969646241, 19435322766729971344933822343177832892069531222182584839246203044511100500, 150511019766944497768812530943806559859096445227616250146176978210900684798, 44499656755767137370694155539619425792158039142667017406186993499424227698, 21359420528678883772827468699927033449515682905127077855108096608968277110567, 21444223072869933784225684209838546304984593361719441611816857423601015521389, 21592968965942438078516618456421132386728252108832191235632804038799762784572, 127214067098599146044102912383538310785919339012842875166013412905288794426, 201747729362989241789380364419493806857510840486777789744138313435815936003, 521222342516545346869170296352098282898180697487366395837698420813812150132, 21384480877498030869454209405815772458304077720102573529957815727485943754618];
        uint256[] memory s2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            s2[i] = tmp_s2[i];
        }
        // message
        bytes memory message = "Practical security on the chain.";
        bytes memory salt =
            "\xc3\xff\x24\xbc\x6b\x6d\x7a\x3d\x30\x7c\xe7\xb1\x73\x1e\x7d\xf5\x96\x90\xd0\x53\x0d\x7f\x2f\x5b\xb9\xed\x37\xd1\x80\x16\x9a\x6c\x1b\xb0\x22\x25\x2a\xb8\xcc\x68";
        bool result = falcon.verify(message, salt, s2, pkc);
        assertEq(true, result);
    }
}
