// code generated using pythonref/generate_hashtopoint_test_vectors.py.
pragma solidity ^0.8.25;

import {Test, console} from "forge-std/Test.sol";
import "../src/ZKNOX_HashToPoint.sol";

contract HashToPointNISTTest is Test {
    function testVector0() public pure {
        bytes memory salt =
            "\x77\x23\x13\x95\xf6\x14\x72\x93\xb6\x8c\xea\xb7\xa9\xe0\xc5\x8d\x86\x4e\x8e\xfd\xe4\xe1\xb9\xa4\x6c\xbe\x85\x47\x13\x67\x2f\x5c\xaa\xae\x31\x4e\xd9\x08\x3d\xab";
        bytes memory message = "My name is Renaud";
        // forgefmt: disable-next-line
        uint256[512] memory expected_hash = [uint256(10829), 5157,11076,10012,7627,2944,712,2636,10330,377,5761,9592,10285,3303,329,8849,111,7405,378,7475,10316,7520,19,2314,960,11812,5250,11712,6966,12243,12165,214,10105,2653,10550,1731,3172,7872,7511,2851,5199,8623,4609,5760,10477,10255,8964,5009,1157,10565,10104,2728,10694,12087,1388,10709,725,4510,7252,10195,4453,7362,8957,11320,7008,7349,5173,11384,9749,7920,4620,11810,3903,7775,5435,5024,8589,11963,11027,2989,8924,2522,12006,11851,2040,5592,10565,1935,2309,10435,6000,1190,1293,9646,10667,9906,2922,7912,3037,899,3480,316,7134,946,11335,10186,8664,7155,855,368,10798,3942,6382,4004,5302,8824,5454,4912,11275,584,7302,1213,2145,11258,6389,3590,6397,6909,1820,8301,9555,7068,5653,1560,8823,3466,10295,10838,692,8655,4555,5711,10447,9839,5934,10010,6772,11191,833,4628,611,3633,1079,7156,6526,121,2388,7682,2748,3016,7681,10810,1748,12212,376,10407,4247,8199,9856,2972,8202,7700,12174,8249,3315,5278,12227,10128,2430,8640,5779,9649,5001,5092,12100,4208,3793,10857,2798,2684,5479,409,2670,2135,10436,11207,1682,11243,10727,2440,7372,4859,9001,1818,3882,1463,1337,8164,10455,4691,9538,1225,7649,10572,2740,9288,11935,8378,4535,9798,4279,2218,9170,5034,4475,5715,4978,11134,9617,8715,1250,2006,7534,6973,11409,6076,11816,8664,857,12148,10965,24,4659,1646,5854,8802,10405,8639,11359,7188,9920,5926,5303,10586,9318,2318,3906,1572,7941,8897,248,3545,4097,10510,3454,10508,4186,5353,7140,1099,3214,41,8175,3088,740,6187,4403,10114,9393,11917,1232,11329,6759,941,7719,10856,5308,5698,2832,2928,706,11068,10998,7250,7770,1339,6783,5379,3244,600,3745,7333,7022,448,10094,8920,2139,3461,3841,3431,7492,11088,5843,6477,12153,9255,2528,8809,889,6427,8935,8082,5015,7122,8124,6664,1045,8515,9721,486,3442,5117,2878,12052,2510,3192,10326,11794,1563,2414,5197,4256,5202,1204,2830,7647,11476,6094,4392,2687,3642,3630,6356,1197,9022,8462,9639,11439,4992,2028,7069,1145,8051,11088,11672,11680,3893,8587,2394,6101,8894,6419,6084,6037,6947,6797,7331,6675,263,11020,574,9367,2474,7675,7661,10312,623,62,2142,6307,4177,3684,1220,6577,11109,3140,475,10064,5910,5007,10582,1360,10,6141,2460,11624,330,6777,9795,9427,6442,149,7222,8101,780,7908,2850,1542,2060,11496,9202,3793,9716,9691,9789,2505,1614,4686,4178,6892,2651,11030,10395,3649,6339,1356,1280,9394,10638,10702,11240,5368,47,6897,10095,1299,7424,4419,8012,3141,4683,8222,12217,10743,697,6372,11801,2468,8642,1974,10033,6822,11703,10652,203,4415,9069,7806,112,6990,1288,3027,4240,8134,9866,6573,1810,9767,6174,2519,2117,5445,8125,5759,8122,1943,9383,11914,11386,420,6106,2132,1957,267,10599,8058,4602,6443,7579,1854,5408,1079,4998,376,6707,3596,3018,1785,6709,4671,9898,902];
        uint256[] memory hash = hashToPointNIST(salt, message);
        for (uint256 i = 0; i < n; i++) {
            assertEq(hash[i], expected_hash[i]);
        }
    }

    function testVector1() public pure {
        bytes memory salt =
            "\x4b\x09\x9f\x8e\x30\x0f\x01\xb8\x65\x0f\x1f\x4b\x1d\x8f\xcf\x3f\x3c\xb5\x3f\xb8\xe9\xeb\x2e\xa2\x03\xbd\xc9\x70\xf5\x0a\xe5\x54\x28\xa9\x1f\x7f\x53\xac\x26\x6b";
        bytes memory message = "My name is Simon";
        // forgefmt: disable-next-line
        uint256[512] memory expected_hash = [uint256(7081), 11503,2869,723,2938,8277,643,1372,1794,10400,6327,8131,7036,5558,2147,222,3262,3345,6597,7465,1739,5993,4643,7217,9690,5769,2278,1083,4091,11217,4429,1965,2330,7621,10163,7618,3873,4913,4027,2548,9492,4113,6160,11758,2827,11679,5568,6502,8082,11002,10278,7615,2054,2108,2213,10883,10770,8397,8800,4154,11279,814,4085,5840,10197,6482,10727,10155,10177,9553,6996,7885,1606,1938,11603,12038,4427,3820,1802,2311,829,12137,2,5516,6955,7911,5288,8827,9718,160,3138,10952,2404,3655,6912,2435,9174,2973,7231,4950,8887,11468,11455,893,9375,4413,6375,8156,10654,5764,7500,11319,10598,8491,1157,10365,12086,5498,6869,1280,2921,1859,1457,6347,10593,272,5571,8093,5793,9564,367,1395,2177,10498,5369,9759,8978,10041,11633,10984,1104,8781,5588,9081,3062,3115,9118,9914,3475,8550,4560,12125,5610,10303,973,11248,3606,11332,6428,5207,6661,6616,2945,5521,3431,4531,3084,1294,1945,6333,10915,7038,8324,5124,6569,4284,3871,8241,10950,3670,3777,8436,7671,10056,453,3150,2979,2039,2469,2050,4757,11059,12195,991,3380,6199,10143,9997,7560,5505,10784,6718,1086,11002,3931,6729,1867,10411,10672,700,3481,5634,2053,2531,7523,3310,6445,7165,3433,3302,11475,6266,3848,5441,5406,3835,10985,6751,10224,4963,677,1110,11362,5594,7910,8642,2105,10507,10228,8737,10976,6320,1249,6839,7795,7781,6481,1994,7832,1154,8042,10305,872,4678,9445,12014,3597,5850,2441,551,6556,8016,4509,290,9442,5333,3515,9602,10128,2202,9372,3704,9522,5550,2504,5070,7245,3426,9337,7720,5199,9443,8096,3837,7740,2217,6278,1006,2764,7417,11434,6993,12108,7148,5012,5454,6414,3475,12243,484,3426,8040,3688,2486,3690,5855,9264,9690,8434,1566,12281,10154,3004,3666,10441,269,7160,9798,5326,9015,7315,4914,1981,12285,7263,823,9153,1203,10978,11070,6417,11971,8969,3336,9575,8469,10854,3708,10484,11651,11282,9913,8505,2913,830,8735,1441,298,8966,4597,5265,6346,9247,478,1755,2404,8810,7338,3176,10225,6330,7679,6945,5750,3364,8554,11923,357,10741,9635,204,10783,2628,7618,1616,5180,10349,11541,11993,6759,10403,10930,6607,9180,9986,5095,7859,6311,617,5023,8240,6038,5606,6908,4152,7020,7687,3469,4559,8726,4402,10584,1776,7890,68,10962,9799,5586,7947,644,8570,11293,12025,6196,8585,1560,7756,537,10945,3601,5999,609,9456,10448,8801,10410,1764,4545,9512,4413,9060,11528,11943,9179,7944,5793,499,100,726,1705,8891,8435,2884,8697,1854,3095,173,6840,3574,9198,1692,537,9943,3199,8382,365,1825,1651,12070,1364,5831,608,364,6587,11686,12178,4412,4934,4722,2469,2140,1681,6863,1305,2670,4428,1823,5346,9834,9960,9364,1347,3772,630,5438,7285,1853,5844,10322,4390,5922,1451,6663,10158,6067,10163,2521,6767,11505,5826,923,7582,3284,4796,11530,8726,8732,11237,3172,7956,6583,5495];
        uint256[] memory hash = hashToPointNIST(salt, message);
        for (uint256 i = 0; i < n; i++) {
            assertEq(hash[i], expected_hash[i]);
        }
    }

    function testVector2() public pure {
        bytes memory salt =
            "\x28\x41\x9c\x37\x78\xa1\x5f\xd2\x48\xd3\x39\xed\xe7\x85\xfb\x7f\x5a\x1a\xaa\x96\xd3\x13\xea\xcc\x89\x09\x36\xc1\x73\xcd\xcd\x0f\xab\x88\x2c\x45\x75\x5f\xeb\x3a";
        bytes memory message = "My name is Nicolas";
        // forgefmt: disable-next-line
        uint256[512] memory expected_hash = [uint256(11185), 2140,5909,5770,11910,8588,5821,6186,437,2438,7647,6639,2637,9818,9348,786,12244,7769,4054,7905,3828,9335,6789,4005,4735,10361,867,4998,550,11190,11951,1376,6379,3019,12143,2601,8341,1755,11519,2969,8942,11896,8080,3968,8392,2871,5457,5752,8723,6689,7145,10277,9454,5802,7641,861,868,2002,10994,10040,1335,3338,10613,2440,3492,7086,1733,12104,769,1064,7613,5146,4229,3968,3757,2118,1676,5757,4872,6499,6745,3420,7748,8425,2169,2041,6815,4184,6315,9879,7916,11352,7613,8291,5140,6253,5083,11205,6788,7467,8063,11040,4139,12074,4197,10435,9803,12014,66,8506,4244,4203,8074,1320,4539,10434,29,640,109,1777,3496,2534,1714,7362,5820,5125,6546,4640,11281,2453,5776,8785,5288,3910,5815,11508,8839,2199,1691,247,9246,4978,5858,9546,10268,7148,8582,1503,9883,7973,1568,305,4248,5567,8260,12084,5706,3994,11030,4726,8991,11600,661,2930,11179,11477,2139,9741,2392,7532,7333,5747,7572,10713,8522,8916,8928,3133,8455,868,1189,5452,1245,10914,5196,10348,11877,2586,6629,340,5818,1494,3544,7403,1232,1980,1220,1877,804,3306,1184,7330,11413,11300,8321,1980,11144,4780,5463,2636,11919,6849,2074,11071,739,7292,8383,9621,9597,2847,7236,749,7833,6002,6065,7063,3251,9852,8496,7428,1196,6164,10084,91,9496,11424,11572,2068,3158,4941,10060,10603,3468,5568,5553,5798,8069,4745,2426,6803,11775,6643,10783,8957,4157,5793,1420,4235,1144,10760,7172,4957,772,12213,2973,7837,9620,10464,11347,2726,6172,12198,10666,10614,9741,1613,594,919,12061,7459,5291,4121,2149,6217,10427,11937,1461,5521,8706,789,6475,9865,6185,3784,6436,3437,3817,2657,9819,6521,4224,8310,2353,5474,5486,764,5677,10056,610,9368,7413,6890,11827,7236,9803,10532,1430,773,11634,8776,10786,4916,8725,3778,2585,11818,151,8628,8432,11179,7447,8706,3785,874,2378,169,8783,6108,11103,8323,6415,11825,4121,599,1619,8563,10876,5773,4121,7022,9323,8784,1793,7432,4788,1290,8422,5828,197,11897,10842,9891,8986,2414,5622,3907,8140,5179,700,11973,2446,2450,10380,8745,1719,376,8175,4020,7165,5835,5788,1496,11056,7353,3038,7278,668,3827,5304,1153,9796,2679,2986,11934,9043,2667,10026,2008,4677,3979,5232,8405,597,7470,3740,4743,9503,2496,11913,11552,625,633,4384,6078,11771,12087,7966,8898,4524,10993,2368,6781,3028,3830,1153,5952,349,8235,1663,10926,9332,5663,3627,2035,1115,1575,8010,12066,11362,9710,9103,4774,10814,9867,6015,5535,7056,9640,10784,2679,3890,6399,4356,9953,6103,7357,8410,8011,2972,8000,10686,1002,3173,214,12257,631,6534,8272,7791,352,8075,7222,7260,9370,6454,8815,7545,6443,922,6989,3629,10319,11103,10322,1899,8750,8298,221,3463,1817,7168,11184,4016,58,16,10240,5653,104,6354,2684,1633,4820,10633,7809,3587,6185,5681,1793,10461,12106,10506,11643];
        uint256[] memory hash = hashToPointNIST(salt, message);
        for (uint256 i = 0; i < n; i++) {
            assertEq(hash[i], expected_hash[i]);
        }
    }

    function testVector3() public pure {
        bytes memory salt =
            "\xed\x96\xd4\x77\xff\x96\x39\x0b\xf9\xa6\x6d\x13\x68\xb2\x08\xe2\x1f\x7c\x10\xd0\x4a\x3d\xbd\x4e\x36\x06\x33\xe5\xdb\x4b\x60\x26\x01\xc1\x4c\xea\x73\x7d\xb3\xdc";
        bytes memory message = "We are ZKNox";
        // forgefmt: disable-next-line
        uint256[512] memory expected_hash = [uint256(12217), 1916,1694,3443,8025,10039,3410,769,6852,4668,3227,9421,10954,5051,11403,3839,6496,195,6610,11860,4026,6930,2613,8343,10558,2533,9933,9071,4651,1673,7295,324,4161,2820,4250,4111,6708,6770,881,6078,124,12182,3381,11117,6738,8713,8536,894,11902,2361,11748,1920,4526,7753,6053,393,11256,11677,9005,1314,6440,1489,10348,6230,2811,845,1915,48,8866,358,1101,3765,8297,5929,3847,12114,6641,3836,6115,3343,5510,2467,5463,8234,9538,8203,708,6337,9893,5321,4870,11757,11134,1452,3638,5515,10687,7136,9722,11447,6865,10571,1742,8228,4677,1576,5838,6897,5659,8241,9167,8420,3723,4227,11979,558,4343,6276,2742,9079,9966,10201,6752,4123,7598,3639,2298,2776,10789,3719,3436,2066,1310,5785,8164,306,8118,11364,2349,4125,1907,9546,267,8990,2129,2292,4143,5536,12120,2716,5642,9021,488,6262,6414,8133,8410,10781,6763,2634,3513,4214,6263,11578,1210,10559,7315,9622,3450,1735,1544,11059,6800,3893,6145,1210,11484,3986,1606,7532,10431,2932,11374,8521,5874,3937,9891,8400,9365,11709,12202,5325,5706,1795,8094,1575,6247,6540,11982,10866,11025,1386,432,9227,4457,874,5340,11833,8909,6904,5201,11957,3313,1340,3143,1147,11803,11963,4822,9978,6560,12275,1782,9946,11916,2224,11347,1014,6370,3269,4548,5714,3608,3964,9446,2207,8448,4517,3947,475,8256,11934,2807,10086,7438,11225,3282,11636,7014,3931,9230,11275,2471,839,3691,4294,7088,2005,12027,12147,5200,6449,7025,8427,3185,12152,5714,7601,560,8709,5714,4671,10994,7513,4996,2248,7901,11999,9257,9469,7173,11118,1869,2204,1841,10515,612,6619,348,1158,4850,1837,11181,7668,10614,2783,7559,11630,9659,10046,6515,9279,11699,11553,7110,5090,1541,6232,3443,2191,11815,10162,4029,10007,5115,10675,1657,1943,6923,10250,10731,10594,6819,7905,2014,584,409,2373,5362,2382,5886,5460,2564,565,6723,4502,9040,6442,8660,4875,2558,2304,6046,8854,567,5545,7679,356,1896,4392,6042,5281,6132,8083,3350,7709,172,2919,10033,11757,3851,8663,11536,4096,5964,1206,5844,9629,12248,7476,5131,8828,7999,9081,898,10103,5511,10277,3804,11411,9180,2517,10554,10247,9590,9478,2019,8883,1249,7363,3690,6562,3808,6657,310,963,2224,7171,6662,777,8957,3678,8930,5361,6354,4847,6746,5872,6913,8545,5754,5054,6066,9228,7981,641,763,11110,3534,6564,882,11568,2377,10325,8277,6864,5246,3986,7100,3228,10260,802,6477,6436,9291,5385,5842,4984,7074,12062,10808,4776,12260,2842,2878,6605,10347,3001,4802,6979,9204,2663,34,10644,4449,3705,9036,2907,7165,2910,6658,4766,6247,1654,11928,5610,10804,1758,7879,3307,6546,9880,9518,3491,1579,7299,10574,5973,5937,1791,6195,6255,10151,1913,2920,1891,8967,928,1582,1238,6340,4784,1124,4880,2310,2563,12185,9808,11605,11490,5441,3546,11391,9554,6718,2516,778,9418,3368,7406,349,7005];
        uint256[] memory hash = hashToPointNIST(salt, message);
        for (uint256 i = 0; i < n; i++) {
            assertEq(hash[i], expected_hash[i]);
        }
    }
}
